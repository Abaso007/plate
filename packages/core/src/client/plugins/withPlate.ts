import { type TEditor, type Value, normalizeEditor } from '@udecode/slate';

import type { PlateEditor } from '../../shared/types/PlateEditor';

import {
  type GetCorePluginsOptions,
  type PlatePlugin,
  createPlugin,
  getCorePlugins,
  pipeNormalizeInitialValue,
} from '../../shared';
import { resetEditor } from '../../shared/transforms';
import { resolvePlugins } from '../../shared/utils/resolvePlugins';
import { ReactPlugin } from './react';

const shouldHaveBeenOverridden = (fnName: string) => () => {
  console.warn(
    `editor.${fnName} should have been overriden but was not. Please report this issue here: https://github.com/udecode/plate/issues`
  );
};

export type WithPlateOptions<V extends Value> = {
  children?: V;

  id?: any;

  /** Normalize editor value on initialization. */
  shouldNormalizeEditor?: boolean;
} & GetCorePluginsOptions &
  Omit<
    Partial<PlatePlugin<'editor'>>,
    | '__extensions'
    | 'component'
    | 'dependencies'
    | 'deserializeHtml'
    | 'isElement'
    | 'isInline'
    | 'isLeaf'
    | 'isMarkableVoid'
    | 'isVoid'
    | 'key'
    | 'priority'
    | 'serializeHtml'
    | 'type'
  >;

/**
 * Apply `withInlineVoid` and all plate plugins `withOverrides`. Overrides:
 *
 * - `id`: id of the editor.
 * - `key`: random key for the <Slate> component so each time the editor is
 *   created, the component resets.
 * - `options`: Plate options
 */
export const withPlate = <
  V extends Value = Value,
  E extends TEditor<V> = TEditor<V>,
>(
  e: E,
  {
    children,
    disableCorePlugins,
    id,
    maxLength,
    plugins = [],
    shouldNormalizeEditor,
    ...pluginConfig
  }: WithPlateOptions<V> = {}
): E & PlateEditor<V> => {
  let editor = e as any as E & PlateEditor<V>;

  // Override incremental id generated by slate
  editor.id = id ?? editor.id;
  editor.prevSelection = null;
  editor.isFallback = false;
  editor.currentKeyboardEvent = null;

  // Editor methods
  editor.reset = () => resetEditor(editor);
  editor.redecorate = () => shouldHaveBeenOverridden('redecorate');
  editor.plate = {
    get set() {
      shouldHaveBeenOverridden('plate.set');

      return null as any;
    },
  };

  if (!editor.key) {
    editor.key = Math.random();
  }

  const editorPlugin = createPlugin({
    key: 'editor',
    priority: 10_000,
    ...pluginConfig,
    plugins: [
      ...getCorePlugins(editor, {
        disableCorePlugins,
        maxLength,
        reactPlugin: ReactPlugin,
      }),
      ...plugins,
    ],
  });

  resolvePlugins(editor, [editorPlugin]);

  // withOverrides
  editor.plugins.forEach((plugin) => {
    if (plugin.withOverrides) {
      editor = plugin.withOverrides({ editor, plugin }) as any;
    }
  });

  if (children) {
    editor.children = children;
  }
  if (editor.children?.length) {
    pipeNormalizeInitialValue(editor);

    if (shouldNormalizeEditor) {
      normalizeEditor(editor, { force: true });
    }
  }

  return editor;
};
