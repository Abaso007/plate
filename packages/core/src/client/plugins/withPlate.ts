import {
  type TEditor,
  type Value,
  getEndPoint,
  getStartPoint,
  normalizeEditor,
  select,
} from '@udecode/slate';

import type { PlateEditor } from '../../shared/types/PlateEditor';

import {
  type AnyPlatePlugin,
  type GetCorePluginsOptions,
  createPlugin,
  getCorePlugins,
  pipeNormalizeInitialValue,
} from '../../shared';
import { resetEditor } from '../../shared/transforms';
import { resolvePlugins } from '../../shared/utils/resolvePlugins';
import { ReactPlugin } from './react';

const shouldHaveBeenOverridden = (fnName: string) => () => {
  console.warn(
    `editor.${fnName} should have been overriden but was not. Please report this issue here: https://github.com/udecode/plate/issues`
  );
};

export type WithPlateOptions<V extends Value> = {
  /**
   * Select the editor after initialization.
   *
   * @default false
   *
   * - `true` | 'end': Select the end of the editor
   * - `false`: Do not select anything
   * - `'start'`: Select the start of the editor
   */
  autoSelect?: 'end' | 'start' | boolean;

  id?: any;

  /** Function to configure the root plugin */
  rootPlugin?: (plugin: AnyPlatePlugin) => AnyPlatePlugin;

  /** Normalize editor value on initialization. */
  shouldNormalizeEditor?: boolean;

  value?: V;
} & GetCorePluginsOptions &
  Omit<
    Partial<AnyPlatePlugin>,
    | '__extensions'
    | 'component'
    | 'configure'
    | 'dependencies'
    | 'deserializeHtml'
    | 'editor'
    | 'enabled'
    | 'extend'
    | 'extendPlugin'
    | 'isElement'
    | 'isInline'
    | 'isLeaf'
    | 'isMarkableVoid'
    | 'isVoid'
    | 'key'
    | 'priority'
    | 'props'
    | 'serializeHtml'
    | 'type'
  >;

/**
 * Apply `withInlineVoid` and all plate plugins `withOverrides`. Overrides:
 *
 * - `id`: id of the editor.
 * - `key`: random key for the <Slate> component so each time the editor is
 *   created, the component resets.
 * - `options`: Plate options
 */
export const withPlate = <
  V extends Value = Value,
  E extends TEditor<V> = TEditor<V>,
>(
  e: E,
  {
    autoSelect,
    id,
    maxLength,
    plugins = [],
    rootPlugin,
    shouldNormalizeEditor,
    value,
    ...pluginConfig
  }: WithPlateOptions<V> = {}
): E & PlateEditor<V> => {
  const editor = e as any as E & PlateEditor<V>;

  // Override incremental id generated by slate
  editor.id = id ?? editor.id;
  editor.prevSelection = null;
  editor.isFallback = false;
  editor.currentKeyboardEvent = null;

  // Editor methods
  editor.reset = () => resetEditor(editor);
  editor.redecorate = () => shouldHaveBeenOverridden('redecorate');
  editor.plate = {
    get set() {
      shouldHaveBeenOverridden('plate.set');

      return null as any;
    },
  };

  if (!editor.key) {
    editor.key = Math.random();
  }

  const corePlugins = getCorePlugins({
    maxLength,
    reactPlugin: ReactPlugin,
  }).filter((p) => !editor.pluginsByKey?.[p.key]);

  let rootPluginInstance = createPlugin({
    key: 'root',
    priority: 10_000,
    ...pluginConfig,
    plugins: [...corePlugins, ...plugins],
  });

  // Apply rootPlugin configuration if provided
  if (rootPlugin) {
    rootPluginInstance = rootPlugin(rootPluginInstance);
  }

  resolvePlugins(editor, [rootPluginInstance]);

  if (value) {
    editor.children = value;
  }
  if (editor.children?.length === 0) {
    editor.children = editor.childrenFactory();
  }
  if (value) {
    pipeNormalizeInitialValue(editor);
  }
  if (shouldNormalizeEditor) {
    normalizeEditor(editor, { force: true });
  }
  if (autoSelect) {
    const edge = autoSelect === 'start' ? 'start' : 'end';
    const target =
      edge === 'start' ? getStartPoint(editor, []) : getEndPoint(editor, []);
    select(editor, target);
  }

  return editor;
};
