import {
  type TEditor,
  type TSelection,
  type Value,
  createTEditor,
  getEndPoint,
  getStartPoint,
  normalizeEditor,
  select,
} from '@udecode/slate';

import type { AnyPlatePlugin } from '../plugin/types/PlatePlugin';
import type { InferPlugins, TPlateEditor } from './PlateEditor';

import {
  type CorePlugin,
  type GetCorePluginsOptions,
  type PlateEditor,
  pipeNormalizeInitialValue,
  resolvePlugins,
} from '../index';
import { createPlugin } from '../plugin/createPlugin';
import { getCorePlugins } from '../plugins/getCorePlugins';
import { resetEditor } from '../transforms';

export type WithSlateOptions<
  V extends Value = Value,
  P extends AnyPlatePlugin = CorePlugin,
> = {
  /**
   * Select the editor after initialization.
   *
   * @default false
   *
   * - `true` | 'end': Select the end of the editor
   * - `false`: Do not select anything
   * - `'start'`: Select the start of the editor
   */
  autoSelect?: 'end' | 'start' | boolean;

  /**
   * Plugin that implements `ReactEditor` functionality from `slate-react`.
   *
   * @remarks
   *   - Use `ReactPlugin` when working with React applications.
   *   - The default `DOMPlugin` sets noop for each `ReactEditor` method.
   *   - This plugin is crucial for integrating Slate with the DOM or React
   *       environment.
   *
   * @example
   *   // Using ReactPlugin for React applications
   *   withSlate({
   *     domPlugin: ReactPlugin,
   *   });
   *
   * @example
   *   // Using custom DOM plugin
   *   withPlate({
   *     domPlugin: MyCustomDOMPlugin,
   *   });
   *
   * @default DOMPlugin
   */
  domPlugin?: AnyPlatePlugin;

  id?: any;

  plugins?: P[];

  /** Function to configure the root plugin */
  rootPlugin?: (plugin: AnyPlatePlugin) => AnyPlatePlugin;

  selection?: TSelection;

  /**
   * When `true`, it will normalize the initial `value` passed to the `editor`.
   * This is useful when adding normalization rules on already existing
   * content.
   *
   * @default false
   */
  shouldNormalizeEditor?: boolean;

  value?: V;
} & GetCorePluginsOptions &
  Pick<
    Partial<AnyPlatePlugin>,
    | 'api'
    | 'decorate'
    | 'handlers'
    | 'inject'
    | 'normalizeInitialValue'
    | 'options'
    | 'override'
    | 'renderAboveEditable'
    | 'renderAboveSlate'
    | 'renderAfterEditable'
    | 'renderBeforeEditable'
    | 'transforms'
    | 'useHooks'
    | 'withOverrides'
  >;

/**
 * Applies Plate enhancements to an editor instance (non-React version).
 *
 * @remarks
 *   This function supports server-side usage as it doesn't include the
 *   ReactPlugin.
 * @see {@link createSlateEditor} for a higher-level non-React editor creation function.
 * @see {@link createPlateEditor} for a higher-level React editor creation function.
 * @see {@link usePlateEditor} for a React memoized version.
 * @see {@link withPlate} for the React-specific enhancement function.
 */
export const withSlate = <
  V extends Value = Value,
  P extends AnyPlatePlugin = CorePlugin,
>(
  e: TEditor,
  {
    autoSelect,
    domPlugin,
    id,
    maxLength,
    plugins = [],
    rootPlugin,
    selection,
    shouldNormalizeEditor,
    value,
    ...pluginConfig
  }: WithSlateOptions<V, P> = {}
): TPlateEditor<V, InferPlugins<P[]>> => {
  const editor = e as PlateEditor;

  // Override incremental id generated by slate
  editor.id = id ?? editor.id;
  editor.prevSelection = null;
  editor.isFallback = false;
  editor.currentKeyboardEvent = null;

  // Editor methods
  editor.reset = () => resetEditor(editor);
  editor.redecorate = () => {
    editor.api.debug.warn({
      message: `editor.redecorate should have been overridden but was not. Please report this issue here: https://github.com/udecode/plate/issues`,
      type: 'OVERRIDE_ERROR',
    });
  };
  editor.plate = {
    get set() {
      editor.api.debug.warn({
        message: `editor.plate.set should have been overridden but was not. Please report this issue here: https://github.com/udecode/plate/issues`,
        type: 'OVERRIDE_ERROR',
      });

      return null as any;
    },
  };

  if (!editor.key) {
    editor.key = Math.random();
  }

  const corePlugins = getCorePlugins({
    domPlugin,
    maxLength,
  }).filter((p) => !editor.pluginsByKey?.[p.key]);

  let rootPluginInstance = createPlugin({
    key: 'root',
    priority: 10_000,
    ...pluginConfig,
    plugins: [...corePlugins, ...plugins],
  });

  // Apply rootPlugin configuration if provided
  if (rootPlugin) {
    rootPluginInstance = rootPlugin(rootPluginInstance) as any;
  }

  resolvePlugins(editor, [rootPluginInstance]);

  if (value) {
    editor.children = value;
  }
  if (editor.children?.length === 0) {
    editor.children = editor.childrenFactory();
  }
  if (selection) {
    editor.selection = selection;
  } else if (autoSelect) {
    const edge = autoSelect === 'start' ? 'start' : 'end';
    const target =
      edge === 'start' ? getStartPoint(editor, []) : getEndPoint(editor, []);
    select(editor, target);
  }
  if (value) {
    pipeNormalizeInitialValue(editor);
  }
  if (shouldNormalizeEditor) {
    normalizeEditor(editor, { force: true });
  }

  return editor as any;
};

export type CreateSlateEditorOptions<
  V extends Value = Value,
  P extends AnyPlatePlugin = CorePlugin,
> = {
  /**
   * Initial editor to be extended with `withPlate`.
   *
   * @default createEditor()
   */
  editor?: TEditor;
} & WithSlateOptions<V, P>;

/**
 * Creates a Slate editor without React-specific enhancements.
 *
 * @see {@link createPlateEditor} for a React-specific version of editor creation.
 * @see {@link usePlateEditor} for a memoized React version.
 * @see {@link withSlate} for the underlying function that applies Slate enhancements to an editor.
 */
export const createSlateEditor = <
  V extends Value = Value,
  P extends AnyPlatePlugin = CorePlugin,
>({
  editor = createTEditor(),
  ...options
}: CreateSlateEditorOptions<V, P> = {}) => {
  return withSlate<V, P>(editor, options);
};
