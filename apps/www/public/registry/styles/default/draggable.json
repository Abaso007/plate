{
  "dependencies": [
    "@udecode/plate-dnd",
    "react-dnd",
    "react-dnd-html5-backend"
  ],
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport type {\n  ClassNames,\n  PlateElementProps,\n  TEditor,\n} from '@udecode/plate-common';\nimport type { DropTargetMonitor } from 'react-dnd';\n\nimport { cn, withRef } from '@udecode/cn';\nimport {\n  type DragItemNode,\n  useDraggable,\n  useDraggableState,\n} from '@udecode/plate-dnd';\nimport { blockSelectionActions } from '@udecode/plate-selection';\n\nimport { Icons } from '@/components/icons';\n\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipPortal,\n  TooltipTrigger,\n} from './tooltip';\n\nexport interface DraggableProps\n  extends PlateElementProps,\n    ClassNames<{\n      /** Block. */\n      block: string;\n\n      /** Block and gutter. */\n      blockAndGutter: string;\n\n      /** Block toolbar in the gutter. */\n      blockToolbar: string;\n\n      /**\n       * Block toolbar wrapper in the gutter left. It has the height of a line\n       * of the block.\n       */\n      blockToolbarWrapper: string;\n\n      blockWrapper: string;\n\n      /** Button to dnd the block, in the block toolbar. */\n      dragHandle: string;\n\n      /** Icon of the drag button, in the drag icon. */\n      dragIcon: string;\n\n      /** Show a dropline above or below the block when dragging a block. */\n      dropLine: string;\n\n      /** Gutter at the left side of the editor. It has the height of the block */\n      gutterLeft: string;\n    }> {\n  /**\n   * Intercepts the drop handling. If `false` is returned, the default drop\n   * behavior is called after. If `true` is returned, the default behavior is\n   * not called.\n   */\n  onDropHandler?: (\n    editor: TEditor,\n    props: {\n      dragItem: DragItemNode;\n      id: string;\n      monitor: DropTargetMonitor<DragItemNode, unknown>;\n      nodeRef: any;\n    }\n  ) => boolean;\n}\n\nconst DragHandle = () => {\n  return (\n    <Tooltip>\n      <TooltipTrigger type=\"button\">\n        <Icons.dragHandle\n          className=\"size-4 text-muted-foreground\"\n          onClick={(event) => {\n            event.stopPropagation();\n            event.preventDefault();\n\n            // if (element.id) {\n            //   blockSelectionActions.addSelectedRow(element.id as string);\n            //   blockContextMenuActions.show(editor.id, event as any);\n            // }\n          }}\n          onMouseDown={() => {\n            blockSelectionActions.resetSelectedIds();\n          }}\n        />\n      </TooltipTrigger>\n      <TooltipPortal>\n        <TooltipContent>Drag to move</TooltipContent>\n      </TooltipPortal>\n    </Tooltip>\n  );\n};\n\nexport const Draggable = withRef<'div', DraggableProps>(\n  ({ className, classNames = {}, onDropHandler, ...props }, ref) => {\n    const { children, element } = props;\n\n    const state = useDraggableState({ element, onDropHandler });\n    const { dropLine, isDragging, isHovered } = state;\n    const {\n      droplineProps,\n      groupProps,\n      gutterLeftProps,\n      handleRef,\n      previewRef,\n    } = useDraggable(state);\n\n    return (\n      <div\n        className={cn(\n          'relative',\n          isDragging && 'opacity-50',\n          'group',\n          className\n        )}\n        ref={ref}\n        {...groupProps}\n      >\n        <div\n          className={cn(\n            'pointer-events-none absolute -top-px z-50 flex h-full -translate-x-full cursor-text opacity-0 group-hover:opacity-100',\n            classNames.gutterLeft\n          )}\n          {...gutterLeftProps}\n        >\n          <div className={cn('flex h-[1.5em]', classNames.blockToolbarWrapper)}>\n            <div\n              className={cn(\n                'pointer-events-auto mr-1 flex items-center',\n                classNames.blockToolbar\n              )}\n            >\n              <div\n                className=\"size-4\"\n                data-key={element.id as string}\n                ref={handleRef}\n              >\n                {isHovered && <DragHandle />}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className={classNames.blockWrapper} ref={previewRef}>\n          {children}\n\n          {!!dropLine && (\n            <div\n              className={cn(\n                'absolute inset-x-0 h-0.5 opacity-100',\n                'bg-ring',\n                dropLine === 'top' && '-top-px',\n                dropLine === 'bottom' && '-bottom-px',\n                classNames.dropLine\n              )}\n              {...droplineProps}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n",
      "name": "draggable.tsx"
    },
    {
      "content": "import type { FC } from 'react';\n\nimport { ELEMENT_BLOCKQUOTE } from '@udecode/plate-block-quote';\nimport { ELEMENT_CODE_BLOCK } from '@udecode/plate-code-block';\nimport { createNodesWithHOC } from '@udecode/plate-common';\nimport {\n  type WithDraggableOptions,\n  withDraggable as withDraggablePrimitive,\n} from '@udecode/plate-dnd';\nimport { ELEMENT_EXCALIDRAW } from '@udecode/plate-excalidraw';\nimport {\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_H4,\n  ELEMENT_H5,\n  ELEMENT_H6,\n} from '@udecode/plate-heading';\nimport { ELEMENT_COLUMN_GROUP } from '@udecode/plate-layout';\nimport { ELEMENT_OL, ELEMENT_UL } from '@udecode/plate-list';\nimport {\n  ELEMENT_IMAGE,\n  ELEMENT_MEDIA_EMBED,\n  ELEMENT_PLACEHOLDER,\n} from '@udecode/plate-media';\nimport { ELEMENT_PARAGRAPH } from '@udecode/plate-paragraph';\nimport { ELEMENT_TABLE } from '@udecode/plate-table';\nimport { ELEMENT_TOGGLE } from '@udecode/plate-toggle';\n\nimport { Draggable, type DraggableProps } from './draggable';\n\nexport const withDraggable = (\n  Component: FC,\n  options?: WithDraggableOptions<\n    Partial<Omit<DraggableProps, 'children' | 'editor' | 'element'>>\n  >\n) =>\n  withDraggablePrimitive<DraggableProps>(Draggable, Component, options as any);\n\nexport const withDraggablesPrimitive = createNodesWithHOC(withDraggable);\n\nexport const withDraggables = (components: any) => {\n  return withDraggablesPrimitive(components, [\n    {\n      keys: [ELEMENT_PARAGRAPH, ELEMENT_UL, ELEMENT_OL],\n      level: 0,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          blockToolbarWrapper: 'h-[1.3em]',\n          gutterLeft: 'px-0 pb-1 text-[1.875em]',\n        },\n      },\n      key: ELEMENT_H1,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          blockToolbarWrapper: 'h-[1.3em]',\n          gutterLeft: 'px-0 pb-1 text-[1.5em]',\n        },\n      },\n      key: ELEMENT_H2,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          blockToolbarWrapper: 'h-[1.3em]',\n          gutterLeft: 'pt-[2px] px-0 pb-1 text-[1.25em]',\n        },\n      },\n      key: ELEMENT_H3,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          blockToolbarWrapper: 'h-[1.3em]',\n          gutterLeft: 'pt-[3px] px-0 pb-0 text-[1.1em]',\n        },\n      },\n      keys: [ELEMENT_H4, ELEMENT_H5],\n    },\n    {\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-[3px] px-0 pb-0',\n        },\n      },\n      keys: [ELEMENT_PARAGRAPH],\n    },\n    {\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'px-0 pb-0',\n        },\n      },\n      keys: [ELEMENT_H6, ELEMENT_UL, ELEMENT_OL],\n    },\n    {\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'px-0 pb-0',\n        },\n      },\n      key: ELEMENT_BLOCKQUOTE,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-6 px-0 pb-0',\n        },\n      },\n      key: ELEMENT_CODE_BLOCK,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-0 px-0 pb-0',\n        },\n      },\n      key: ELEMENT_IMAGE,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-0 px-0 pb-0',\n        },\n      },\n      key: ELEMENT_MEDIA_EMBED,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-0 px-0 pb-0',\n        },\n      },\n      key: ELEMENT_EXCALIDRAW,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-0 px-0 pb-0',\n        },\n      },\n      key: ELEMENT_TOGGLE,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-0 px-0 pb-0',\n        },\n      },\n      key: ELEMENT_COLUMN_GROUP,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-3 px-0 pb-0',\n        },\n      },\n      key: ELEMENT_PLACEHOLDER,\n    },\n    {\n      draggableProps: {\n        classNames: {\n          gutterLeft: 'pt-3 px-0 pb-0',\n        },\n      },\n      key: ELEMENT_TABLE,\n    },\n  ]);\n};\n",
      "name": "with-draggables.tsx"
    }
  ],
  "name": "draggable",
  "registryDependencies": [
    "tooltip"
  ],
  "type": "components:plate-ui"
}