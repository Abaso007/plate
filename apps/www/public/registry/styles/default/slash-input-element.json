{
  "dependencies": [
    "@udecode/plate-heading",
    "@udecode/plate-indent-list"
  ],
  "files": [
    {
      "content": "import React, { type ComponentType, type SVGProps } from 'react';\n\nimport { withRef } from '@udecode/cn';\nimport { type PlateEditor, PlateElement } from '@udecode/plate-common/react';\nimport { DatePlugin } from '@udecode/plate-date/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { ListStyleType, toggleIndentList } from '@udecode/plate-indent-list';\n\nimport { Icons } from '@/components/icons';\n\nimport {\n  InlineCombobox,\n  InlineComboboxContent,\n  InlineComboboxEmpty,\n  InlineComboboxInput,\n  InlineComboboxItem,\n} from './inline-combobox';\n\ninterface SlashCommandRule {\n  icon: ComponentType<SVGProps<SVGSVGElement>>;\n  onSelect: (editor: PlateEditor) => void;\n  value: string;\n  keywords?: string[];\n}\n\nconst rules: SlashCommandRule[] = [\n  {\n    icon: Icons.h1,\n    value: 'Heading 1',\n    onSelect: (editor) => {\n      editor.tf.toggle.block({ type: HEADING_KEYS.h1 });\n    },\n  },\n  {\n    icon: Icons.h2,\n    value: 'Heading 2',\n    onSelect: (editor) => {\n      editor.tf.toggle.block({ type: HEADING_KEYS.h2 });\n    },\n  },\n  {\n    icon: Icons.h3,\n    value: 'Heading 3',\n    onSelect: (editor) => {\n      editor.tf.toggle.block({ type: HEADING_KEYS.h3 });\n    },\n  },\n  {\n    icon: Icons.ul,\n    keywords: ['ul', 'unordered list'],\n    value: 'Bulleted list',\n    onSelect: (editor) => {\n      toggleIndentList(editor, {\n        listStyleType: ListStyleType.Disc,\n      });\n    },\n  },\n  {\n    icon: Icons.ol,\n    keywords: ['ol', 'ordered list'],\n    value: 'Numbered list',\n    onSelect: (editor) => {\n      toggleIndentList(editor, {\n        listStyleType: ListStyleType.Decimal,\n      });\n    },\n  },\n  {\n    icon: Icons.add,\n    keywords: ['inline', 'date'],\n    value: 'Date',\n    onSelect: (editor) => {\n      editor.getTransforms(DatePlugin).insert.date();\n    },\n  },\n];\n\nexport const SlashInputElement = withRef<typeof PlateElement>(\n  ({ className, ...props }, ref) => {\n    const { children, editor, element } = props;\n\n    return (\n      <PlateElement\n        ref={ref}\n        as=\"span\"\n        data-slate-value={element.value}\n        {...props}\n      >\n        <InlineCombobox element={element} trigger=\"/\">\n          <InlineComboboxInput />\n\n          <InlineComboboxContent>\n            <InlineComboboxEmpty>\n              No matching commands found\n            </InlineComboboxEmpty>\n\n            {rules.map(({ icon: Icon, keywords, value, onSelect }) => (\n              <InlineComboboxItem\n                key={value}\n                value={value}\n                onClick={() => onSelect(editor)}\n                keywords={keywords}\n              >\n                <Icon className=\"mr-2 size-4\" aria-hidden />\n                {value}\n              </InlineComboboxItem>\n            ))}\n          </InlineComboboxContent>\n        </InlineCombobox>\n\n        {children}\n      </PlateElement>\n    );\n  }\n);\n",
      "name": "slash-input-element.tsx"
    }
  ],
  "name": "slash-input-element",
  "registryDependencies": [
    "inline-combobox"
  ],
  "type": "components:plate-ui"
}