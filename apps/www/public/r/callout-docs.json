{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "callout-docs",
  "type": "registry:file",
  "title": "Callout",
  "description": "Documentation for Callout",
  "files": [
    {
      "path": "../../docs/callout.mdx",
      "content": "---\ntitle: Callout\ndocs:\n  - route: https://pro.platejs.org/docs/components/callout-node\n    title: Callout Element\n---\n\n<PackageInfo>\n\n## Features\n\n- Customizable callout blocks for highlighting important information\n- Support for different callout variants (e.g., info, warning, error)\n- Ability to set custom icons or emojis for callouts\n\n</PackageInfo>\n\n## Installation\n\n```bash\nnpm install @udecode/plate-callout\n```\n\n## Usage\n\n```tsx\nimport { CalloutPlugin } from '@udecode/plate-callout/react';\n```\n\n```tsx\nconst plugins = [\n  // ...otherPlugins,\n  CalloutPlugin,\n]\n```\n\n```tsx\nconst components = {\n  // ...otherComponents,\n  [CalloutPlugin.key]: CalloutElement,\n}\n```\n\n- [CalloutElement](https://pro.platejs.org/docs/components/callout-node) (Plus)\n\n## Examples\n\n### Plate UI\n\nWork in progress.\n\n### Plate Plus\n\n<ComponentPreviewPro name=\"callout-pro\" />\n\n## Plugins\n\n### `CalloutPlugin`\n\nCallout element plugin.\n\n## Transforms\n\n### `editor.tf.insert.callout`\n\nInsert a callout element into the editor.\n\n<API name=\"callout\">\n<APIOptions type=\"object\">\n  <APIItem name=\"variant\" type=\"string\" optional>\n    The variant of the callout to insert.\n  </APIItem>\n  <APIItem name=\"...InsertNodesOptions\" type=\"InsertNodesOptions<V>\">\n    Other options from `InsertNodesOptions`.\n  </APIItem>\n</APIOptions>\n</API>\n\n## Hooks\n\n### `useCalloutEmojiPicker`\n\nManage the emoji picker functionality for callouts.\n\n<API name=\"useCalloutEmojiPicker\">\n<APIOptions type=\"UseCalloutEmojiPickerOptions\">\n  <APIItem name=\"isOpen\" type=\"boolean\">\n    Whether the emoji picker is open.\n  </APIItem>\n  <APIItem name=\"setIsOpen\" type=\"(isOpen: boolean) => void\">\n    Function to set the open state of the emoji picker.\n  </APIItem>\n</APIOptions>\n\n<APIReturns type=\"object\">\n  <APIItem name=\"emojiToolbarDropdownProps\" type=\"object\">\n    Props for the emoji toolbar dropdown.\n    <APISubList>\n      <APISubListItem parent=\"emojiToolbarDropdownProps\" name=\"isOpen\" type=\"boolean\">\n        Whether the emoji picker is open.\n      </APISubListItem>\n      <APISubListItem parent=\"emojiToolbarDropdownProps\" name=\"setIsOpen\" type=\"(v: boolean) => void\">\n        Function to set the open state of the emoji picker, respecting read-only mode.\n      </APISubListItem>\n    </APISubList>\n  </APIItem>\n  <APIItem name=\"props\" type=\"object\">\n    Props for the emoji picker component.\n    <APISubList>\n      <APISubListItem parent=\"props\" name=\"isOpen\" type=\"boolean\">\n        Whether the emoji picker is open.\n      </APISubListItem>\n      <APISubListItem parent=\"props\" name=\"setIsOpen\" type=\"(isOpen: boolean) => void\">\n        Function to set the open state of the emoji picker.\n      </APISubListItem>\n      <APISubListItem parent=\"props\" name=\"onSelectEmoji\" type=\"(options: { emojiValue?: any; icon?: any }) => void\">\n        Function called when an emoji is selected. It updates the callout's icon and closes the picker.\n      </APISubListItem>\n    </APISubList>\n  </APIItem>\n</APIReturns>\n</API>\n\n## Types\n\n### `TCalloutElement`\n\n```typescript\ninterface TCalloutElement extends TElement {\n  variant?: string;\n  icon?: string;\n}\n```\n\n<API name=\"TCalloutElement\">\n<APIAttributes>\n  <APIItem name=\"variant\" type=\"string\" optional>\n    The variant of the callout.\n  </APIItem>\n  <APIItem name=\"icon\" type=\"string\" optional>\n    The icon or emoji to display.\n  </APIItem>\n</APIAttributes>\n</API>\n",
      "type": "registry:file",
      "target": "content/docs/plate/plugins/callout.mdx"
    }
  ]
}