{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "copilot-demo",
  "type": "registry:example",
  "description": "Renders AI ghost text suggestions at the cursor position.",
  "dependencies": [
    "@udecode/cn",
    "@udecode/plate-ai",
    "@udecode/plate-markdown"
  ],
  "registryDependencies": [
    "https://platejs.org/r/copilot-kit",
    "https://platejs.org/r/editor",
    "https://platejs.org/r/use-create-editor"
  ],
  "files": [
    {
      "path": "src/registry/examples/copilot-demo.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport { Plate } from '@udecode/plate/react';\n\nimport { CopilotKit } from '@/registry/components/editor/plugins/copilot-kit';\nimport { EditorKit } from '@/registry/components/editor/plugins/editor-kit';\nimport { useCreateEditor } from '@/registry/components/editor/use-create-editor';\nimport { copilotValue } from '@/registry/examples/values/copilot-value';\nimport { Editor, EditorContainer } from '@/registry/ui/editor';\n\nexport default function CopilotDemo() {\n  const editor = useCreateEditor({\n    plugins: [...CopilotKit, ...EditorKit],\n    value: copilotValue,\n  });\n\n  return (\n    <Plate editor={editor}>\n      <EditorContainer variant=\"demo\">\n        <Editor />\n      </EditorContainer>\n    </Plate>\n  );\n}\n",
      "type": "registry:example"
    },
    {
      "path": "src/registry/examples/values/copilot-value.tsx",
      "content": "/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@udecode/plate-test-utils';\n\njsx;\n\nexport const copilotValue: any = (\n  <fragment>\n    <hh2>Copilot</hh2>\n    <hp indent={1} listStyleType=\"decimal\">\n      <htext>Position your cursor at the</htext>\n      <htext bold> end of a paragraph </htext>\n      <htext>where you want to add or modify text.</htext>\n    </hp>\n    <hp indent={1} listStart={2} listStyleType=\"decimal\">\n      <htext>Press Control + Space to trigger Copilot</htext>\n    </hp>\n    <hp indent={1} listStart={3} listStyleType=\"decimal\">\n      <htext>Copilot will</htext>\n      <htext bold> automatically</htext>\n      <htext> suggest completions as you type.</htext>\n    </hp>\n    <hp indent={1} listStart={4} listStyleType=\"decimal\">\n      <htext>Choose from the suggested completions:</htext>\n    </hp>\n    <hp indent={2} listStyleType=\"disc\">\n      <htext bold>Tab</htext>:\n      <htext>Accept the entire suggested completion</htext>\n    </hp>\n    <hp indent={2} listStyleType=\"disc\">\n      <htext bold>Command + Right Arrow</htext>\n      <htext>: Complete one character at a time</htext>\n    </hp>\n    <hp indent={2} listStyleType=\"disc\">\n      <htext bold>Escape</htext>\n      <htext>: Cancel the Copilot</htext>\n    </hp>\n  </fragment>\n);\n",
      "type": "registry:example"
    },
    {
      "path": "src/registry/components/editor/use-create-editor.ts",
      "content": "'use client';\n\nimport type { Value } from '@udecode/plate';\n\nimport {\n  type CreatePlateEditorOptions,\n  usePlateEditor,\n} from '@udecode/plate/react';\n\nimport { EditorKit } from './plugins/editor-kit';\n\nexport const useCreateEditor = (\n  {\n    ...options\n  }: {\n    plugins?: any;\n  } & Omit<CreatePlateEditorOptions, 'plugins'> = {},\n  deps: any[] = []\n) => {\n  return usePlateEditor<Value, (typeof EditorKit)[number]>(\n    {\n      plugins: EditorKit,\n      ...options,\n    },\n    deps\n  );\n};\n",
      "type": "registry:example"
    },
    {
      "path": "src/registry/components/editor/plugins/editor-kit.tsx",
      "content": "'use client';\n\nimport { AIKit } from './ai-kit';\nimport { AlignKit } from './align-kit';\nimport { AutoformatKit } from './autoformat-kit';\nimport { BasicNodesKit } from './basic-nodes-kit';\nimport { BlockMenuKit } from './block-menu-kit';\nimport { BlockPlaceholderKit } from './block-placeholder-kit';\nimport { CalloutKit } from './callout-kit';\nimport { ColumnKit } from './column-kit';\nimport { CommentKit } from './comment-kit';\nimport { CursorOverlayKit } from './cursor-overlay-kit';\nimport { DateKit } from './date-kit';\nimport { DiscussionKit } from './discussion-kit';\nimport { DndKit } from './dnd-kit';\nimport { DocxKit } from './docx-kit';\nimport { EditingKit } from './editing-kit';\nimport { EmojiKit } from './emoji-kit';\nimport { FixedToolbarKit } from './fixed-toolbar-kit';\nimport { FloatingToolbarKit } from './floating-toolbar-kit';\nimport { FontKit } from './font-kit';\nimport { HighlightKit } from './highlight-kit';\nimport { HorizontalRuleKit } from './hr-kit';\nimport { KbdKit } from './kbd-kit';\nimport { LineHeightKit } from './line-height-kit';\nimport { LinkKit } from './link-kit';\nimport { ListKit } from './list-kit';\nimport { MarkdownKit } from './markdown-kit';\nimport { MathKit } from './math-kit';\nimport { MediaKit } from './media-kit';\nimport { MentionKit } from './mention-kit';\nimport { SlashKit } from './slash-kit';\nimport { SuggestionKit } from './suggestion-kit';\nimport { TableKit } from './table-kit';\nimport { TocKit } from './toc-kit';\nimport { ToggleKit } from './toggle-kit';\n\nexport const ViewKit = [\n  // Elements\n  ...BasicNodesKit,\n  ...HorizontalRuleKit,\n  ...DateKit,\n  ...LinkKit,\n  ...MentionKit,\n  ...TableKit,\n  ...ToggleKit,\n  ...TocKit,\n  ...MediaKit,\n  ...MathKit,\n  ...CalloutKit,\n  ...ColumnKit,\n\n  // Marks\n  ...FontKit,\n  ...HighlightKit,\n  ...KbdKit,\n\n  // Block Style\n  ...AlignKit,\n  ...ListKit,\n  ...LineHeightKit,\n\n  // Collaboration\n  ...DiscussionKit,\n  ...CommentKit,\n  ...SuggestionKit,\n];\n\nexport const EditorKit = [\n  ...AIKit,\n  ...ViewKit,\n\n  // Edit-only\n  ...SlashKit,\n  ...AutoformatKit,\n  ...CursorOverlayKit,\n  ...BlockMenuKit,\n  ...DndKit,\n  ...EmojiKit,\n  ...EditingKit,\n\n  // Deserialization\n  ...DocxKit,\n  ...MarkdownKit,\n\n  // UI\n  ...BlockPlaceholderKit,\n  ...FixedToolbarKit,\n  ...FloatingToolbarKit,\n];\n",
      "type": "registry:example"
    }
  ],
  "meta": {
    "docs": [
      {
        "route": "/docs/copilot",
        "title": "Copilot"
      }
    ]
  }
}