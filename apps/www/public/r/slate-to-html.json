{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "slate-to-html",
  "type": "registry:block",
  "dependencies": [
    "@udecode/cn"
  ],
  "registryDependencies": [
    "https://platejs.org/r/plate-ui"
  ],
  "files": [
    {
      "path": "src/registry/blocks/slate-to-html/page.tsx",
      "content": "import * as React from 'react';\n\nimport { withProps } from '@udecode/cn';\nimport {\n  type Value,\n  BaseParagraphPlugin,\n  createSlateEditor,\n  serializeHtml,\n  SlateLeaf,\n} from '@udecode/plate';\nimport { BaseAlignPlugin } from '@udecode/plate-alignment';\nimport {\n  BaseBoldPlugin,\n  BaseCodePlugin,\n  BaseItalicPlugin,\n  BaseStrikethroughPlugin,\n  BaseSubscriptPlugin,\n  BaseSuperscriptPlugin,\n  BaseUnderlinePlugin,\n} from '@udecode/plate-basic-marks';\nimport { BaseBlockquotePlugin } from '@udecode/plate-block-quote';\nimport {\n  BaseCodeBlockPlugin,\n  BaseCodeLinePlugin,\n  BaseCodeSyntaxPlugin,\n} from '@udecode/plate-code-block';\nimport { BaseCommentsPlugin } from '@udecode/plate-comments';\nimport { BaseDatePlugin } from '@udecode/plate-date';\nimport {\n  BaseFontBackgroundColorPlugin,\n  BaseFontColorPlugin,\n  BaseFontSizePlugin,\n} from '@udecode/plate-font';\nimport {\n  BaseHeadingPlugin,\n  BaseTocPlugin,\n  HEADING_KEYS,\n  HEADING_LEVELS,\n} from '@udecode/plate-heading';\nimport { BaseHighlightPlugin } from '@udecode/plate-highlight';\nimport { BaseHorizontalRulePlugin } from '@udecode/plate-horizontal-rule';\nimport { BaseIndentPlugin } from '@udecode/plate-indent';\nimport { BaseIndentListPlugin } from '@udecode/plate-indent-list';\nimport { BaseKbdPlugin } from '@udecode/plate-kbd';\nimport { BaseColumnItemPlugin, BaseColumnPlugin } from '@udecode/plate-layout';\nimport { BaseLineHeightPlugin } from '@udecode/plate-line-height';\nimport { BaseLinkPlugin } from '@udecode/plate-link';\nimport {\n  BaseEquationPlugin,\n  BaseInlineEquationPlugin,\n} from '@udecode/plate-math';\nimport {\n  BaseAudioPlugin,\n  BaseFilePlugin,\n  BaseImagePlugin,\n  BaseMediaEmbedPlugin,\n  BaseVideoPlugin,\n} from '@udecode/plate-media';\nimport { BaseMentionPlugin } from '@udecode/plate-mention';\nimport {\n  BaseTableCellHeaderPlugin,\n  BaseTableCellPlugin,\n  BaseTablePlugin,\n  BaseTableRowPlugin,\n} from '@udecode/plate-table';\nimport { BaseTogglePlugin } from '@udecode/plate-toggle';\nimport { all, createLowlight } from 'lowlight';\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\n\nimport { H3 } from '@/components/typography';\nimport {\n  EditorClient,\n  ExportHtmlButton,\n  HtmlIframe,\n} from '@/registry/components/editor/slate-to-html';\nimport { alignValue } from '@/registry/examples/values/align-value';\nimport { basicElementsValue } from '@/registry/examples/values/basic-elements-value';\nimport { basicMarksValue } from '@/registry/examples/values/basic-marks-value';\nimport { columnValue } from '@/registry/examples/values/column-value';\nimport { commentsValue } from '@/registry/examples/values/comments-value';\nimport { dateValue } from '@/registry/examples/values/date-value';\nimport { equationValue } from '@/registry/examples/values/equation-value';\nimport { fontValue } from '@/registry/examples/values/font-value';\nimport { highlightValue } from '@/registry/examples/values/highlight-value';\nimport { horizontalRuleValue } from '@/registry/examples/values/horizontal-rule-value';\nimport { indentListValue } from '@/registry/examples/values/indent-list-value';\nimport { indentValue } from '@/registry/examples/values/indent-value';\nimport { kbdValue } from '@/registry/examples/values/kbd-value';\nimport { lineHeightValue } from '@/registry/examples/values/line-height-value';\nimport { linkValue } from '@/registry/examples/values/link-value';\nimport { todoListValue } from '@/registry/examples/values/list-value';\nimport { mediaValue } from '@/registry/examples/values/media-value';\nimport { mentionValue } from '@/registry/examples/values/mention-value';\nimport { tableValue } from '@/registry/examples/values/table-value';\nimport { tocPlaygroundValue } from '@/registry/examples/values/toc-value';\nimport { createHtmlDocument } from '@/registry/lib/create-html-document';\nimport { BlockquoteElementStatic } from '@/registry/ui/blockquote-element-static';\nimport { CodeBlockElementStatic } from '@/registry/ui/code-block-element-static';\nimport { CodeLeafStatic } from '@/registry/ui/code-leaf-static';\nimport { CodeLineElementStatic } from '@/registry/ui/code-line-element-static';\nimport { CodeSyntaxLeafStatic } from '@/registry/ui/code-syntax-leaf-static';\nimport { ColumnElementStatic } from '@/registry/ui/column-element-static';\nimport { ColumnGroupElementStatic } from '@/registry/ui/column-group-element-static';\nimport { CommentLeafStatic } from '@/registry/ui/comment-leaf-static';\nimport { DateElementStatic } from '@/registry/ui/date-element-static';\nimport { EditorStatic } from '@/registry/ui/editor-static';\nimport { EquationElementStatic } from '@/registry/ui/equation-element-static';\nimport { HeadingElementStatic } from '@/registry/ui/heading-element-static';\nimport { HighlightLeafStatic } from '@/registry/ui/highlight-leaf-static';\nimport { HrElementStatic } from '@/registry/ui/hr-element-static';\nimport { ImageElementStatic } from '@/registry/ui/image-element-static';\nimport { FireLiComponent, FireMarker } from '@/registry/ui/indent-fire-marker';\nimport {\n  TodoLiStatic,\n  TodoMarkerStatic,\n} from '@/registry/ui/indent-todo-marker-static';\nimport { InlineEquationElementStatic } from '@/registry/ui/inline-equation-element-static';\nimport { KbdLeafStatic } from '@/registry/ui/kbd-leaf-static';\nimport { LinkElementStatic } from '@/registry/ui/link-element-static';\nimport { MediaAudioElementStatic } from '@/registry/ui/media-audio-element-static';\nimport { MediaFileElementStatic } from '@/registry/ui/media-file-element-static';\nimport { MediaVideoElementStatic } from '@/registry/ui/media-video-element-static';\nimport { MentionElementStatic } from '@/registry/ui/mention-element-static';\nimport { ParagraphElementStatic } from '@/registry/ui/paragraph-element-static';\nimport {\n  TableCellElementStatic,\n  TableCellHeaderStaticElement,\n} from '@/registry/ui/table-cell-element-static';\nimport { TableElementStatic } from '@/registry/ui/table-element-static';\nimport { TableRowElementStatic } from '@/registry/ui/table-row-element-static';\nimport { TocElementStatic } from '@/registry/ui/toc-element-static';\nimport { ToggleElementStatic } from '@/registry/ui/toggle-element-static';\n\nconst getCachedTailwindCss = React.cache(async () => {\n  const cssPath = path.join(process.cwd(), 'public', 'tailwind.css');\n\n  return await fs.readFile(cssPath, 'utf8');\n});\n\nconst lowlight = createLowlight(all);\n\nexport default async function SlateToHtmlBlock() {\n  const components = {\n    [BaseAudioPlugin.key]: MediaAudioElementStatic,\n    [BaseBlockquotePlugin.key]: BlockquoteElementStatic,\n    [BaseBoldPlugin.key]: withProps(SlateLeaf, { as: 'strong' }),\n    [BaseCodeBlockPlugin.key]: CodeBlockElementStatic,\n    [BaseCodeLinePlugin.key]: CodeLineElementStatic,\n    [BaseCodePlugin.key]: CodeLeafStatic,\n    [BaseCodeSyntaxPlugin.key]: CodeSyntaxLeafStatic,\n    [BaseColumnItemPlugin.key]: ColumnElementStatic,\n    [BaseColumnPlugin.key]: ColumnGroupElementStatic,\n    [BaseCommentsPlugin.key]: CommentLeafStatic,\n    [BaseDatePlugin.key]: DateElementStatic,\n    [BaseEquationPlugin.key]: EquationElementStatic,\n    [BaseFilePlugin.key]: MediaFileElementStatic,\n    [BaseHighlightPlugin.key]: HighlightLeafStatic,\n    [BaseHorizontalRulePlugin.key]: HrElementStatic,\n    [BaseImagePlugin.key]: ImageElementStatic,\n    [BaseInlineEquationPlugin.key]: InlineEquationElementStatic,\n    [BaseItalicPlugin.key]: withProps(SlateLeaf, { as: 'em' }),\n    [BaseKbdPlugin.key]: KbdLeafStatic,\n    [BaseLinkPlugin.key]: LinkElementStatic,\n    // [BaseMediaEmbedPlugin.key]: MediaEmbedElementStatic,\n    [BaseMentionPlugin.key]: MentionElementStatic,\n    [BaseParagraphPlugin.key]: ParagraphElementStatic,\n    [BaseStrikethroughPlugin.key]: withProps(SlateLeaf, { as: 'del' }),\n    [BaseSubscriptPlugin.key]: withProps(SlateLeaf, { as: 'sub' }),\n    [BaseSuperscriptPlugin.key]: withProps(SlateLeaf, { as: 'sup' }),\n    [BaseTableCellHeaderPlugin.key]: TableCellHeaderStaticElement,\n    [BaseTableCellPlugin.key]: TableCellElementStatic,\n    [BaseTablePlugin.key]: TableElementStatic,\n    [BaseTableRowPlugin.key]: TableRowElementStatic,\n    [BaseTocPlugin.key]: TocElementStatic,\n    [BaseTogglePlugin.key]: ToggleElementStatic,\n    [BaseUnderlinePlugin.key]: withProps(SlateLeaf, { as: 'u' }),\n    [BaseVideoPlugin.key]: MediaVideoElementStatic,\n    [HEADING_KEYS.h1]: withProps(HeadingElementStatic, { variant: 'h1' }),\n    [HEADING_KEYS.h2]: withProps(HeadingElementStatic, { variant: 'h2' }),\n    [HEADING_KEYS.h3]: withProps(HeadingElementStatic, { variant: 'h3' }),\n    [HEADING_KEYS.h4]: withProps(HeadingElementStatic, { variant: 'h4' }),\n    [HEADING_KEYS.h5]: withProps(HeadingElementStatic, { variant: 'h5' }),\n    [HEADING_KEYS.h6]: withProps(HeadingElementStatic, { variant: 'h6' }),\n  };\n\n  const createValue = (): Value => [\n    ...basicElementsValue,\n    ...basicMarksValue,\n    ...tocPlaygroundValue,\n    ...todoListValue,\n    ...linkValue,\n    ...horizontalRuleValue,\n    ...tableValue,\n    ...equationValue,\n    ...columnValue,\n    ...mentionValue,\n    ...dateValue,\n    ...fontValue,\n    ...highlightValue,\n    ...kbdValue,\n    ...commentsValue,\n    ...alignValue,\n    ...lineHeightValue,\n    ...indentValue,\n    ...indentListValue,\n    ...mediaValue,\n  ];\n\n  const editor = createSlateEditor({\n    plugins: [\n      BaseEquationPlugin,\n      BaseInlineEquationPlugin,\n      BaseColumnPlugin,\n      BaseColumnItemPlugin,\n      BaseTocPlugin,\n      BaseVideoPlugin,\n      BaseAudioPlugin,\n      BaseParagraphPlugin,\n      BaseHeadingPlugin,\n      BaseMediaEmbedPlugin,\n      BaseBoldPlugin,\n      BaseCodePlugin,\n      BaseItalicPlugin,\n      BaseStrikethroughPlugin,\n      BaseSubscriptPlugin,\n      BaseSuperscriptPlugin,\n      BaseUnderlinePlugin,\n      BaseBlockquotePlugin,\n      BaseDatePlugin,\n      BaseCodeBlockPlugin.configure({\n        options: {\n          lowlight,\n        },\n      }),\n      BaseIndentPlugin.extend({\n        inject: {\n          targetPlugins: [\n            BaseParagraphPlugin.key,\n            BaseBlockquotePlugin.key,\n            BaseCodeBlockPlugin.key,\n          ],\n        },\n      }),\n      BaseIndentListPlugin.extend({\n        inject: {\n          targetPlugins: [\n            BaseParagraphPlugin.key,\n            ...HEADING_LEVELS,\n            BaseBlockquotePlugin.key,\n            BaseCodeBlockPlugin.key,\n            BaseTogglePlugin.key,\n          ],\n        },\n        options: {\n          listStyleTypes: {\n            fire: {\n              liComponent: FireLiComponent,\n              markerComponent: FireMarker,\n              type: 'fire',\n            },\n            todo: {\n              liComponent: TodoLiStatic,\n              markerComponent: TodoMarkerStatic,\n              type: 'todo',\n            },\n          },\n        },\n      }),\n      BaseLinkPlugin,\n      BaseTableRowPlugin,\n      BaseTablePlugin,\n      BaseTableCellPlugin,\n      BaseHorizontalRulePlugin,\n      BaseFontColorPlugin,\n      BaseFontBackgroundColorPlugin,\n      BaseFontSizePlugin,\n      BaseKbdPlugin,\n      BaseAlignPlugin.extend({\n        inject: {\n          targetPlugins: [\n            BaseParagraphPlugin.key,\n            BaseMediaEmbedPlugin.key,\n            ...HEADING_LEVELS,\n            BaseImagePlugin.key,\n          ],\n        },\n      }),\n      BaseLineHeightPlugin,\n      BaseHighlightPlugin,\n      BaseFilePlugin,\n      BaseImagePlugin,\n      BaseMentionPlugin,\n      BaseCommentsPlugin,\n      BaseTogglePlugin,\n    ],\n    value: createValue(),\n  });\n\n  const tailwindCss = await getCachedTailwindCss();\n  const katexCDN = `<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.16.18/dist/katex.css\" integrity=\"sha384-9PvLvaiSKCPkFKB1ZsEoTjgnJn+O3KvEwtsz37/XrkYft3DTk2gHdYvd9oWgW3tV\" crossorigin=\"anonymous\">`;\n\n  // const cookieStore = await cookies();\n  // const theme = cookieStore.get('theme')?.value;\n  const theme = 'light';\n\n  // Get the editor content HTML using EditorStatic\n  const editorHtml = await serializeHtml(editor, {\n    components,\n    editorComponent: EditorStatic,\n    props: { style: { padding: '0 calc(50% - 350px)', paddingBottom: '' } },\n  });\n\n  // Create the full HTML document\n  const html = createHtmlDocument({\n    editorHtml,\n    katexCDN,\n    tailwindCss,\n    theme,\n  });\n\n  return (\n    <div className=\"grid grid-cols-3 px-4\">\n      <div className=\"p-2\">\n        <H3>Editor</H3>\n        <EditorClient value={createValue()} />\n      </div>\n\n      <div className=\"p-2\">\n        <H3>EditorStatic</H3>\n        <EditorStatic components={components} editor={editor} />\n      </div>\n\n      <div className=\"relative p-2\">\n        <H3>HTML Iframe</H3>\n        <ExportHtmlButton\n          className=\"absolute top-10 right-0\"\n          html={html}\n          serverTheme={theme}\n        />\n        <HtmlIframe\n          className=\"h-[7500px] w-full\"\n          html={html}\n          serverTheme={theme}\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/html/page.tsx"
    },
    {
      "path": "src/registry/components/editor/slate-to-html.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport { Plate } from '@udecode/plate/react';\nimport { useTheme } from 'next-themes';\n\nimport { Button } from '@/components/ui/button';\nimport { editorPlugins } from '@/registry/components/editor/plugins/editor-plugins';\nimport { useCreateEditor } from '@/registry/components/editor/use-create-editor';\nimport { Editor } from '@/registry/ui/editor';\n\nfunction useThemedHtml(html: string, serverTheme?: string) {\n  const { resolvedTheme } = useTheme();\n\n  const getThemedHtml = React.useCallback(() => {\n    if (typeof window === 'undefined') return html;\n    // Only parse and update if theme differs from server\n    if (serverTheme === resolvedTheme) return html;\n\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n    const htmlElement = doc.documentElement;\n\n    if (resolvedTheme === 'dark') {\n      htmlElement.classList.add('dark');\n    } else {\n      htmlElement.classList.remove('dark');\n    }\n\n    return doc.documentElement.outerHTML;\n  }, [html, resolvedTheme, serverTheme]);\n\n  return { getThemedHtml };\n}\n\nexport function ExportHtmlButton({\n  className,\n  html,\n  serverTheme,\n}: {\n  html: string;\n  className?: string;\n  serverTheme?: string;\n}) {\n  const { getThemedHtml } = useThemedHtml(html, serverTheme);\n  const [url, setUrl] = React.useState<string>();\n\n  React.useEffect(() => {\n    const updatedHtml = getThemedHtml();\n    const blob = new Blob([updatedHtml], { type: 'text/html' });\n    const blobUrl = URL.createObjectURL(blob);\n    setUrl(blobUrl);\n\n    return () => {\n      URL.revokeObjectURL(blobUrl);\n    };\n  }, [getThemedHtml]);\n\n  return (\n    <a\n      className={className}\n      download=\"export-plate.html\"\n      href={url}\n      rel=\"noopener noreferrer\"\n      role=\"button\"\n    >\n      <Button>Export HTML</Button>\n    </a>\n  );\n}\n\nexport function HtmlIframe({\n  html,\n  serverTheme,\n  ...props\n}: {\n  html: string;\n  serverTheme?: string;\n} & React.ComponentProps<'iframe'>) {\n  const { getThemedHtml } = useThemedHtml(html, serverTheme);\n  const [content, setContent] = React.useState(html);\n\n  React.useEffect(() => {\n    setContent(getThemedHtml());\n  }, [getThemedHtml]);\n\n  return <iframe title=\"Preview\" srcDoc={content} {...props} />;\n}\n\nexport function EditorClient({ value }: { value: any }) {\n  const editor = useCreateEditor({\n    plugins: editorPlugins.filter(\n      (p) => !['fixed-toolbar', 'floating-toolbar'].includes(p.key)\n    ),\n    value,\n  });\n\n  return (\n    <Plate readOnly editor={editor}>\n      <Editor variant=\"none\" />\n    </Plate>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/lib/create-html-document.ts",
      "content": "export function createHtmlDocument({\n  editorHtml,\n  katexCDN,\n  tailwindCss,\n  theme,\n}: {\n  editorHtml: string;\n  tailwindCss: string;\n  katexCDN?: string;\n  theme?: string;\n}): string {\n  return `<!DOCTYPE html>\n<html lang=\"en\"${theme === 'dark' ? ' class=\"dark\"' : ''}>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"color-scheme\" content=\"light dark\" />\n    <style>${tailwindCss}</style>\n    ${katexCDN}\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400..700&family=JetBrains+Mono:wght@400..700&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <style>\n      :root {\n        --font-sans: 'Inter', 'Inter Fallback';\n        --font-mono: 'JetBrains Mono', 'JetBrains Mono Fallback';\n      }\n    </style>\n  </head>\n  <body>\n    ${editorHtml}\n  </body>\n</html>`;\n}\n",
      "type": "registry:lib"
    }
  ],
  "meta": {
    "rsc": true
  },
  "categories": [
    "Serializers"
  ]
}