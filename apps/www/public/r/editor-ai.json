{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "editor-ai",
  "type": "registry:block",
  "description": "An AI editor",
  "dependencies": [
    "@udecode/cn",
    "@udecode/plate-ai",
    "@udecode/plate-basic-marks",
    "@udecode/plate-block-quote",
    "@udecode/plate-code-block",
    "@udecode/plate-comments",
    "@udecode/plate-callout",
    "@udecode/plate-suggestion",
    "@udecode/plate",
    "@udecode/plate-date",
    "@udecode/plate-emoji",
    "@emoji-mart/data@1.2.1",
    "@udecode/plate-excalidraw",
    "@udecode/plate-heading",
    "@udecode/plate-highlight",
    "@udecode/plate-horizontal-rule",
    "@udecode/plate-kbd",
    "@udecode/plate-layout",
    "@udecode/plate-link",
    "@udecode/plate-media",
    "@udecode/plate-mention",
    "@udecode/plate-slash-command",
    "@udecode/plate-table",
    "@udecode/plate-toggle",
    "sonner"
  ],
  "registryDependencies": [
    "https://platejs.org/r/plate-ui",
    "https://platejs.org/r/ai-api",
    "https://platejs.org/r/media-uploadthing-api",
    "https://platejs.org/r/plate-types",
    "https://platejs.org/r/editor-plugins",
    "https://platejs.org/r/copilot-plugins",
    "https://platejs.org/r/floating-toolbar-plugin",
    "https://platejs.org/r/fixed-toolbar-plugin",
    "https://platejs.org/r/ai-menu",
    "https://platejs.org/r/ghost-text",
    "https://platejs.org/r/block-discussion",
    "https://platejs.org/r/cursor-overlay",
    "https://platejs.org/r/editor",
    "https://platejs.org/r/block-context-menu",
    "https://platejs.org/r/ai-node",
    "https://platejs.org/r/blockquote-node",
    "https://platejs.org/r/block-draggable",
    "https://platejs.org/r/block-placeholder",
    "https://platejs.org/r/code-block-node",
    "https://platejs.org/r/code-node",
    "https://platejs.org/r/column-node",
    "https://platejs.org/r/comment-node",
    "https://platejs.org/r/callout-node",
    "https://platejs.org/r/suggestion-node",
    "https://platejs.org/r/date-node",
    "https://platejs.org/r/equation-node",
    "https://platejs.org/r/emoji-input-node",
    "https://platejs.org/r/excalidraw-node",
    "https://platejs.org/r/heading-node",
    "https://platejs.org/r/highlight-node",
    "https://platejs.org/r/hr-node",
    "https://platejs.org/r/kbd-node",
    "https://platejs.org/r/link-node",
    "https://platejs.org/r/media-audio-node",
    "https://platejs.org/r/media-embed-node",
    "https://platejs.org/r/media-image-node",
    "https://platejs.org/r/media-file-node",
    "https://platejs.org/r/media-placeholder-node",
    "https://platejs.org/r/media-video-node",
    "https://platejs.org/r/mention-node",
    "https://platejs.org/r/mention-input-node",
    "https://platejs.org/r/paragraph-node",
    "https://platejs.org/r/slash-input-node",
    "https://platejs.org/r/table-node",
    "https://platejs.org/r/toc-node",
    "https://platejs.org/r/toggle-node"
  ],
  "files": [
    {
      "path": "src/registry/blocks/editor-ai/page.tsx",
      "content": "import { Toaster } from 'sonner';\n\nimport { PlateEditor } from '@/registry/blocks/editor-ai/components/editor/plate-editor';\nimport { SettingsProvider } from '@/registry/components/editor/settings';\n\nexport default function Page() {\n  return (\n    <div className=\"h-screen w-full\" data-registry=\"plate\">\n      <SettingsProvider>\n        <PlateEditor />\n      </SettingsProvider>\n\n      <Toaster />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/editor/page.tsx"
    },
    {
      "path": "src/registry/blocks/editor-ai/components/editor/plate-editor.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { Plate } from '@udecode/plate/react';\n\nimport { useCreateEditor } from '@/registry/blocks/editor-ai/components/editor/use-create-editor';\nimport { SettingsDialog } from '@/registry/components/editor/settings';\nimport { Editor, EditorContainer } from '@/registry/ui/editor';\n\nexport function PlateEditor() {\n  const editor = useCreateEditor();\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Plate editor={editor}>\n        <EditorContainer>\n          <Editor variant=\"demo\" />\n        </EditorContainer>\n\n        <SettingsDialog />\n      </Plate>\n    </DndProvider>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/blocks/editor-ai/components/editor/use-create-editor.ts",
      "content": "'use client';\n\nimport type { Value } from '@udecode/plate';\n\nimport { withProps } from '@udecode/cn';\nimport { AIPlugin } from '@udecode/plate-ai/react';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  SubscriptPlugin,\n  SuperscriptPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { CalloutPlugin } from '@udecode/plate-callout/react';\nimport {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n  CodeSyntaxPlugin,\n} from '@udecode/plate-code-block/react';\nimport { CommentsPlugin } from '@udecode/plate-comments/react';\nimport { DatePlugin } from '@udecode/plate-date/react';\nimport { EmojiInputPlugin } from '@udecode/plate-emoji/react';\nimport { ExcalidrawPlugin } from '@udecode/plate-excalidraw/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { TocPlugin } from '@udecode/plate-heading/react';\nimport { HighlightPlugin } from '@udecode/plate-highlight/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport { KbdPlugin } from '@udecode/plate-kbd/react';\nimport { ColumnItemPlugin, ColumnPlugin } from '@udecode/plate-layout/react';\nimport { LinkPlugin } from '@udecode/plate-link/react';\nimport {\n  EquationPlugin,\n  InlineEquationPlugin,\n} from '@udecode/plate-math/react';\nimport {\n  AudioPlugin,\n  FilePlugin,\n  ImagePlugin,\n  MediaEmbedPlugin,\n  PlaceholderPlugin,\n  VideoPlugin,\n} from '@udecode/plate-media/react';\nimport {\n  MentionInputPlugin,\n  MentionPlugin,\n} from '@udecode/plate-mention/react';\nimport { SlashInputPlugin } from '@udecode/plate-slash-command/react';\nimport { SuggestionPlugin } from '@udecode/plate-suggestion/react';\nimport {\n  TableCellHeaderPlugin,\n  TableCellPlugin,\n  TablePlugin,\n  TableRowPlugin,\n} from '@udecode/plate-table/react';\nimport { TogglePlugin } from '@udecode/plate-toggle/react';\nimport {\n  type CreatePlateEditorOptions,\n  ParagraphPlugin,\n  PlateLeaf,\n  usePlateEditor,\n} from '@udecode/plate/react';\n\nimport { copilotPlugins } from '@/registry/components/editor/plugins/copilot-plugins';\nimport { editorPlugins } from '@/registry/components/editor/plugins/editor-plugins';\nimport { FixedToolbarPlugin } from '@/registry/components/editor/plugins/fixed-toolbar-plugin';\nimport { FloatingToolbarPlugin } from '@/registry/components/editor/plugins/floating-toolbar-plugin';\nimport { AILeaf } from '@/registry/ui/ai-node';\nimport { withPlaceholders } from '@/registry/ui/block-placeholder';\nimport { BlockquoteElement } from '@/registry/ui/blockquote-node';\nimport { CalloutElement } from '@/registry/ui/callout-node';\nimport {\n  CodeBlockElement,\n  CodeLineElement,\n  CodeSyntaxLeaf,\n} from '@/registry/ui/code-block-node';\nimport { CodeLeaf } from '@/registry/ui/code-node';\nimport { ColumnElement, ColumnGroupElement } from '@/registry/ui/column-node';\nimport { CommentLeaf } from '@/registry/ui/comment-node';\nimport { DateElement } from '@/registry/ui/date-node';\nimport { EmojiInputElement } from '@/registry/ui/emoji-input-node';\nimport {\n  EquationElement,\n  InlineEquationElement,\n} from '@/registry/ui/equation-node';\nimport { ExcalidrawElement } from '@/registry/ui/excalidraw-node';\nimport { HeadingElement } from '@/registry/ui/heading-node';\nimport { HighlightLeaf } from '@/registry/ui/highlight-node';\nimport { HrElement } from '@/registry/ui/hr-node';\nimport { KbdLeaf } from '@/registry/ui/kbd-node';\nimport { LinkElement } from '@/registry/ui/link-node';\nimport { AudioElement } from '@/registry/ui/media-audio-node';\nimport { MediaEmbedElement } from '@/registry/ui/media-embed-node';\nimport { FileElement } from '@/registry/ui/media-file-node';\nimport { ImageElement } from '@/registry/ui/media-image-node';\nimport { MediaPlaceholderElement } from '@/registry/ui/media-placeholder-node';\nimport { VideoElement } from '@/registry/ui/media-video-node';\nimport { MentionInputElement } from '@/registry/ui/mention-input-node';\nimport { MentionElement } from '@/registry/ui/mention-node';\nimport { ParagraphElement } from '@/registry/ui/paragraph-node';\nimport { SlashInputElement } from '@/registry/ui/slash-input-node';\nimport { SuggestionLeaf } from '@/registry/ui/suggestion-node';\nimport {\n  TableCellElement,\n  TableCellHeaderElement,\n  TableElement,\n  TableRowElement,\n} from '@/registry/ui/table-node';\nimport { TocElement } from '@/registry/ui/toc-node';\nimport { ToggleElement } from '@/registry/ui/toggle-node';\n\nexport const viewComponents = {\n  [AudioPlugin.key]: AudioElement,\n  [BlockquotePlugin.key]: BlockquoteElement,\n  [BoldPlugin.key]: withProps(PlateLeaf, { as: 'strong' }),\n  [CalloutPlugin.key]: CalloutElement,\n  [CodeBlockPlugin.key]: CodeBlockElement,\n  [CodeLinePlugin.key]: CodeLineElement,\n  [CodePlugin.key]: CodeLeaf,\n  [CodeSyntaxPlugin.key]: CodeSyntaxLeaf,\n  [ColumnItemPlugin.key]: ColumnElement,\n  [ColumnPlugin.key]: ColumnGroupElement,\n  [CommentsPlugin.key]: CommentLeaf,\n  [DatePlugin.key]: DateElement,\n  [EquationPlugin.key]: EquationElement,\n  [ExcalidrawPlugin.key]: ExcalidrawElement,\n  [FilePlugin.key]: FileElement,\n  [HEADING_KEYS.h1]: withProps(HeadingElement, { variant: 'h1' }),\n  [HEADING_KEYS.h2]: withProps(HeadingElement, { variant: 'h2' }),\n  [HEADING_KEYS.h3]: withProps(HeadingElement, { variant: 'h3' }),\n  [HEADING_KEYS.h4]: withProps(HeadingElement, { variant: 'h4' }),\n  [HEADING_KEYS.h5]: withProps(HeadingElement, { variant: 'h5' }),\n  [HEADING_KEYS.h6]: withProps(HeadingElement, { variant: 'h6' }),\n  [HighlightPlugin.key]: HighlightLeaf,\n  [HorizontalRulePlugin.key]: HrElement,\n  [ImagePlugin.key]: ImageElement,\n  [InlineEquationPlugin.key]: InlineEquationElement,\n  [ItalicPlugin.key]: withProps(PlateLeaf, { as: 'em' }),\n  [KbdPlugin.key]: KbdLeaf,\n  [LinkPlugin.key]: LinkElement,\n  [MediaEmbedPlugin.key]: MediaEmbedElement,\n  [MentionPlugin.key]: MentionElement,\n  [ParagraphPlugin.key]: ParagraphElement,\n  [PlaceholderPlugin.key]: MediaPlaceholderElement,\n  [StrikethroughPlugin.key]: withProps(PlateLeaf, { as: 's' }),\n  [SubscriptPlugin.key]: withProps(PlateLeaf, { as: 'sub' }),\n  [SuggestionPlugin.key]: SuggestionLeaf,\n  [SuperscriptPlugin.key]: withProps(PlateLeaf, { as: 'sup' }),\n  [TableCellHeaderPlugin.key]: TableCellHeaderElement,\n  [TableCellPlugin.key]: TableCellElement,\n  [TablePlugin.key]: TableElement,\n  [TableRowPlugin.key]: TableRowElement,\n  [TocPlugin.key]: TocElement,\n  [TogglePlugin.key]: ToggleElement,\n  [UnderlinePlugin.key]: withProps(PlateLeaf, { as: 'u' }),\n  [VideoPlugin.key]: VideoElement,\n};\n\nexport const editorComponents = {\n  ...viewComponents,\n  [AIPlugin.key]: AILeaf,\n  [EmojiInputPlugin.key]: EmojiInputElement,\n  [MentionInputPlugin.key]: MentionInputElement,\n  [SlashInputPlugin.key]: SlashInputElement,\n};\n\nexport const useCreateEditor = (\n  {\n    components,\n    override,\n    placeholders,\n    readOnly,\n    ...options\n  }: {\n    components?: Record<string, any>;\n    placeholders?: boolean;\n    plugins?: any[];\n    readOnly?: boolean;\n  } & Omit<CreatePlateEditorOptions, 'plugins'> = {},\n  deps: any[] = []\n) => {\n  return usePlateEditor<Value, (typeof editorPlugins)[number]>(\n    {\n      override: {\n        components: {\n          ...(readOnly\n            ? viewComponents\n            : placeholders\n              ? withPlaceholders(editorComponents)\n              : editorComponents),\n          ...components,\n        },\n        ...override,\n      },\n      plugins: [\n        ...copilotPlugins,\n        ...editorPlugins,\n        FixedToolbarPlugin,\n        FloatingToolbarPlugin,\n      ],\n      value: [\n        {\n          children: [{ text: 'Playground' }],\n          type: 'h1',\n        },\n        {\n          children: [\n            { text: 'A rich-text editor with AI capabilities. Try the ' },\n            { bold: true, text: 'AI commands' },\n            { text: ' or use ' },\n            { kbd: true, text: 'Cmd+J' },\n            { text: ' to open the AI menu.' },\n          ],\n          type: ParagraphPlugin.key,\n        },\n      ],\n      ...options,\n    },\n    deps\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/components/editor/settings.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport { CopilotPlugin } from '@udecode/plate-ai/react';\nimport { useEditorPlugin } from '@udecode/plate/react';\nimport {\n  Check,\n  ChevronsUpDown,\n  ExternalLinkIcon,\n  Eye,\n  EyeOff,\n  Settings,\n  Wand2Icon,\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\n\ninterface Model {\n  label: string;\n  value: string;\n}\n\ninterface SettingsContextType {\n  keys: Record<string, string>;\n  model: Model;\n  setKey: (service: string, key: string) => void;\n  setModel: (model: Model) => void;\n}\n\nexport const models: Model[] = [\n  { label: 'gpt-4o-mini', value: 'gpt-4o-mini' },\n  { label: 'gpt-4o', value: 'gpt-4o' },\n  { label: 'gpt-4-turbo', value: 'gpt-4-turbo' },\n  { label: 'gpt-4', value: 'gpt-4' },\n  { label: 'gpt-3.5-turbo', value: 'gpt-3.5-turbo' },\n  { label: 'gpt-3.5-turbo-instruct', value: 'gpt-3.5-turbo-instruct' },\n];\n\nconst SettingsContext = React.createContext<SettingsContextType | undefined>(\n  undefined\n);\n\nexport function SettingsProvider({ children }: { children: React.ReactNode }) {\n  const [keys, setKeys] = React.useState({\n    openai: '',\n    uploadthing: '',\n  });\n  const [model, setModel] = React.useState<Model>(models[0]);\n\n  const setKey = (service: string, key: string) => {\n    setKeys((prev) => ({ ...prev, [service]: key }));\n  };\n\n  return (\n    <SettingsContext.Provider value={{ keys, model, setKey, setModel }}>\n      {children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport function useSettings() {\n  const context = React.useContext(SettingsContext);\n\n  return (\n    context ?? {\n      keys: {\n        openai: '',\n        uploadthing: '',\n      },\n      model: models[0],\n      setKey: () => {},\n      setModel: () => {},\n    }\n  );\n}\n\nexport function SettingsDialog() {\n  const { keys, model, setKey, setModel } = useSettings();\n  const [tempKeys, setTempKeys] = React.useState(keys);\n  const [showKey, setShowKey] = React.useState<Record<string, boolean>>({});\n  const [open, setOpen] = React.useState(false);\n  const [openModel, setOpenModel] = React.useState(false);\n\n  const { getOptions, setOption } = useEditorPlugin(CopilotPlugin);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    Object.entries(tempKeys).forEach(([service, key]) => {\n      setKey(service, key);\n    });\n    setOpen(false);\n\n    // Update AI options if needed\n    const completeOptions = getOptions().completeOptions ?? {};\n    setOption('completeOptions', {\n      ...completeOptions,\n      body: {\n        ...completeOptions.body,\n        apiKey: tempKeys.openai,\n        model: model.value,\n      },\n    });\n  };\n\n  const toggleKeyVisibility = (key: string) => {\n    setShowKey((prev) => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  const renderApiKeyInput = (service: string, label: string) => (\n    <div className=\"group relative\">\n      <div className=\"flex items-center justify-between\">\n        <label\n          className=\"absolute top-1/2 block -translate-y-1/2 cursor-text px-1 text-sm text-muted-foreground/70 transition-all group-focus-within:pointer-events-none group-focus-within:top-0 group-focus-within:cursor-default group-focus-within:text-xs group-focus-within:font-medium group-focus-within:text-foreground has-[+input:not(:placeholder-shown)]:pointer-events-none has-[+input:not(:placeholder-shown)]:top-0 has-[+input:not(:placeholder-shown)]:cursor-default has-[+input:not(:placeholder-shown)]:text-xs has-[+input:not(:placeholder-shown)]:font-medium has-[+input:not(:placeholder-shown)]:text-foreground\"\n          htmlFor={label}\n        >\n          <span className=\"inline-flex bg-background px-2\">{label}</span>\n        </label>\n        <Button\n          asChild\n          size=\"icon\"\n          variant=\"ghost\"\n          className=\"absolute top-0 right-[28px] h-full\"\n        >\n          <a\n            className=\"flex items-center\"\n            href={\n              service === 'openai'\n                ? 'https://platform.openai.com/api-keys'\n                : 'https://uploadthing.com/dashboard'\n            }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            <ExternalLinkIcon className=\"size-4\" />\n            <span className=\"sr-only\">Get {label}</span>\n          </a>\n        </Button>\n      </div>\n\n      <Input\n        id={label}\n        className=\"pr-10\"\n        value={tempKeys[service]}\n        onChange={(e) =>\n          setTempKeys((prev) => ({ ...prev, [service]: e.target.value }))\n        }\n        placeholder=\"\"\n        data-1p-ignore\n        type={showKey[service] ? 'text' : 'password'}\n      />\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        className=\"absolute top-0 right-0 h-full\"\n        onClick={() => toggleKeyVisibility(service)}\n        type=\"button\"\n      >\n        {showKey[service] ? (\n          <EyeOff className=\"size-4\" />\n        ) : (\n          <Eye className=\"size-4\" />\n        )}\n        <span className=\"sr-only\">\n          {showKey[service] ? 'Hide' : 'Show'} {label}\n        </span>\n      </Button>\n    </div>\n  );\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button\n          size=\"icon\"\n          variant=\"default\"\n          className={cn(\n            'group fixed right-4 bottom-4 z-50 size-10 overflow-hidden',\n            'rounded-full shadow-md hover:shadow-lg'\n          )}\n          data-block-hide\n        >\n          <Settings className=\"size-4\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle className=\"text-xl\">Settings</DialogTitle>\n          <DialogDescription>\n            Configure your API keys and preferences.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form className=\"space-y-10\" onSubmit={handleSubmit}>\n          {/* AI Settings Group */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"size-8 rounded-full bg-purple-100 p-2 dark:bg-purple-900\">\n                <Wand2Icon className=\"size-4 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <h4 className=\"font-semibold\">AI</h4>\n            </div>\n\n            <div className=\"space-y-4\">\n              {renderApiKeyInput('openai', 'OpenAI API key')}\n\n              <div className=\"group relative\">\n                <label\n                  className=\"absolute start-1 top-0 z-10 block -translate-y-1/2 bg-background px-2 text-xs font-medium text-foreground group-has-disabled:opacity-50\"\n                  htmlFor=\"select-model\"\n                >\n                  Model\n                </label>\n                <Popover open={openModel} onOpenChange={setOpenModel}>\n                  <PopoverTrigger id=\"select-model\" asChild>\n                    <Button\n                      size=\"lg\"\n                      variant=\"outline\"\n                      className=\"w-full justify-between\"\n                      aria-expanded={openModel}\n                      role=\"combobox\"\n                    >\n                      <code>{model.label}</code>\n                      <ChevronsUpDown className=\"ml-2 size-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-full p-0\">\n                    <Command>\n                      <CommandInput placeholder=\"Search model...\" />\n                      <CommandEmpty>No model found.</CommandEmpty>\n                      <CommandList>\n                        <CommandGroup>\n                          {models.map((m) => (\n                            <CommandItem\n                              key={m.value}\n                              value={m.value}\n                              onSelect={() => {\n                                setModel(m);\n                                setOpenModel(false);\n                              }}\n                            >\n                              <Check\n                                className={cn(\n                                  'mr-2 size-4',\n                                  model.value === m.value\n                                    ? 'opacity-100'\n                                    : 'opacity-0'\n                                )}\n                              />\n                              <code>{m.label}</code>\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </Popover>\n              </div>\n            </div>\n          </div>\n\n          {/* Upload Settings Group */}\n          {/* <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"size-8 rounded-full bg-red-100 p-2 dark:bg-red-900\">\n                <Upload className=\"size-4 text-red-600 dark:text-red-400\" />\n              </div>\n              <h4 className=\"font-semibold\">Upload</h4>\n            </div>\n\n            <div className=\"space-y-4\">\n              {renderApiKeyInput('uploadthing', 'Uploadthing API key')}\n            </div>\n          </div> */}\n\n          <Button size=\"lg\" className=\"w-full\" type=\"submit\">\n            Save changes\n          </Button>\n        </form>\n\n        <p className=\"text-sm text-muted-foreground\">\n          Not stored anywhere. Used only for current session requests.\n        </p>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "Editors"
  ]
}