{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "editor-ai",
  "type": "registry:block",
  "description": "An AI editor",
  "dependencies": [
    "@udecode/cn",
    "@udecode/plate-ai",
    "@udecode/plate-basic-marks",
    "@udecode/plate-block-quote",
    "@udecode/plate-code-block",
    "@udecode/plate-comments",
    "@udecode/plate-callout",
    "@udecode/plate-suggestion",
    "@udecode/plate",
    "@udecode/plate-date",
    "@udecode/plate-emoji",
    "@emoji-mart/data@1.2.1",
    "@udecode/plate-excalidraw",
    "@udecode/plate-heading",
    "@udecode/plate-highlight",
    "@udecode/plate-horizontal-rule",
    "@udecode/plate-kbd",
    "@udecode/plate-layout",
    "@udecode/plate-link",
    "@udecode/plate-media",
    "@udecode/plate-mention",
    "@udecode/plate-slash-command",
    "@udecode/plate-table",
    "@udecode/plate-toggle",
    "sonner"
  ],
  "registryDependencies": [
    "https://platejs.org/r/plate-ui",
    "https://platejs.org/r/copilot-kit",
    "https://platejs.org/r/media-uploadthing-api",
    "https://platejs.org/r/plate-types",
    "https://platejs.org/r/editor",
    "https://platejs.org/r/ai-kit",
    "https://platejs.org/r/align-kit",
    "https://platejs.org/r/autoformat-kit",
    "https://platejs.org/r/basic-nodes-kit",
    "https://platejs.org/r/block-menu-kit",
    "https://platejs.org/r/callout-kit",
    "https://platejs.org/r/column-kit",
    "https://platejs.org/r/comment-kit",
    "https://platejs.org/r/cursor-overlay-kit",
    "https://platejs.org/r/date-kit",
    "https://platejs.org/r/dnd-kit",
    "https://platejs.org/r/docx-kit",
    "https://platejs.org/r/editing-kit",
    "https://platejs.org/r/emoji-kit",
    "https://platejs.org/r/fixed-toolbar-kit",
    "https://platejs.org/r/floating-toolbar-kit",
    "https://platejs.org/r/font-kit",
    "https://platejs.org/r/highlight-kit",
    "https://platejs.org/r/hr-kit",
    "https://platejs.org/r/kbd-kit",
    "https://platejs.org/r/line-height-kit",
    "https://platejs.org/r/link-kit",
    "https://platejs.org/r/list-kit",
    "https://platejs.org/r/markdown-kit",
    "https://platejs.org/r/math-kit",
    "https://platejs.org/r/media-kit",
    "https://platejs.org/r/mention-kit",
    "https://platejs.org/r/slash-kit",
    "https://platejs.org/r/suggestion-kit",
    "https://platejs.org/r/table-kit",
    "https://platejs.org/r/toc-kit",
    "https://platejs.org/r/toggle-kit"
  ],
  "files": [
    {
      "path": "src/registry/blocks/editor-ai/page.tsx",
      "content": "import { Toaster } from 'sonner';\n\nimport { PlateEditor } from '@/registry/components/editor/plate-editor-ai';\nimport { SettingsProvider } from '@/registry/components/editor/settings';\n\nexport default function Page() {\n  return (\n    <div className=\"h-screen w-full\" data-registry=\"plate\">\n      <SettingsProvider>\n        <PlateEditor />\n      </SettingsProvider>\n\n      <Toaster />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/editor/page.tsx"
    },
    {
      "path": "src/registry/components/editor/plate-editor-ai.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { Plate, usePlateEditor } from '@udecode/plate/react';\n\nimport { EditorKit } from '@/registry/components/editor/editor-kit-ai';\nimport { SettingsDialog } from '@/registry/components/editor/settings';\nimport { Editor, EditorContainer } from '@/registry/ui/editor';\n\nexport function PlateEditor() {\n  const editor = usePlateEditor({\n    plugins: EditorKit,\n  });\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Plate editor={editor}>\n        <EditorContainer>\n          <Editor variant=\"demo\" />\n        </EditorContainer>\n\n        <SettingsDialog />\n      </Plate>\n    </DndProvider>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/editor/plate-editor.tsx"
    },
    {
      "path": "src/registry/components/editor/editor-kit-ai.tsx",
      "content": "'use client';\n\nimport type { Value } from '@udecode/plate';\n\nimport { type TPlateEditor, useEditorRef } from '@udecode/plate/react';\n\nimport { AIKit } from '@/registry/components/editor/plugins/ai-kit';\nimport { AlignKit } from '@/registry/components/editor/plugins/align-kit';\nimport { AutoformatKit } from '@/registry/components/editor/plugins/autoformat-kit';\nimport { BasicElementsKit } from '@/registry/components/editor/plugins/basic-elements-kit';\nimport { BasicMarksKit } from '@/registry/components/editor/plugins/basic-marks-kit';\nimport { BlockMenuKit } from '@/registry/components/editor/plugins/block-menu-kit';\nimport { BlockPlaceholderKit } from '@/registry/components/editor/plugins/block-placeholder-kit';\nimport { CalloutKit } from '@/registry/components/editor/plugins/callout-kit';\nimport { ColumnKit } from '@/registry/components/editor/plugins/column-kit';\nimport { CommentKit } from '@/registry/components/editor/plugins/comment-kit';\nimport { CopilotKit } from '@/registry/components/editor/plugins/copilot-kit';\nimport { CursorOverlayKit } from '@/registry/components/editor/plugins/cursor-overlay-kit';\nimport { DateKit } from '@/registry/components/editor/plugins/date-kit';\nimport { DiscussionKit } from '@/registry/components/editor/plugins/discussion-kit';\nimport { DndKit } from '@/registry/components/editor/plugins/dnd-kit';\nimport { DocxKit } from '@/registry/components/editor/plugins/docx-kit';\nimport { EditingKit } from '@/registry/components/editor/plugins/editing-kit';\nimport { EmojiKit } from '@/registry/components/editor/plugins/emoji-kit';\nimport { FixedToolbarKit } from '@/registry/components/editor/plugins/fixed-toolbar-kit';\nimport { FloatingToolbarKit } from '@/registry/components/editor/plugins/floating-toolbar-kit';\nimport { FontKit } from '@/registry/components/editor/plugins/font-kit';\nimport { HighlightKit } from '@/registry/components/editor/plugins/highlight-kit';\nimport { HorizontalRuleKit } from '@/registry/components/editor/plugins/hr-kit';\nimport { KbdKit } from '@/registry/components/editor/plugins/kbd-kit';\nimport { LineHeightKit } from '@/registry/components/editor/plugins/line-height-kit';\nimport { LinkKit } from '@/registry/components/editor/plugins/link-kit';\nimport { ListKit } from '@/registry/components/editor/plugins/list-kit';\nimport { MarkdownKit } from '@/registry/components/editor/plugins/markdown-kit';\nimport { MathKit } from '@/registry/components/editor/plugins/math-kit';\nimport { MediaKit } from '@/registry/components/editor/plugins/media-kit';\nimport { MentionKit } from '@/registry/components/editor/plugins/mention-kit';\nimport { SlashKit } from '@/registry/components/editor/plugins/slash-kit';\nimport { SuggestionKit } from '@/registry/components/editor/plugins/suggestion-kit';\nimport { TableKit } from '@/registry/components/editor/plugins/table-kit';\nimport { TocKit } from '@/registry/components/editor/plugins/toc-kit';\nimport { ToggleKit } from '@/registry/components/editor/plugins/toggle-kit';\n\nexport const EditorKit = [\n  ...CopilotKit,\n  ...AIKit,\n\n  // Elements\n  ...BasicElementsKit,\n  ...HorizontalRuleKit,\n  ...TableKit,\n  ...ToggleKit,\n  ...TocKit,\n  ...MediaKit,\n  ...CalloutKit,\n  ...ColumnKit,\n  ...MathKit,\n  ...DateKit,\n  ...LinkKit,\n  ...MentionKit,\n\n  // Marks\n  ...BasicMarksKit,\n  ...FontKit,\n  ...HighlightKit,\n  ...KbdKit,\n\n  // Block Style\n  ...ListKit,\n  ...AlignKit,\n  ...LineHeightKit,\n\n  // Collaboration\n  ...DiscussionKit,\n  ...CommentKit,\n  ...SuggestionKit,\n\n  // Editing\n  ...SlashKit,\n  ...AutoformatKit,\n  ...CursorOverlayKit,\n  ...BlockMenuKit,\n  ...DndKit,\n  ...EmojiKit,\n  ...EditingKit,\n\n  // Parsers\n  ...DocxKit,\n  ...MarkdownKit,\n\n  // UI\n  ...BlockPlaceholderKit,\n  ...FixedToolbarKit,\n  ...FloatingToolbarKit,\n];\n\nexport type MyEditor = TPlateEditor<Value, (typeof EditorKit)[number]>;\n\nexport const useEditor = () => useEditorRef<MyEditor>();\n",
      "type": "registry:component",
      "target": "components/editor/editor-kit.tsx"
    },
    {
      "path": "src/registry/components/editor/settings.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport { CopilotPlugin } from '@udecode/plate-ai/react';\nimport { useEditorPlugin } from '@udecode/plate/react';\nimport {\n  Check,\n  ChevronsUpDown,\n  ExternalLinkIcon,\n  Eye,\n  EyeOff,\n  Settings,\n  Wand2Icon,\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\n\ninterface Model {\n  label: string;\n  value: string;\n}\n\ninterface SettingsContextType {\n  keys: Record<string, string>;\n  model: Model;\n  setKey: (service: string, key: string) => void;\n  setModel: (model: Model) => void;\n}\n\nexport const models: Model[] = [\n  { label: 'gpt-4o-mini', value: 'gpt-4o-mini' },\n  { label: 'gpt-4o', value: 'gpt-4o' },\n  { label: 'gpt-4-turbo', value: 'gpt-4-turbo' },\n  { label: 'gpt-4', value: 'gpt-4' },\n  { label: 'gpt-3.5-turbo', value: 'gpt-3.5-turbo' },\n  { label: 'gpt-3.5-turbo-instruct', value: 'gpt-3.5-turbo-instruct' },\n];\n\nconst SettingsContext = React.createContext<SettingsContextType | undefined>(\n  undefined\n);\n\nexport function SettingsProvider({ children }: { children: React.ReactNode }) {\n  const [keys, setKeys] = React.useState({\n    openai: '',\n    uploadthing: '',\n  });\n  const [model, setModel] = React.useState<Model>(models[0]);\n\n  const setKey = (service: string, key: string) => {\n    setKeys((prev) => ({ ...prev, [service]: key }));\n  };\n\n  return (\n    <SettingsContext.Provider value={{ keys, model, setKey, setModel }}>\n      {children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport function useSettings() {\n  const context = React.useContext(SettingsContext);\n\n  return (\n    context ?? {\n      keys: {\n        openai: '',\n        uploadthing: '',\n      },\n      model: models[0],\n      setKey: () => {},\n      setModel: () => {},\n    }\n  );\n}\n\nexport function SettingsDialog() {\n  const { keys, model, setKey, setModel } = useSettings();\n  const [tempKeys, setTempKeys] = React.useState(keys);\n  const [showKey, setShowKey] = React.useState<Record<string, boolean>>({});\n  const [open, setOpen] = React.useState(false);\n  const [openModel, setOpenModel] = React.useState(false);\n\n  const { getOptions, setOption } = useEditorPlugin(CopilotPlugin);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    Object.entries(tempKeys).forEach(([service, key]) => {\n      setKey(service, key);\n    });\n    setOpen(false);\n\n    // Update AI options if needed\n    const completeOptions = getOptions().completeOptions ?? {};\n    setOption('completeOptions', {\n      ...completeOptions,\n      body: {\n        ...completeOptions.body,\n        apiKey: tempKeys.openai,\n        model: model.value,\n      },\n    });\n  };\n\n  const toggleKeyVisibility = (key: string) => {\n    setShowKey((prev) => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  const renderApiKeyInput = (service: string, label: string) => (\n    <div className=\"group relative\">\n      <div className=\"flex items-center justify-between\">\n        <label\n          className=\"absolute top-1/2 block -translate-y-1/2 cursor-text px-1 text-sm text-muted-foreground/70 transition-all group-focus-within:pointer-events-none group-focus-within:top-0 group-focus-within:cursor-default group-focus-within:text-xs group-focus-within:font-medium group-focus-within:text-foreground has-[+input:not(:placeholder-shown)]:pointer-events-none has-[+input:not(:placeholder-shown)]:top-0 has-[+input:not(:placeholder-shown)]:cursor-default has-[+input:not(:placeholder-shown)]:text-xs has-[+input:not(:placeholder-shown)]:font-medium has-[+input:not(:placeholder-shown)]:text-foreground\"\n          htmlFor={label}\n        >\n          <span className=\"inline-flex bg-background px-2\">{label}</span>\n        </label>\n        <Button\n          asChild\n          size=\"icon\"\n          variant=\"ghost\"\n          className=\"absolute top-0 right-[28px] h-full\"\n        >\n          <a\n            className=\"flex items-center\"\n            href={\n              service === 'openai'\n                ? 'https://platform.openai.com/api-keys'\n                : 'https://uploadthing.com/dashboard'\n            }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            <ExternalLinkIcon className=\"size-4\" />\n            <span className=\"sr-only\">Get {label}</span>\n          </a>\n        </Button>\n      </div>\n\n      <Input\n        id={label}\n        className=\"pr-10\"\n        value={tempKeys[service]}\n        onChange={(e) =>\n          setTempKeys((prev) => ({ ...prev, [service]: e.target.value }))\n        }\n        placeholder=\"\"\n        data-1p-ignore\n        type={showKey[service] ? 'text' : 'password'}\n      />\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        className=\"absolute top-0 right-0 h-full\"\n        onClick={() => toggleKeyVisibility(service)}\n        type=\"button\"\n      >\n        {showKey[service] ? (\n          <EyeOff className=\"size-4\" />\n        ) : (\n          <Eye className=\"size-4\" />\n        )}\n        <span className=\"sr-only\">\n          {showKey[service] ? 'Hide' : 'Show'} {label}\n        </span>\n      </Button>\n    </div>\n  );\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button\n          size=\"icon\"\n          variant=\"default\"\n          className={cn(\n            'group fixed right-4 bottom-4 z-50 size-10 overflow-hidden',\n            'rounded-full shadow-md hover:shadow-lg'\n          )}\n          data-block-hide\n        >\n          <Settings className=\"size-4\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle className=\"text-xl\">Settings</DialogTitle>\n          <DialogDescription>\n            Configure your API keys and preferences.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form className=\"space-y-10\" onSubmit={handleSubmit}>\n          {/* AI Settings Group */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"size-8 rounded-full bg-purple-100 p-2 dark:bg-purple-900\">\n                <Wand2Icon className=\"size-4 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <h4 className=\"font-semibold\">AI</h4>\n            </div>\n\n            <div className=\"space-y-4\">\n              {renderApiKeyInput('openai', 'OpenAI API key')}\n\n              <div className=\"group relative\">\n                <label\n                  className=\"absolute start-1 top-0 z-10 block -translate-y-1/2 bg-background px-2 text-xs font-medium text-foreground group-has-disabled:opacity-50\"\n                  htmlFor=\"select-model\"\n                >\n                  Model\n                </label>\n                <Popover open={openModel} onOpenChange={setOpenModel}>\n                  <PopoverTrigger id=\"select-model\" asChild>\n                    <Button\n                      size=\"lg\"\n                      variant=\"outline\"\n                      className=\"w-full justify-between\"\n                      aria-expanded={openModel}\n                      role=\"combobox\"\n                    >\n                      <code>{model.label}</code>\n                      <ChevronsUpDown className=\"ml-2 size-4 shrink-0 opacity-50\" />\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-full p-0\">\n                    <Command>\n                      <CommandInput placeholder=\"Search model...\" />\n                      <CommandEmpty>No model found.</CommandEmpty>\n                      <CommandList>\n                        <CommandGroup>\n                          {models.map((m) => (\n                            <CommandItem\n                              key={m.value}\n                              value={m.value}\n                              onSelect={() => {\n                                setModel(m);\n                                setOpenModel(false);\n                              }}\n                            >\n                              <Check\n                                className={cn(\n                                  'mr-2 size-4',\n                                  model.value === m.value\n                                    ? 'opacity-100'\n                                    : 'opacity-0'\n                                )}\n                              />\n                              <code>{m.label}</code>\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      </CommandList>\n                    </Command>\n                  </PopoverContent>\n                </Popover>\n              </div>\n            </div>\n          </div>\n\n          {/* Upload Settings Group */}\n          {/* <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"size-8 rounded-full bg-red-100 p-2 dark:bg-red-900\">\n                <Upload className=\"size-4 text-red-600 dark:text-red-400\" />\n              </div>\n              <h4 className=\"font-semibold\">Upload</h4>\n            </div>\n\n            <div className=\"space-y-4\">\n              {renderApiKeyInput('uploadthing', 'Uploadthing API key')}\n            </div>\n          </div> */}\n\n          <Button size=\"lg\" className=\"w-full\" type=\"submit\">\n            Save changes\n          </Button>\n        </form>\n\n        <p className=\"text-sm text-muted-foreground\">\n          Not stored anywhere. Used only for current session requests.\n        </p>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "Editors"
  ]
}