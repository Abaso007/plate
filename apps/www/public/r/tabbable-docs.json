{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabbable-docs",
  "type": "registry:file",
  "title": "Tabbable",
  "description": "Documentation for Tabbable",
  "files": [
    {
      "path": "../../docs/tabbable.mdx",
      "content": "---\ntitle: Tabbable\n---\n\n<ComponentPreview name=\"tabbable-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Ensures consistent tab order between tabbable elements in the editor\n\n</PackageInfo>\n\n## Installation\n\n```bash\nnpm install @udecode/plate-tabbable\n```\n\n## Usage\n\n```tsx\nimport { TabbablePlugin } from '@udecode/plate-tabbable/react';\nimport { KEYS } from '@udecode/plate';\n\nconst plugins = [\n  // ...otherPlugins,\n  TabbablePlugin,\n];\n```\n\n### Conflicts with other plugins\n\nThe Tabbable plugin may cause issues with other plugins that handle the `Tab` key, such as:\n\n- Lists\n- Code blocks\n- Indent plugin\n\nUse the `query` option to disable the Tabbable plugin when the `Tab` key should be handled by another plugin:\n\n```tsx\nquery: (editor) => {\n  const inList = findNode(editor, { match: { type: KEYS.lic } });\n  const inCodeBlock = findNode(editor, { match: { type: KEYS.codeBlock } });\n  return !inList && !inCodeBlock;\n},\n```\n\nAlternatively, if you're using the Indent plugin, you can enable the Tabbable plugin only when a specific type of node is selected, such as voids:\n\n```tsx\nquery: (editor) => !!findNode(editor, {\n  match: (node) => isVoid(editor, node),\n}),\n```\n\n### Non-void Slate nodes\n\nOne `TabbableEntry` will be created for each tabbable DOM element in the editor, as determined using the [tabbable](https://www.npmjs.com/package/tabbable) NPM package. The list of tabbables is then filtered using `isTabbable`.\n\nBy default, `isTabbable` only returns true for entries inside void Slate nodes. You can override `isTabbable` to add support for DOM elements contained in other types of Slate node:\n\n```tsx\n// Enable tabbable DOM elements inside CUSTOM_ELEMENT\nisTabbable: (tabbableEntry) => (\n  tabbableEntry.slateNode.type === CUSTOM_ELEMENT ||\n  isVoid(editor, tabbableEntry.slateNode)\n),\n```\n\n### DOM elements outside the editor\n\nIn some circumstances, you may want to allow users to tab from the editor to a DOM element rendered outside the editor, such as an interactive popover.\n\nTo do this, override `insertTabbableEntries` to return an array of `TabbableEntry` objects, one for each DOM element outside the editor that you want to include in the tabbable list. The `slateNode` and `path` of the `TabbableEntry` should refer to the Slate node the user's cursor will be inside when the DOM element should be tabbable to.\n\nSet the `globalEventListener` option to `true` to make sure the Tabbable plugin is able to return the user's focus to the editor.\n\nFor example, if the DOM element appears when a link is selected, the `slateNode` and `path` should be that of the link.\n\n```tsx\n// Add buttons inside .my-popover to the list of tabbables\nglobalEventListener: true,\ninsertTabbableEntries: (editor) => {\n  const [selectedNode, selectedNodePath] = getNodeEntry(editor, editor.selection);\n\n  return [\n    ...document.querySelectorAll('.my-popover > button'),\n  ].map((domNode) => ({\n    domNode,\n    slateNode: selectedNode,\n    path: selectedNodePath,\n  }));\n},\n```\n\n## Plugins\n\n### `TabbablePlugin`\n\nPlugin for managing tab order between tabbable elements.\n\n<API name=\"TabbablePlugin\">\n<APIOptions>\n  <APIItem name=\"query\" type=\"(editor: PlateEditor<V>, event: KeyboardEvent) => boolean\" optional>\n    Enable/disable plugin dynamically.\n    - **Default:** `() => true`\n  </APIItem>\n  <APIItem name=\"globalEventListener\" type=\"boolean\" optional>\n    Add event listener to document instead of editor.\n    - **Default:** `false`\n  </APIItem>\n  <APIItem name=\"insertTabbableEntries\" type=\"(editor: PlateEditor<V>, event: KeyboardEvent) => TabbableEntry[]\" optional>\n    Add additional tabbable entries outside editor.\n    - **Default:** `() => []`\n  </APIItem>\n  <APIItem name=\"isTabbable\" type=\"(tabbableEntry: TabbableEntry) => boolean\" optional>\n    Determine if element should be tabbable.\n    - **Default:** `(tabbableEntry) => isVoid(editor, tabbableEntry.slateNode)`\n  </APIItem>\n</APIOptions>\n</API>\n\n## Types\n\n### `TabbableEntry`\n\nDefines the properties of a tabbable entry.\n\n<API name=\"TabbableEntry\">\n<APIAttributes>\n  <APIItem name=\"domNode\" type=\"HTMLElement\">\n    HTML element representing tabbable entry.\n  </APIItem>\n  <APIItem name=\"slateNode\" type=\"TNode\">\n    Corresponding Slate node.\n  </APIItem>\n  <APIItem name=\"path\" type=\"Path\">\n    Path to Slate node in document.\n  </APIItem>\n</APIAttributes>\n</API>",
      "type": "registry:file",
      "target": "content/docs/plate/tabbable.mdx"
    }
  ]
}