{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "node-id-docs",
  "type": "registry:file",
  "title": "Node ID",
  "description": "Documentation for Node ID",
  "files": [
    {
      "path": "../../docs/node-id.mdx",
      "content": "---\ntitle: Node ID\n---\n\n{/* <ComponentPreview name=\"playground-demo\" id=\"node-id\" /> */}\n\n<PackageInfo>\n\n## Features\n\n- Plugin that automatically assigns and manages unique IDs for nodes in the editor\n- Configurable ID generation and storage\n- Handles node operations (insert, split) with ID preservation\n- Optional ID reuse for undo/redo and copy/paste operations\n\n</PackageInfo>\n\n## Installation\n\n```bash\nnpm install @udecode/plate-node-id\n```\n\n## Usage\n\n```tsx\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\n```\n\n```tsx\nconst plugins = [\n  // ...otherPlugins,\n  NodeIdPlugin.configure({\n    options: {\n      idKey: 'id',\n      filterInline: true,\n      filterText: true,\n      idCreator: () => nanoid(10),\n    },\n  }),\n];\n```\n\n## Plugins\n\n### `NodeIdPlugin`\n\nPlugin that automatically assigns and manages unique IDs for nodes in the editor.\n\n<API name=\"NodeIdPlugin\">\n<APIOptions type=\"object\">\n  <APIItem name=\"disableInsertOverrides\" type=\"boolean\" optional>\n    Disable using existing IDs when inserting nodes.\n    - When `false`: Keeps existing IDs if they don't exist in document\n    - When `true`: Always generates new IDs\n    - **Default:** `false`\n  </APIItem>\n  <APIItem name=\"filterInline\" type=\"boolean\" optional>\n    Filter inline Element nodes from receiving IDs.\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"filterText\" type=\"boolean\" optional>\n    Filter Text nodes from receiving IDs.\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"idCreator\" type=\"() => any\" optional>\n    Function to generate unique IDs.\n    - **Default:** `() => nanoid(10)`\n  </APIItem>\n  <APIItem name=\"idKey\" type=\"string\" optional>\n    Property key used to store node IDs.\n    - **Default:** `'id'`\n  </APIItem>\n  <APIItem name=\"normalizeInitialValue\" type=\"boolean\" optional>\n    Whether to normalize all nodes in initial value.\n    - When `false`: Only checks first and last nodes\n    - When `true`: Normalizes all nodes\n    - **Default:** `false`\n  </APIItem>\n  <APIItem name=\"reuseId\" type=\"boolean\" optional>\n    Reuse IDs on undo/redo and copy/paste.\n    - When `true`: Keeps IDs if they don't exist in document\n    - When `false`: Always generates new IDs (safer across documents)\n    - **Default:** `false`\n  </APIItem>\n  <APIItem name=\"allow\" type=\"string[]\" optional>\n    Node types that should receive IDs.\n  </APIItem>\n  <APIItem name=\"exclude\" type=\"string[]\" optional>\n    Node types that should not receive IDs.\n  </APIItem>\n  <APIItem name=\"filter\" type=\"(node: NodeEntry) => boolean\" optional>\n    Custom filter function for nodes that should receive IDs.\n    - **Default:** `() => true`\n  </APIItem>\n</APIOptions>\n</API>\n\n## Behavior\n\nThe plugin handles several scenarios:\n\n1. **Node Insertion**:\n```tsx\n<editor>\n  <hp id=\"10\">test</hp>\n</editor>\n\n// Insert node with existing ID (e.g. copy/paste)\neditor.tf.insertNode(<hp id=\"10\">inserted</hp>);\n// Results in:\n<editor>\n  <hp id=\"10\">test</hp>\n  <hp id=\"1\">inserted</hp>  {/* Gets new ID */}\n</editor>\n\n// Insert multiple nodes\neditor.tf.insertNodes([\n  <hp>inserted</hp>,\n  <hp>test</hp>,\n]);\n// Results in:\n<editor>\n  <hp id=\"10\">test</hp>\n  <hp id=\"1\">inserted</hp>  \n  <hp id=\"2\">test</hp>      \n</editor>\n```\n\n2. **Node Splitting**:\n```tsx\n// Before split\n<hp id=\"1\">te|st</hp>\n// After split:\n<hp id=\"1\">te</hp>\n<hp id=\"2\">st</hp>\n```\n\n3. **Filtering**:\n```tsx\n// With filterText=false\n<hp id=\"1\">\n  <htext id=\"2\">text</htext>\n</hp>\n\n// With allow=['p'] exclude=['blockquote']\n<hp id=\"1\">text</hp>\n<hblockquote>quote</hblockquote>\n```\n\n4. **Undo/Redo**:\n```tsx\n// With reuseId=true\neditor.tf.insertNode(<hp id=\"1\">text</hp>);\neditor.undo();\neditor.redo();\n// Node keeps id=\"1\" if not in use\n\n// With reuseId=false\neditor.tf.insertNode(<hp id=\"1\">text</hp>);\neditor.undo();\neditor.redo();\n// Node gets new id=\"2\"\n```",
      "type": "registry:file",
      "target": "content/docs/plate/plugins/node-id.mdx"
    }
  ]
}