{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "suggestion-docs",
  "type": "registry:file",
  "title": "Suggestion",
  "description": "Documentation for Suggestion",
  "files": [
    {
      "path": "../../docs/suggestion.mdx",
      "content": "---\ntitle: Suggestion\ndocs:\n  - route: /docs/components/suggestion-node\n    title: Suggestion Leaf\n  - route: /docs/components/suggestion-toolbar-button\n    title: Suggestion Toolbar Button\n  - route: /docs/components/block-suggestion\n    title: Block suggestion\n  - route: /docs/components/block-discussion\n    title: Block discussion\n  - route: /docs/components/suggestion-line-break\n    title: Suggestion line break\n---\n\n<ComponentPreview name=\"comments-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Add suggestions as text marks\n- Add block suggestions\n- Track suggestion state\n- Undo/redo suggestion changes\n- Note: This is an experimental feature and the API is subject to change.\n\n</PackageInfo>\n\n## Installation\n```bash\nnpm install @udecode/plate-suggestion\n```\n\n## Usage\n\n```tsx\nimport { discussionPlugin } from '@/components/editor/plugins/discussion-kit';\nimport { suggestionPlugin } from '@/components/editor/plugins/suggestion-kit';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    discussionPlugin,\n    suggestionPlugin.configure({\n      render: { belowNodes: SuggestionBelowNodes as any },\n      options: {\n        currentUserId: 'alice',\n      }\n    }),\n  ],\n});\n```\n\nThe suggestion plugin works in conjunction with the discussion plugin to provide a complete suggestion and discussion system. The discussion plugin provides the UI layer for managing discussions and users. Source code of both plugins is available in the example.\n\n## Keyboard Shortcuts\n\n<KeyTable>\n  <KeyTableItem hotkey=\"Cmd + Shift + S\">\n    Add a suggestion on the selected text.\n  </KeyTableItem>\n</KeyTable>\n\n## Examples\n\n### Plate UI\n\nRefer to the preview above.\n\n### Plate Plus\n\n<ComponentPreviewPro name=\"comments-pro\" />\n\n## Plugins\n\n### `SuggestionPlugin`\n\n## API\n\n### `api.suggestion.dataList`\n\nGets an array of suggestion data from a text node.\n\n<API name=\"dataList\">\n<APIParameters>\n  <APIItem name=\"node\" type=\"TSuggestionText\">\n    The suggestion text node.\n  </APIItem>\n</APIParameters>\n<APIReturns type=\"TInlineSuggestionData[]\">\n  Array of suggestion data.\n</APIReturns>\n</API>\n\n### `api.suggestion.isBlockSuggestion`\n\nChecks if a node is a block suggestion element.\n\n<API name=\"isBlockSuggestion\">\n<APIParameters>\n  <APIItem name=\"node\" type=\"TElement\">\n    The node to check.\n  </APIItem>\n</APIParameters>\n<APIReturns type=\"node is TSuggestionElement\">\n  Whether the node is a block suggestion.\n</APIReturns>\n</API>\n\n### `api.suggestion.node`\n\nGets a suggestion node entry.\n\n<API name=\"node\">\n<APIOptions type=\"EditorNodesOptions & { id?: string; isText?: boolean }\" optional>\n  Options for finding the node.\n</APIOptions>\n<APIReturns type=\"NodeEntry<TSuggestionElement | TSuggestionText> | undefined\">\n  The suggestion node entry if found.\n</APIReturns>\n</API>\n\n### `api.suggestion.nodeId`\n\nGets the ID of a suggestion from a node.\n\n<API name=\"nodeId\">\n<APIParameters>\n  <APIItem name=\"node\" type=\"TElement | TSuggestionText\">\n    The node to get ID from.\n  </APIItem>\n</APIParameters>\n<APIReturns type=\"string | undefined\">\n  The suggestion ID if found.\n</APIReturns>\n</API>\n\n### `api.suggestion.nodes`\n\nGets all suggestion node entries matching the options.\n\n<API name=\"nodes\">\n<APIOptions type=\"EditorNodesOptions\" optional>\n  Options for finding the nodes.\n</APIOptions>\n<APIReturns type=\"NodeEntry<TElement | TSuggestionText>[]\">\n  Array of suggestion node entries.\n</APIReturns>\n</API>\n\n### `api.suggestion.suggestionData`\n\nGets suggestion data from a node.\n\n<API name=\"suggestionData\">\n<APIParameters>\n  <APIItem name=\"node\" type=\"TElement | TSuggestionText\">\n    The node to get suggestion data from.\n  </APIItem>\n</APIParameters>\n<APIReturns type=\"TInlineSuggestionData | TSuggestionElement['suggestion'] | undefined\">\n  The suggestion data if found.\n</APIReturns>\n</API>\n\n### `api.suggestion.withoutSuggestions`\n\nExecutes a function with suggestions temporarily disabled.\n\n<API name=\"withoutSuggestions\">\n<APIParameters>\n  <APIItem name=\"fn\" type=\"() => void\">\n    The function to execute.\n  </APIItem>\n</APIParameters>\n</API>\n\n## Types\n\n### `TSuggestionText`\n\nInterface for text nodes that can contain suggestions.\n\n<API name=\"TSuggestionText\">\n<APIAttributes>\n  <APIItem name=\"suggestion\" type=\"boolean\" optional>\n    Indicates whether this is a suggestion.\n  </APIItem>\n  <APIItem name=\"suggestion_<id>\" type=\"TInlineSuggestionData\" optional>\n    Contains suggestion data. Multiple suggestions can be present in a single text node.\n  </APIItem>\n</APIAttributes>\n</API>\n",
      "type": "registry:file",
      "target": "content/docs/plate/plugins/suggestion.mdx"
    }
  ]
}