{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "block-draggable",
  "type": "registry:ui",
  "title": "Block Draggable",
  "description": "A block wrapper with a drag handle for moving editor blocks.",
  "dependencies": [
    "@udecode/plate-dnd",
    "@udecode/plate-selection"
  ],
  "registryDependencies": [
    "tooltip",
    "https://platejs.org/r/use-mounted"
  ],
  "files": [
    {
      "path": "src/registry/ui/block-draggable.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport { isType, KEYS } from '@udecode/plate';\nimport { useDraggable, useDropLine } from '@udecode/plate-dnd';\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\nimport {\n  type PlateElementProps,\n  type RenderNodeWrapper,\n  MemoizedChildren,\n  useEditorRef,\n  useElement,\n  usePath,\n  usePluginOption,\n} from '@udecode/plate/react';\nimport { useSelected } from '@udecode/plate/react';\nimport { GripVertical } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport { cn } from '@/lib/utils';\n\nconst UNDRAGGABLE_KEYS = [KEYS.column, KEYS.tr, KEYS.td];\n\nexport const BlockDraggable: RenderNodeWrapper = (props) => {\n  const { editor, element, path } = props;\n\n  const enabled = React.useMemo(() => {\n    if (path.length === 1 && !isType(editor, element, UNDRAGGABLE_KEYS)) {\n      return true;\n    }\n    if (path.length === 3 && !isType(editor, element, UNDRAGGABLE_KEYS)) {\n      const block = editor.api.some({\n        at: path,\n        match: {\n          type: editor.getType(KEYS.column),\n        },\n      });\n\n      if (block) {\n        return true;\n      }\n    }\n    if (path.length === 4 && !isType(editor, element, UNDRAGGABLE_KEYS)) {\n      const block = editor.api.some({\n        at: path,\n        match: {\n          type: editor.getType(KEYS.table),\n        },\n      });\n\n      if (block) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [editor, element, path]);\n\n  if (!enabled) return;\n\n  return (props) => <Draggable {...props} />;\n};\n\nexport function Draggable(props: PlateElementProps) {\n  const { children, editor, element, path } = props;\n  const blockSelectionApi = editor.getApi(BlockSelectionPlugin).blockSelection;\n  const { isDragging, previewRef, handleRef } = useDraggable({\n    element,\n    onDropHandler: (_, { dragItem }) => {\n      const id = (dragItem as { id: string }).id;\n\n      if (blockSelectionApi && id) {\n        blockSelectionApi.set(id);\n      }\n    },\n  });\n\n  const isInColumn = path.length === 3;\n  const isInTable = path.length === 4;\n\n  return (\n    <div\n      className={cn(\n        'relative',\n        isDragging && 'opacity-50',\n        editor.meta.containerTypes.includes(element.type)\n          ? 'group/container'\n          : 'group'\n      )}\n    >\n      {!isInTable && (\n        <Gutter>\n          <div\n            className={cn(\n              'slate-blockToolbarWrapper',\n              'flex h-[1.5em]',\n              isType(editor, element, [\n                KEYS.h1,\n                KEYS.h2,\n                KEYS.h3,\n                KEYS.h4,\n                KEYS.h5,\n              ]) && 'h-[1.3em]',\n              isInColumn && 'h-4'\n            )}\n          >\n            <div\n              className={cn(\n                'slate-blockToolbar',\n                'pointer-events-auto mr-1 flex items-center',\n                isInColumn && 'mr-1.5'\n              )}\n            >\n              <Button\n                ref={handleRef}\n                variant=\"ghost\"\n                className=\"h-6 w-4.5 p-0\"\n                data-plate-prevent-deselect\n              >\n                <DragHandle />\n              </Button>\n            </div>\n          </div>\n        </Gutter>\n      )}\n\n      <div ref={previewRef} className=\"slate-blockWrapper\">\n        <MemoizedChildren>{children}</MemoizedChildren>\n        <DropLine />\n      </div>\n    </div>\n  );\n}\n\nfunction Gutter({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  const editor = useEditorRef();\n  const element = useElement();\n  const path = usePath();\n  const isSelectionAreaVisible = usePluginOption(\n    BlockSelectionPlugin,\n    'isSelectionAreaVisible'\n  );\n  const selected = useSelected();\n\n  const isNodeType = (keys: string[] | string) => isType(editor, element, keys);\n\n  const isInColumn = path.length === 3;\n\n  return (\n    <div\n      {...props}\n      className={cn(\n        'slate-gutterLeft',\n        'absolute top-0 z-50 flex h-full -translate-x-full cursor-text hover:opacity-100 sm:opacity-0',\n        editor.meta.containerTypes.includes(element.type)\n          ? 'group-hover/container:opacity-100'\n          : 'group-hover:opacity-100',\n        isSelectionAreaVisible && 'hidden',\n        !selected && 'opacity-0',\n        isNodeType(KEYS.h1) && 'pb-1 text-[1.875em]',\n        isNodeType(KEYS.h2) && 'pb-1 text-[1.5em]',\n        isNodeType(KEYS.h3) && 'pt-[2px] pb-1 text-[1.25em]',\n        isNodeType([KEYS.h4, KEYS.h5]) && 'pt-1 pb-0 text-[1.1em]',\n        isNodeType(KEYS.h6) && 'pb-0',\n        isNodeType(KEYS.p) && 'pt-1 pb-0',\n        isNodeType(KEYS.blockquote) && 'pb-0',\n        isNodeType(KEYS.codeBlock) && 'pt-6 pb-0',\n        isNodeType([\n          KEYS.img,\n          KEYS.mediaEmbed,\n          KEYS.excalidraw,\n          KEYS.toggle,\n          KEYS.column,\n        ]) && 'py-0',\n        isNodeType([KEYS.placeholder, KEYS.table]) && 'pt-3 pb-0',\n        isInColumn && 'mt-2 h-4 pt-0',\n        className\n      )}\n      contentEditable={false}\n    >\n      {children}\n    </div>\n  );\n}\n\nconst DragHandle = React.memo(function DragHandle() {\n  const editor = useEditorRef();\n  const element = useElement();\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <div\n          className=\"flex size-full items-center justify-center\"\n          onClick={() => {\n            editor\n              .getApi(BlockSelectionPlugin)\n              .blockSelection.set(element.id as string);\n          }}\n          role=\"button\"\n        >\n          <GripVertical className=\"text-muted-foreground\" />\n        </div>\n      </TooltipTrigger>\n      <TooltipContent>Drag to move</TooltipContent>\n    </Tooltip>\n  );\n});\n\nconst DropLine = React.memo(function DropLine({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  const { dropLine } = useDropLine();\n\n  if (!dropLine) return null;\n\n  return (\n    <div\n      {...props}\n      className={cn(\n        'slate-dropLine',\n        'absolute inset-x-0 h-0.5 opacity-100 transition-opacity',\n        'bg-brand/50',\n        dropLine === 'top' && '-top-px',\n        dropLine === 'bottom' && '-bottom-px',\n        className\n      )}\n    />\n  );\n});\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "docs": [
      {
        "route": "/docs/dnd",
        "title": "Drag & Drop"
      },
      {
        "route": "https://pro.platejs.org/docs/components/block-draggable"
      }
    ],
    "examples": [
      "dnd-demo",
      "dnd-pro"
    ],
    "usage": [
      "DndPlugin.configure({\n  render: {\n    aboveNodes: BlockDraggable,\n  },\n})"
    ]
  }
}