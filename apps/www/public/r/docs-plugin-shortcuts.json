{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "docs-plugin-shortcuts",
  "type": "registry:file",
  "title": "Plugin Shortcuts",
  "description": "Learn how to configure and use keyboard shortcuts in Plate plugins.",
  "files": [
    {
      "path": "../../docs/plugin-shortcuts.mdx",
      "content": "---\ntitle: Plugin Shortcuts\ndescription: Learn how to configure and use keyboard shortcuts in Plate plugins.\n---\n\nThis guide covers the configuration and usage of keyboard shortcuts in Plate plugins, allowing you to create custom hotkeys for various editor actions.\n\n## Plugin Shortcuts\n\nPlate provides a set of default shortcuts for common actions.\n\n### Text Formatting\n\n- **BoldPlugin**\n  - `toggleBold`: `Mod+B`\n\n- **ItalicPlugin**\n  - `toggleItalic`: `Mod+I`\n\n- **UnderlinePlugin**\n  - `toggleUnderline`: `Mod+U`\n\n- **StrikethroughPlugin**\n  - `toggleStrikethrough`: `Mod+Shift+X`\n\n- **CodePlugin**\n  - `toggleCode`: `Mod+E`\n\n- **SubscriptPlugin**\n  - `toggleSubscript`: `Mod+,`\n\n- **SuperscriptPlugin**\n  - `toggleSuperscript`: `Mod+.`\n\n- **HighlightPlugin**\n  - `toggleHighlight`: `Mod+Shift+H`\n\n## Block Formatting\n\n- **ParagraphPlugin**\n  - `toggleParagraph`: `Mod+Alt+0` or `Mod+Shift+0`\n\n- **BlockquotePlugin**\n  - `toggleBlockquote`: `Mod+Shift+.`\n\n- **HeadingPlugin**\n  - `toggleHeading1`: `Mod+Alt+1` or `Mod+Shift+1`\n  - `toggleHeading2`: `Mod+Alt+2` or `Mod+Shift+2`\n  - `toggleHeading3`: `Mod+Alt+3` or `Mod+Shift+3`\n\n- **CodeBlockPlugin**\n  - `toggleCodeBlock`: `Mod+Alt+8`\n\n## Lists\n\n- **ListPlugin**\n  - `toggleBulletedList`: `Mod+Alt+5`\n  - `toggleNumberedList`: `Mod+Alt+6`\n\n- **TodoListPlugin**\n  - `toggleTodoList`: `Mod+Alt+4` or `Mod+Shift+4`\n\n## Comments\n\n- **CommentsPlugin**\n  - `toggleComment`: `Mod+Shift+M`\n\n### Notes\n\n- `Mod` represents `Cmd` on macOS and `Ctrl` on Windows/Linux.\n- Shortcuts can be customized or extended as needed in your Plate configuration.\n\n## Adding Shortcuts to Plugins\n\nYou can add shortcuts to your plugins using the `shortcuts` option. Each shortcut is defined with a unique key and an object containing the handler, keys, and other optional properties.\n\nHere's a basic example:\n\n```ts\nconst ParagraphPlugin = createPlatePlugin({\n  key: 'p',\n  shortcuts: {\n    toggleParagraph: {\n      handler: ({ editor }) => {\n        editor.toggleBlock({ type: 'p' });\n      },\n      keys: ['mod+opt+0', 'mod+shift+0'],\n    },\n  },\n});\n```\n\nIn this example, pressing `Cmd+Option+0` or `Cmd+Shift+0` (on Mac) or `Ctrl+Alt+0` or `Ctrl+Shift+0` (on Windows/Linux) will toggle the paragraph block.\n\n## Shortcut Properties\n\nEach shortcut can have the following properties:\n\n- `handler`: A function that is called when the shortcut is triggered.\n- `keys`: A string or array of strings representing the key combination(s).\n- `priority`: (Optional) A number indicating the priority of the shortcut.\n- `preventDefault`: (Optional) A boolean to prevent the default browser action.\n\n## Multiple Shortcuts\n\nYou can define multiple shortcuts for a single plugin:\n\n```ts\nconst FormattingPlugin = createPlatePlugin({\n  key: 'formatting',\n  shortcuts: {\n    toggleBold: {\n      handler: ({ editor }) => {\n        editor.tf.toggleMark('bold');\n      },\n      keys: 'mod+b',\n    },\n    toggleItalic: {\n      handler: ({ editor }) => {\n        editor.tf.toggleMark('italic');\n      },\n      keys: 'mod+i',\n    },\n  },\n});\n```\n\n## Shortcut Priority\n\nWhen multiple plugins define shortcuts with the same key combination, you can use the `priority` property to determine which one takes precedence:\n\n```ts\nconst HighPriorityPlugin = createPlatePlugin({\n  key: 'highPriority',\n  shortcuts: {\n    myShortcut: {\n      handler: () => console.info('High priority'),\n      keys: 'mod+k',\n      priority: 100,\n    },\n  },\n});\n\nconst LowPriorityPlugin = createPlatePlugin({\n  key: 'lowPriority',\n  shortcuts: {\n    myShortcut: {\n      handler: () => console.info('Low priority'),\n      keys: 'mod+k',\n      priority: 50,\n    },\n  },\n});\n```\n\nIn this case, the `HighPriorityPlugin` shortcut will be triggered when `Cmd+K` (Mac) or `Ctrl+K` (Windows/Linux) is pressed.\n\n## Disabling Shortcuts\n\nYou can disable a specific shortcut by setting its value to `null`:\n\n```ts\nconst MyPlugin = ParagraphPlugin.configure({\n  shortcuts: {\n    myShortcut: null,\n  },\n});\n```\n\n## Extending Shortcuts\n\nYou can extend or override shortcuts using the `extend` method:\n\n```ts\nconst ExtendedPlugin = BasePlugin.extend({\n  shortcuts: {\n    newShortcut: {\n      handler: () => console.info('New shortcut'),\n      keys: 'mod+shift+n',\n    },\n  },\n});\n```\n\n## Root Plugin Shortcuts\n\nYou can also define shortcuts at the root level when creating the editor:\n\n```ts\nconst editor = createPlateEditor({\n  plugins: [/* your plugins */],\n  shortcuts: {\n    globalShortcut: {\n      handler: () => console.info('Global shortcut triggered'),\n      keys: 'mod+g',\n    },\n  },\n});\n```\n\nRoot-level shortcuts have the highest priority by default.\n\n## Best Practices\n\n- Consider using the `preventDefault` option for shortcuts that might conflict with browser defaults.\n- Be mindful of existing shortcuts in your application to avoid conflicts.\n- Use the `priority` property when you need fine-grained control over which shortcut is triggered.\n",
      "type": "registry:file",
      "target": "content/docs/plate/guides/plugin/plugin-shortcuts.mdx"
    }
  ]
}