{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "docs-indent-list",
  "type": "registry:file",
  "title": "Indent List",
  "description": "Documentation for Indent List",
  "files": [
    {
      "path": "../../docs/indent-list.mdx",
      "content": "---\ntitle: Indent List\ndocs:\n  - route: /docs/components/indent-list-toolbar-button\n    title: Indent List Toolbar Button\n---\n\n<ComponentPreview name=\"indent-list-demo\" />\n\n<Callout type=\"info\" title=\"Choose Your List Plugin\">\n  Plate offers two approaches for implementing lists:\n\n  1. **This Indent List plugin** - Flexible indentation-based lists:\n     - More like Word/Google Docs behavior\n     - Any block can be indented to create list-like structures\n     - Used in the [AI editor](/editors#editor-ai)\n     - Better for free-form content organization\n\n  2. The [**List plugin**](/docs/list) - Traditional HTML-spec lists with strict nesting rules:\n     - Follows standard HTML list structure (`ul`/`ol` > `li`)\n     - Maintains consistent list hierarchy\n     - Best for content that may be exported to HTML/markdown\n     - Highest complexity\n\n  Choose based on your needs:\n  - Use the **Indent List plugin** when you want more flexible indentation behavior\n  - Use the **List plugin** when you need standard HTML list compatibility\n\n</Callout>\n\n<PackageInfo>\n\n## Features\n\n- **Flexible Block Indentation**:\n  - Set list indentation for any block type (paragraphs, headings, etc.)\n  - Transform any block into a list item through indentation\n  - More intuitive Word/Google Docs-like behavior\n\n- **Simplified Structure** - Differs from the [List plugin](/docs/list):\n  - Flat DOM structure where each indented block is independent\n  - Each indented list block consists of a single `ul` or `ol` with one item\n  - No strict parent-child relationships enforced\n  - Better for free-form content organization\n\n- **List Types**:\n  - Bulleted lists (unordered)\n  - Numbered lists (ordered)\n\n- **Shortcuts**:\n  - Combined with the autoformat plugin, use markdown shortcuts (`-`, `*`, `1.`) to create lists\n  - Tab/Shift+Tab for indentation control\n\nFor more information about the underlying indentation system, see the [Indent doc](/docs/indent).\n\n</PackageInfo>\n\n## Installation\n\n```bash\nnpm install @udecode/plate-indent-list @udecode/plate-indent\n```\n\n## Usage\n\n```tsx\nimport { IndentPlugin } from '@udecode/plate-indent/react';\nimport { IndentListPlugin } from '@udecode/plate-indent-list/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { HeadingPlugin } from '@udecode/plate-heading/react';\nimport { ParagraphPlugin } from '@udecode/plate/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  HeadingPlugin,\n  IndentPlugin.configure({\n    inject: {\n      targetPlugins: [ParagraphPlugin.key, HEADING_KEYS.h1],\n    }\n  }),\n  IndentListPlugin.configure({\n    inject: {\n      targetPlugins: [ParagraphPlugin.key, HEADING_KEYS.h1],\n    }\n  }),\n];\n```\n\n## Plugins\n\n### `IndentListPlugin`\n\n<API name=\"IndentListPlugin\">\n<APIOptions>\n  <APIItem name=\"getSiblingIndentListOptions\" type=\"GetSiblingIndentListOptions<TElement>\" optional>\n    Function to determine indent list options for sibling elements.\n  </APIItem>\n  <APIItem name=\"getListStyleType\" type=\"(element: HTMLElement) => ListStyleType\" optional>\n    Function mapping HTML elements to list style types.\n  </APIItem>\n  <APIItem name=\"renderIndentListBelowNodes\" type=\"(editor: PlateEditor) => React.ReactNode\" optional>\n    Function to render components below indent list nodes.\n  </APIItem>\n</APIOptions>\n</API>\n\n## API\n\n### `getNextIndentList`\n\n<API name=\"getNextIndentList\">\n<APIParameters>\n  <APIItem name=\"entry\" type=\"ElementEntryOf\">\n    Entry of the current element.\n  </APIItem>\n  <APIItem name=\"options\" type=\"Partial<GetSiblingIndentListOptions>\" optional>\n    Options for getting next indent list.\n  </APIItem>\n</APIParameters>\n\n<APIReturns type=\"NodeEntry | undefined\">\n  Entry of the next sibling with an indent list, or `undefined` if not found.\n</APIReturns>\n</API>\n\n### `getPreviousIndentList`\n\nGets the previous sibling entry with an indent list.\n\n<API name=\"getPreviousIndentList\">\n<APIParameters>\n  <APIItem name=\"entry\" type=\"ElementEntryOf\">\n    Entry of the current element.\n  </APIItem>\n  <APIItem name=\"options\" type=\"Partial<GetSiblingIndentListOptions>\" optional>\n    Options for getting previous indent list.\n  </APIItem>\n</APIParameters>\n\n<APIReturns type=\"NodeEntry | undefined\">\n  Entry of the previous sibling with an indent list, or `undefined` if not found.\n</APIReturns>\n</API>\n\n### `indentList`\n\nIncreases the indentation of the selected blocks.\n\n<API name=\"indentList\">\n<APIOptions type=\"IndentListOptions\">\n  <APIItem name=\"listStyleType\" type=\"ListStyleType | string\" optional>\n    List style type to use.\n    - **Default:** `ListStyleType.Disc`\n  </APIItem>\n</APIOptions>\n</API>\n\n### `outdentList`\n\nDecreases the indentation of the selected blocks.\n\n<API name=\"outdentList\">\n<APIOptions type=\"IndentListOptions\">\n  <APIItem name=\"listStyleType\" type=\"ListStyleType | string\" optional>\n    List style type to use.\n    - **Default:** `ListStyleType.Disc`\n  </APIItem>\n</APIOptions>\n</API>\n\n### `someIndentList`\n\nChecks if some of the selected blocks have a specific list style type.\n\n<API name=\"someIndentList\">\n<APIParameters>\n  <APIItem name=\"type\" type=\"string | string[]\">\n    List style type to check.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `toggleIndentList`\n\nToggles the indent list.\n\n<API name=\"toggleIndentList\">\n<APIOptions type=\"IndentListOptions\">\n  <APIItem name=\"listStyleType\" type=\"ListStyleType | string\" optional>\n    List style type to use.\n  </APIItem>\n\n  <APIItem name=\"listRestart\" type=\"number\" optional>\n    Override the number of the list item.\n  </APIItem>\n\n  <APIItem name=\"listRestartPolite\" type=\"number\" optional>\n    Override the number of the list item, only taking effect if the list item is the first in the list.\n  </APIItem>\n</APIOptions>\n</API>\n\n## Types\n\n### `GetSiblingIndentListOptions`\n\nUsed to provide options for getting the sibling indent list in a block of text.\n\n<API name=\"GetSiblingIndentListOptions\">\n<APIOptions>\n  <APIItem name=\"getPreviousEntry\" type=\"function\">\n    This function is used to get the previous sibling entry from a given entry.\n  </APIItem>\n  <APIItem name=\"getNextEntry\" type=\"function\">\n    This function is used to get the next sibling entry from a given entry.\n  </APIItem>\n  <APIItem name=\"query\" type=\"function\">\n    This function is used to validate a sibling node during the lookup process.\n    If it returns false, the next sibling is checked.\n  </APIItem>\n  <APIItem name=\"eqIndent\" type=\"boolean\">\n    Indicates whether to break the lookup when the sibling node has an indent\n    level equal to the current node. If true, the lookup stops when a sibling\n    node with the same indent level is found.\n  </APIItem>\n  <APIItem name=\"breakQuery\" type=\"(node: TNode) => boolean | undefined\">\n    A function that takes a `TNode` and returns a boolean value or undefined.\n    This function is used to specify a condition under which the lookup process\n    should be stopped.\n  </APIItem>\n  <APIItem name=\"breakOnLowerIndent\" type=\"boolean\">\n    Indicates whether to break the lookup when a sibling node with a lower\n    indent level is found. If true, the lookup stops when a sibling node with a\n    lower indent level is found.\n  </APIItem>\n  <APIItem name=\"breakOnEqIndentNeqListStyleType\" type=\"boolean\">\n    Indicates whether to break the lookup when a sibling node with the same\n    indent level but a different list style type is found. If true, the lookup\n    stops when such a sibling node is found.\n  </APIItem>\n</APIOptions>\n</API>\n\n## Hooks\n\n### `useIndentListToolbarButton`\n\nA behavior hook for the indent list toolbar button.\n\n<API name=\"useIndentListToolbarButton\">\n<APIState>\n  <APIItem name=\"nodeType\" type=\"string\">\n    The list style type.\n  </APIItem>\n  <APIItem name=\"pressed\" type=\"boolean\">\n    Whether the button is pressed.\n  </APIItem>\n</APIState>\n\n<APIReturns type=\"object\">\n  <APIItem name=\"props\" type=\"object\">\n    Props for the toolbar button.\n     <APISubList>\n      <APISubListItem parent=\"props\" name=\"pressed\" type=\"boolean\">\n        Whether the button is pressed.\n      </APISubListItem>\n      <APISubListItem parent=\"props\" name=\"onClick\" type=\"function\">\n        Callback to handle the click event. Toggles the indent list of the specified node type and focuses the editor.\n      </APISubListItem>\n    </APISubList>\n  </APIItem>\n</APIReturns>\n</API>\n",
      "type": "registry:file",
      "target": "content/docs/plate/plugins/indent-list.mdx"
    }
  ]
}