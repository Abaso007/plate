{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "editable-voids-demo",
  "type": "registry:example",
  "dependencies": [
    "@udecode/cn"
  ],
  "registryDependencies": [
    "https://platejs.org/r/use-create-editor",
    "https://platejs.org/r/editor",
    "https://platejs.org/r/editor-plugins",
    "input",
    "label",
    "radio-group"
  ],
  "files": [
    {
      "path": "src/registry/examples/editable-voids-demo.tsx",
      "content": "'use client';\n\nimport React, { useState } from 'react';\n\nimport type { PlateElementProps } from '@udecode/plate/react';\n\nimport { createPlatePlugin, Plate } from '@udecode/plate/react';\n\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { editorPlugins } from '@/registry/components/editor/plugins/editor-plugins';\nimport { useCreateEditor } from '@/registry/components/editor/use-create-editor';\nimport { editableVoidsValue } from '@/registry/examples/values/editable-voids-value';\nimport { Editor, EditorContainer } from '@/registry/ui/editor';\n\nexport const EditableVoidPlugin = createPlatePlugin({\n  key: 'editable-void',\n  node: {\n    component: EditableVoidElement,\n    isElement: true,\n    isVoid: true,\n  },\n});\n\nexport function EditableVoidElement({\n  attributes,\n  children,\n}: PlateElementProps) {\n  const [inputValue, setInputValue] = useState('');\n\n  const editor = useCreateEditor({\n    plugins: editorPlugins,\n  });\n\n  return (\n    // Need contentEditable=false or Firefox has issues with certain input types.\n    <div {...attributes} contentEditable={false}>\n      <div className=\"mt-2 grid gap-6 rounded-md border p-6 shadow-sm\">\n        <Input\n          id=\"name\"\n          className=\"my-2\"\n          value={inputValue}\n          onChange={(e) => {\n            setInputValue(e.target.value);\n          }}\n          placeholder=\"Name\"\n          type=\"text\"\n        />\n\n        <div className=\"grid w-full max-w-sm items-center gap-2\">\n          <Label htmlFor=\"handed\">Left or right handed:</Label>\n\n          <RadioGroup id=\"handed\" defaultValue=\"r1\">\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem id=\"r1\" value=\"r1\" />\n              <Label htmlFor=\"r1\">Left</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem id=\"r2\" value=\"r2\" />\n              <Label htmlFor=\"r2\">Right</Label>\n            </div>\n          </RadioGroup>\n        </div>\n\n        <div className=\"grid gap-2\">\n          <Label htmlFor=\"editable-void-basic-elements\">\n            Tell us about yourself:\n          </Label>\n\n          <Plate\n            editor={editor}\n            // initialValue={basicElementsValue}\n          >\n            <EditorContainer>\n              <Editor />\n            </EditorContainer>\n          </Plate>\n        </div>\n      </div>\n      {children}\n    </div>\n  );\n}\n\nexport default function EditableVoidsDemo() {\n  const editor = useCreateEditor({\n    plugins: [...editorPlugins, EditableVoidPlugin],\n    value: editableVoidsValue,\n  });\n\n  return (\n    <Plate editor={editor}>\n      <EditorContainer>\n        <Editor />\n      </EditorContainer>\n    </Plate>\n  );\n}\n",
      "type": "registry:example"
    },
    {
      "path": "src/registry/examples/values/editable-voids-value.tsx",
      "content": "/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@udecode/plate-test-utils';\n\njsx;\n\nexport const editableVoidsValue: any = (\n  <fragment>\n    <hp>\n      In addition to nodes that contain editable text, you can insert void\n      nodes, which can also contain editable elements, inputs, or an entire\n      other Slate editor.\n    </hp>\n    <element type=\"editable-void\">\n      <htext />\n    </element>\n    <hp>\n      <htext />\n    </hp>\n  </fragment>\n);\n",
      "type": "registry:example"
    }
  ]
}