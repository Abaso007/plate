{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toc-docs",
  "type": "registry:file",
  "title": "Table of Contents",
  "description": "Documentation for Table of Contents",
  "files": [
    {
      "path": "../../docs/toc.mdx",
      "content": "---\ntitle: Table of Contents\ndocs:\n  - route: components/toc-node\n    title: Toc Element\n  - route: https://pro.platejs.org/docs/components/toc-sidebar\n    title: Toc Sidebar\n---\n\n<ComponentPreview name=\"toc-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Automatically generates a table of contents from document headings\n- Smooth scrolling to headings\n\n</PackageInfo>\n\n## Installation\n\n```bash\nnpm install @udecode/plate-basic-nodes @udecode/plate-toc\n```\n\n## Usage\n\n```tsx\nimport { TocPlugin } from '@udecode/plate-toc/react';\nimport { HeadingPlugin } from '@udecode/plate-basic-nodes/react';\nimport { KEYS } from '@udecode/plate';\n```\n\n```tsx\nconst plugins = [\n  // ...otherPlugins,\n  HeadingPlugin,\n  TocPlugin.configure({\n    options: {\n      topOffset: 80,\n    },\n  }),\n];\n```\n\n```tsx\nconst components = {\n  // ...otherComponents,\n  [KEYS.toc]: TocElement,\n};\n```\n\n- [TocElement](/docs/components/toc-node)\n\n### Scroll container\n\n- If your scrolling element is [EditorContainer](/docs/components/editor), you can skip this step.\n- If your scrolling element is the editor container, pass `useEditorContainerRef()` as the `ref` prop. For example:\n\n```tsx\n// Below <Plate> component\nfunction EditorContainer({ children }: { children: React.ReactNode }) {\n  const containerRef = useEditorContainerRef();\n\n  return <div ref={containerRef}>{children}</div>;\n}\n```\n\n- If your scrolling element is an ancestor of the editor container, pass `useEditorScrollRef()` as the `ref` prop. For example:\n\n```tsx\n// Below <Plate> component\nfunction Layout() {\n  const scrollRef = useEditorScrollRef();\n\n  return (\n    <main ref={scrollRef}>\n      <EditorContainer>\n        <PlateContent />\n      </EditorContainer>\n    </main>\n  );\n}\n```\n\n### Components\n\n- [`TocElement`](/docs/components/toc-node)\n\n## Examples\n\n### Plate UI\n\nRefer to the preview above.\n\n### Plate Plus\n\n<ComponentPreviewPro name=\"toc-pro\" />\n\n## Plugins\n\n### `TocPlugin`\n\nPlugin for generating table of contents.\n\n<API name=\"TocPlugin\">\n<APIOptions>\n  <APIItem name=\"isScroll\" type=\"boolean\" optional>\n    Enable scrolling behavior.\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"topOffset\" type=\"number\" optional>\n    Top offset when scrolling to heading.\n    - **Default:** `80`\n  </APIItem>\n  <APIItem name=\"queryHeading\" type=\"(editor: SlateEditor) => Heading[]\" optional>\n    Custom function to query headings.\n  </APIItem>\n</APIOptions>\n</API>\n\n## Transforms\n\n### `insertToc`\n\nInsert table of contents element.\n\n<API name=\"insertToc\">\n<APIOptions type=\"InsertNodesOptions<SlateEditor>\">\n    Node insertion options.\n</APIOptions>\n</API>\n\n## Hooks\n\n### `useTocElementState`\n\nManage TOC element state.\n\n<API name=\"useTocElementState\">\n<APIReturns>\n  <APIItem name=\"headingList\" type=\"Heading[]\">\n    Document headings array.\n  </APIItem>\n  <APIItem name=\"onContentScroll\" type=\"(el: HTMLElement, id: string, behavior: ScrollBehavior) => void\">\n    Heading scroll handler.\n  </APIItem>\n</APIReturns>\n</API>\n\n### `useTocElement`\n\nHandle TOC element interactions.\n\n<API name=\"useTocElement\">\n\n<APIParameters>\n  <APIItem name=\"onContentScroll\" type=\"(el: HTMLElement, id: string, behavior: ScrollBehavior) => void\">\n    Scroll handler from useTocElementState.\n  </APIItem>\n</APIParameters>\n\n<APIReturns>\n  <APIItem name=\"props\" type=\"object\">\n    Props for TOC element.\n  </APIItem>\n  <APISubList>\n    <APISubListItem parent=\"props\" name=\"onClick\" type=\"(e: React.MouseEvent, item: Heading, behavior: ScrollBehavior) => void\">\n      TOC item click handler.\n    </APISubListItem>\n  </APISubList>\n</APIReturns>\n</API>\n\n### `useTocSideBarState`\n\nManage TOC sidebar state.\n\n<API name=\"useTocSideBarState\">\n<APIParameters>\n  <APIItem name=\"open\" type=\"boolean\" optional>\n    Initial open state.\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"rootMargin\" type=\"string\" optional>\n    Intersection Observer root margin.\n    - **Default:** `'0px 0px 0px 0px'`\n  </APIItem>\n  <APIItem name=\"topOffset\" type=\"number\" optional>\n    Scroll top offset.\n    - **Default:** `0`\n  </APIItem>\n</APIParameters>\n\n<APIReturns>\n  <APIItem name=\"activeContentId\" type=\"string\">\n    Active section ID.\n  </APIItem>\n  <APIItem name=\"headingList\" type=\"Heading[]\">\n    Document headings.\n  </APIItem>\n  <APIItem name=\"mouseInToc\" type=\"boolean\">\n    Mouse over TOC state.\n  </APIItem>\n  <APIItem name=\"open\" type=\"boolean\">\n    Sidebar open state.\n  </APIItem>\n  <APIItem name=\"setIsObserve\" type=\"React.Dispatch<React.SetStateAction<boolean>>\">\n    Set observation state.\n  </APIItem>\n  <APIItem name=\"setMouseInToc\" type=\"React.Dispatch<React.SetStateAction<boolean>>\">\n    Set mouse over state.\n  </APIItem>\n  <APIItem name=\"tocRef\" type=\"React.RefObject<HTMLElement>\">\n    TOC element ref.\n  </APIItem>\n  <APIItem name=\"onContentScroll\" type=\"(options: { id: string; behavior?: ScrollBehavior; el: HTMLElement }) => void\">\n    Content scroll handler.\n  </APIItem>\n</APIReturns>\n</API>\n\n### `useTocSideBar`\n\nThis hook provides props and handlers for the TOC sidebar component.\n\n<API name=\"useTocSideBar\">\n<APIParameters>\n  <APIItem name=\"mouseInToc\" type=\"boolean\">\n    Mouse over TOC state.\n  </APIItem>\n  <APIItem name=\"open\" type=\"boolean\">\n    Sidebar open state.\n  </APIItem>\n  <APIItem name=\"setIsObserve\" type=\"React.Dispatch<React.SetStateAction<boolean>>\">\n    Set observation state.\n  </APIItem>\n  <APIItem name=\"setMouseInToc\" type=\"React.Dispatch<React.SetStateAction<boolean>>\">\n    Set mouse over state.\n  </APIItem>\n  <APIItem name=\"tocRef\" type=\"React.RefObject<HTMLElement>\">\n    TOC element ref.\n  </APIItem>\n  <APIItem name=\"onContentScroll\" type=\"(options: { id: string; behavior?: ScrollBehavior; el: HTMLElement }) => void\">\n    Content scroll handler.\n  </APIItem>\n</APIParameters>\n<APIReturns>\n  <APIItem name=\"navProps\" type=\"object\">\n    Navigation element props.\n  </APIItem>\n  <APISubList type=\"navProps\">\n    <APISubListItem parent=\"navProps\" name=\"ref\" type=\"React.RefObject<HTMLElement>\">\n      TOC element ref.\n    </APISubListItem>\n    <APISubListItem parent=\"navProps\" name=\"onMouseEnter\" type=\"() => void\">\n      Mouse enter handler.\n    </APISubListItem>\n    <APISubListItem parent=\"navProps\" name=\"onMouseLeave\" type=\"(e: React.MouseEvent<HTMLElement, MouseEvent>) => void\">\n      Mouse leave handler.\n    </APISubListItem>\n  </APISubList>\n  <APISubListItem parent=\"navProps\" name=\"onContentClick\" type=\"(e: React.MouseEvent<HTMLElement, MouseEvent>, item: Heading, behavior?: ScrollBehavior) => void\">\n    TOC item click handler.\n  </APISubListItem>\n</APIReturns>\n</API>\n",
      "type": "registry:file",
      "target": "content/docs/plate/toc.mdx"
    }
  ]
}