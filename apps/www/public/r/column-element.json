{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "column-element",
  "type": "registry:ui",
  "title": "Column Element",
  "description": "A resizable column component for layout.",
  "dependencies": [
    "@udecode/plate-layout",
    "@udecode/plate-resizable"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/resizable"
  ],
  "files": [
    {
      "path": "src/registry/ui/column-element.tsx",
      "content": "'use client';\n\nimport React from 'react';\n\nimport type { TColumnElement } from '@udecode/plate-layout';\nimport type { PlateElementProps } from '@udecode/plate/react';\n\nimport { cn, useComposedRef } from '@udecode/cn';\nimport { PathApi } from '@udecode/plate';\nimport { useDraggable, useDropLine } from '@udecode/plate-dnd';\nimport { ResizableProvider } from '@udecode/plate-resizable';\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\nimport {\n  PlateElement,\n  usePluginOption,\n  useReadOnly,\n  withHOC,\n} from '@udecode/plate/react';\nimport { GripHorizontal } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\n\nexport const ColumnElement = withHOC(\n  ResizableProvider,\n  function ColumnElement(props: PlateElementProps<TColumnElement>) {\n    const { width } = props.element;\n    const readOnly = useReadOnly();\n    const isSelectionAreaVisible = usePluginOption(\n      BlockSelectionPlugin,\n      'isSelectionAreaVisible'\n    );\n\n    const { isDragging, previewRef, handleRef } = useDraggable({\n      element: props.element,\n      orientation: 'horizontal',\n      type: 'column',\n      canDropNode: ({ dragEntry, dropEntry }) =>\n        PathApi.equals(\n          PathApi.parent(dragEntry[1]),\n          PathApi.parent(dropEntry[1])\n        ),\n    });\n\n    return (\n      <div className=\"group/column relative\" style={{ width: width ?? '100%' }}>\n        {!readOnly && !isSelectionAreaVisible && (\n          <div\n            ref={handleRef}\n            className={cn(\n              'absolute top-2 left-1/2 z-50 -translate-x-1/2 -translate-y-1/2',\n              'pointer-events-auto flex items-center',\n              'opacity-0 transition-opacity group-hover/column:opacity-100'\n            )}\n          >\n            <ColumnDragHandle />\n          </div>\n        )}\n\n        <PlateElement\n          {...props}\n          ref={useComposedRef(props.ref, previewRef)}\n          className=\"h-full px-2 pt-2 group-first/column:pl-0 group-last/column:pr-0\"\n        >\n          <div\n            className={cn(\n              'relative h-full border border-transparent p-1.5',\n              !readOnly && 'rounded-lg border-dashed border-border',\n              isDragging && 'opacity-50'\n            )}\n          >\n            {props.children}\n\n            {!readOnly && !isSelectionAreaVisible && <DropLine />}\n          </div>\n        </PlateElement>\n      </div>\n    );\n  }\n);\n\nconst ColumnDragHandle = React.memo(function ColumnDragHandle() {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button size=\"none\" variant=\"ghost\" className=\"h-5 px-1\">\n            <GripHorizontal\n              className=\"size-4 text-muted-foreground\"\n              onClick={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n              }}\n            />\n          </Button>\n        </TooltipTrigger>\n\n        <TooltipContent>Drag to move column</TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n});\n\nfunction DropLine() {\n  const { dropLine } = useDropLine({ orientation: 'horizontal' });\n\n  if (!dropLine) return null;\n\n  return (\n    <div\n      className={cn(\n        'slate-dropLine',\n        'absolute bg-brand/50',\n        dropLine === 'left' &&\n          'inset-y-0 left-[-10.5px] w-1 group-first/column:-left-1',\n        dropLine === 'right' &&\n          'inset-y-0 right-[-11px] w-1 group-last/column:-right-1'\n      )}\n    />\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/ui/column-element-static.tsx",
      "content": "import type { TColumnElement } from '@udecode/plate-layout';\n\nimport { type SlateElementProps, SlateElement } from '@udecode/plate';\n\nexport function ColumnElementStatic(props: SlateElementProps<TColumnElement>) {\n  const { width } = props.element;\n\n  return (\n    <div className=\"group/column relative\" style={{ width: width ?? '100%' }}>\n      <SlateElement\n        className=\"h-full px-2 pt-2 group-first/column:pl-0 group-last/column:pr-0\"\n        {...props}\n      >\n        <div className=\"relative h-full border border-transparent p-1.5\">\n          {props.children}\n        </div>\n      </SlateElement>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "docs": [
      {
        "route": "/docs/column"
      },
      {
        "route": "https://pro.platejs.org/docs/components/column-element"
      }
    ],
    "examples": [
      "column-demo"
    ]
  }
}