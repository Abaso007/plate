{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "-plugins-functionality-combobox-combobox-docs",
  "type": "registry:file",
  "title": "Combobox",
  "description": "Documentation for Combobox",
  "files": [
    {
      "path": "../../docs/(plugins)/(functionality)/(combobox)/combobox.mdx",
      "content": "---\ntitle: Combobox\ndocs:\n  - route: /docs/mention\n    title: Mention Plugin\n  - route: /docs/slash-command\n    title: Slash Command Plugin\n  - route: /docs/emoji\n    title: Emoji Plugin\n---\n\nThe `TriggerComboboxPluginOptions` configures your plugin to insert a combobox input element when the user types a specified trigger character.\n\nFor example:\n- [Mention](/docs/mention) plugin inserts a combobox when typing `@`\n- [Slash Command](/docs/slash-command) plugin activates with `/`\n- [Emoji](/docs/emoji) plugin shows suggestions with `:`\n\n## Usage\n\n<Steps>\n\n### Create an input plugin for the combobox\n\n```ts\nconst ComboboxInputPlugin = createPlatePlugin({\n  key: 'combobox_input',\n  node: {\n    isElement: true,\n    isInline: true,\n    isVoid: true,\n  },\n});\n```\n\n### Create your main plugin with `withTriggerCombobox`:\n\n```ts\nconst MyPlugin = createPlatePlugin({\n  key: 'my_plugin',\n  // Plugin node options\n  node: {\n    isElement: true,\n    isInline: true,\n    isVoid: true,\n  },\n  // Combobox options\n  options: {\n    createComboboxInput: (trigger) => ({\n      children: [{ text: '' }],\n      trigger,\n      type: ComboboxInputPlugin.key,\n    }),\n    trigger: '@',\n    triggerPreviousCharPattern: /^\\s?$/,\n  },\n  // Include the input plugin\n  plugins: [ComboboxInputPlugin],\n}).overrideEditor(withTriggerCombobox);\n```\n\n### Use the input plugin in your main plugin\n\nThe input element component can be built using [Inline Combobox](/docs/components/inline-combobox).\n\n</Steps>\n\n## Examples \n\n<ComponentPreview name=\"mention-demo\" />\n<ComponentPreview name=\"slash-command-demo\" />\n<ComponentPreview name=\"emoji-demo\" />\n\n## Types\n\n### `TriggerComboboxPluginOptions`\n\n<API name=\"TriggerComboboxPluginOptions\">\n<APIAttributes>\n  <APIItem name=\"createComboboxInput\" type=\"(trigger: string) => TElement\">\n    Function to create the input node when trigger is activated.\n  </APIItem>\n  <APIItem name=\"trigger\" type=\"RegExp | string[] | string\">\n    Character(s) that trigger the combobox. Can be:\n    - A single character (e.g. '@')\n    - An array of characters\n    - A regular expression\n  </APIItem>\n  <APIItem name=\"triggerPreviousCharPattern\" type=\"RegExp\">\n    Pattern to match the character before trigger.\n    - **Example:** `/^\\s?$/` matches start of line or space\n  </APIItem>\n  <APIItem name=\"triggerQuery\" type=\"(editor: SlateEditor) => boolean\" optional>\n    Custom query function to control when trigger is active.\n  </APIItem>\n</APIAttributes>\n</API>\n\n## Hooks\n\n### `useComboboxInput`\n\nHook for managing combobox input behavior and keyboard interactions.\n\n<API name=\"useComboboxInput\">\n<APIOptions type=\"UseComboboxInputOptions\">\n  <APIItem name=\"ref\" type=\"RefObject<HTMLElement>\">\n    Reference to the input element.\n  </APIItem>\n  <APIItem name=\"autoFocus\" type=\"boolean\" optional>\n    Auto focus the input when mounted.\n\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"cancelInputOnArrowLeftRight\" type=\"boolean\" optional>\n    Cancel on arrow keys.\n\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"cancelInputOnBackspace\" type=\"boolean\" optional>\n    Cancel on backspace at start.\n\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"cancelInputOnBlur\" type=\"boolean\" optional>\n    Cancel on blur.\n\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"cancelInputOnDeselect\" type=\"boolean\" optional>\n    Cancel when deselected.\n\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"cancelInputOnEscape\" type=\"boolean\" optional>\n    Cancel on escape key.\n\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"cursorState\" type=\"ComboboxInputCursorState\" optional>\n    Current cursor position state.\n  </APIItem>\n  <APIItem name=\"forwardUndoRedoToEditor\" type=\"boolean\" optional>\n    Forward undo/redo to editor.\n\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"onCancelInput\" type=\"(cause: CancelComboboxInputCause) => void\" optional>\n    Callback when input is cancelled.\n  </APIItem>\n</APIOptions>\n\n<APIReturns type=\"object\">\n  <APIItem name=\"cancelInput\" type=\"(cause?: CancelComboboxInputCause, focusEditor?: boolean) => void\">\n    Function to cancel the input.\n  </APIItem>\n  <APIItem name=\"props\" type=\"object\">\n    Props for the input element.\n    <APISubList>\n      <APISubListItem parent=\"props\" name=\"onBlur\" type=\"EventHandler\">\n        Blur event handler.\n      </APISubListItem>\n      <APISubListItem parent=\"props\" name=\"onKeyDown\" type=\"EventHandler\">\n        Keydown event handler.\n      </APISubListItem>\n    </APISubList>\n  </APIItem>\n  <APIItem name=\"removeInput\" type=\"(focusEditor?: boolean) => void\">\n    Function to remove the input node.\n  </APIItem>\n</APIReturns>\n</API>\n\nExample:\n\n```tsx\nconst MyCombobox = () => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const cursorState = useHTMLInputCursorState(inputRef);\n\n  const { props: inputProps, removeInput } = useComboboxInput({\n    ref: inputRef,\n    cursorState,\n    cancelInputOnBlur: false,\n    onCancelInput: (cause) => {\n      if (cause !== 'backspace') {\n        insertText(editor, trigger + value);\n      }\n      if (cause === 'arrowLeft' || cause === 'arrowRight') {\n        moveSelection(editor, {\n          distance: 1,\n          reverse: cause === 'arrowLeft',\n        });\n      }\n    },\n  });\n\n  return <input ref={inputRef} {...inputProps} />;\n};\n```\n\n### `useHTMLInputCursorState`\n\nHook for tracking cursor position in an HTML input element.\n\n<API name=\"useHTMLInputCursorState\">\n<APIParameters>\n  <APIItem name=\"ref\" type=\"RefObject<HTMLInputElement>\">\n    Reference to the input element to track.\n  </APIItem>\n</APIParameters>\n\n<APIReturns type=\"ComboboxInputCursorState\">\n  <APIItem name=\"atStart\" type=\"boolean\">\n    Whether cursor is at the start of input.\n  </APIItem>\n  <APIItem name=\"atEnd\" type=\"boolean\">\n    Whether cursor is at the end of input.\n  </APIItem>\n</APIReturns>\n</API>",
      "type": "registry:file",
      "target": "content/docs/plate/(plugins)/(functionality)/(combobox)/combobox.mdx"
    }
  ]
}