{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-menu",
  "type": "registry:ui",
  "title": "AI Menu",
  "description": "A menu for AI-powered content generation and insertion.",
  "dependencies": [
    "@udecode/cn",
    "@udecode/plate-ai",
    "@udecode/plate-basic-marks",
    "@udecode/plate-block-quote",
    "@udecode/plate-callout",
    "@udecode/plate-code-block",
    "@udecode/plate-date",
    "@udecode/plate-font",
    "@udecode/plate-heading",
    "@udecode/plate-highlight",
    "@udecode/plate-horizontal-rule",
    "@udecode/plate-indent",
    "@udecode/plate-list",
    "@udecode/plate-kbd",
    "@udecode/plate-layout",
    "@udecode/plate-link",
    "@udecode/plate-math",
    "@udecode/plate-media",
    "@udecode/plate-mention",
    "@udecode/plate-table",
    "@udecode/plate-markdown",
    "@udecode/plate-selection",
    "ai",
    "cmdk",
    "@faker-js/faker"
  ],
  "registryDependencies": [
    "command",
    "popover",
    "https://platejs.org/r/use-chat",
    "https://platejs.org/r/markdown-plugin",
    "https://platejs.org/r/editor",
    "https://platejs.org/r/ai-node",
    "https://platejs.org/r/blockquote-node",
    "https://platejs.org/r/callout-node",
    "https://platejs.org/r/code-block-node",
    "https://platejs.org/r/code-node",
    "https://platejs.org/r/column-node",
    "https://platejs.org/r/date-node",
    "https://platejs.org/r/equation-node",
    "https://platejs.org/r/heading-node",
    "https://platejs.org/r/highlight-node",
    "https://platejs.org/r/hr-node",
    "https://platejs.org/r/kbd-node",
    "https://platejs.org/r/link-node",
    "https://platejs.org/r/list-todo",
    "https://platejs.org/r/media-audio-node",
    "https://platejs.org/r/media-file-node",
    "https://platejs.org/r/media-image-node",
    "https://platejs.org/r/media-video-node",
    "https://platejs.org/r/mention-node",
    "https://platejs.org/r/paragraph-node",
    "https://platejs.org/r/table-node",
    "https://platejs.org/r/toc-node"
  ],
  "files": [
    {
      "path": "src/registry/ui/ai-menu.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport {\n  type NodeEntry,\n  type SlateEditor,\n  isHotkey,\n  NodeApi,\n} from '@udecode/plate';\nimport {\n  AIChatPlugin,\n  AIPlugin,\n  useEditorChat,\n  useLastAssistantMessage,\n} from '@udecode/plate-ai/react';\nimport {\n  BlockSelectionPlugin,\n  useIsSelecting,\n} from '@udecode/plate-selection/react';\nimport {\n  useEditorPlugin,\n  useHotkeys,\n  usePluginOption,\n} from '@udecode/plate/react';\nimport { type PlateEditor, useEditorRef } from '@udecode/plate/react';\nimport { Command as CommandPrimitive } from 'cmdk';\nimport {\n  Album,\n  BadgeHelp,\n  BookOpenCheck,\n  Check,\n  CornerUpLeft,\n  FeatherIcon,\n  ListEnd,\n  ListMinus,\n  ListPlus,\n  Loader2Icon,\n  PauseIcon,\n  PenLine,\n  SmileIcon,\n  Wand,\n  X,\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Command,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport {\n  Popover,\n  PopoverAnchor,\n  PopoverContent,\n} from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport { useChat } from '@/registry/components/editor/use-chat';\n\nimport { AIChatEditor } from './ai-chat-editor';\n\nexport function AIMenu() {\n  const { api, editor } = useEditorPlugin(AIChatPlugin);\n  const open = usePluginOption(AIChatPlugin, 'open');\n  const mode = usePluginOption(AIChatPlugin, 'mode');\n  const streaming = usePluginOption(AIChatPlugin, 'streaming');\n  const isSelecting = useIsSelecting();\n\n  const [value, setValue] = React.useState('');\n\n  const chat = useChat();\n\n  const { input, messages, setInput, status } = chat;\n  const [anchorElement, setAnchorElement] = React.useState<HTMLElement | null>(\n    null\n  );\n\n  const content = useLastAssistantMessage()?.content;\n\n  React.useEffect(() => {\n    if (streaming) {\n      const anchor = api.aiChat.node({ anchor: true });\n      setTimeout(() => {\n        const anchorDom = editor.api.toDOMNode(anchor![0])!;\n        setAnchorElement(anchorDom);\n      }, 0);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [streaming]);\n\n  const setOpen = (open: boolean) => {\n    if (open) {\n      api.aiChat.show();\n    } else {\n      api.aiChat.hide();\n    }\n  };\n\n  const show = (anchorElement: HTMLElement) => {\n    setAnchorElement(anchorElement);\n    setOpen(true);\n  };\n\n  useEditorChat({\n    chat,\n    onOpenBlockSelection: (blocks: NodeEntry[]) => {\n      show(editor.api.toDOMNode(blocks.at(-1)![0])!);\n    },\n    onOpenChange: (open) => {\n      if (!open) {\n        setAnchorElement(null);\n        setInput('');\n      }\n    },\n    onOpenCursor: () => {\n      const [ancestor] = editor.api.block({ highest: true })!;\n\n      if (!editor.api.isAt({ end: true }) && !editor.api.isEmpty(ancestor)) {\n        editor\n          .getApi(BlockSelectionPlugin)\n          .blockSelection.set(ancestor.id as string);\n      }\n\n      show(editor.api.toDOMNode(ancestor)!);\n    },\n    onOpenSelection: () => {\n      show(editor.api.toDOMNode(editor.api.blocks().at(-1)![0])!);\n    },\n  });\n\n  useHotkeys(\n    'meta+j',\n    () => {\n      api.aiChat.show();\n    },\n    { enableOnContentEditable: true, enableOnFormTags: true }\n  );\n\n  useHotkeys('esc', () => {\n    api.aiChat.stop();\n\n    // remove when you implement the route /api/ai/command\n    chat._abortFakeStream();\n  });\n\n  const isLoading = status === 'streaming' || status === 'submitted';\n\n  if (isLoading && mode === 'insert') {\n    return null;\n  }\n\n  return (\n    <Popover open={open} onOpenChange={setOpen} modal={false}>\n      <PopoverAnchor virtualRef={{ current: anchorElement! }} />\n\n      <PopoverContent\n        className=\"border-none bg-transparent p-0 shadow-none\"\n        style={{\n          width: anchorElement?.offsetWidth,\n        }}\n        onEscapeKeyDown={(e) => {\n          e.preventDefault();\n\n          api.aiChat.hide();\n        }}\n        align=\"center\"\n        side=\"bottom\"\n      >\n        <Command\n          className=\"w-full rounded-lg border shadow-md\"\n          value={value}\n          onValueChange={setValue}\n        >\n          {mode === 'chat' && isSelecting && content && (\n            <AIChatEditor content={content} />\n          )}\n\n          {isLoading ? (\n            <div className=\"flex grow items-center gap-2 p-2 text-sm text-muted-foreground select-none\">\n              <Loader2Icon className=\"size-4 animate-spin\" />\n              {messages.length > 1 ? 'Editing...' : 'Thinking...'}\n            </div>\n          ) : (\n            <CommandPrimitive.Input\n              className={cn(\n                'flex h-9 w-full min-w-0 border-input bg-transparent px-3 py-1 text-base transition-[color,box-shadow] outline-none placeholder:text-muted-foreground md:text-sm dark:bg-input/30',\n                'aria-invalid:border-destructive aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40',\n                'border-b focus-visible:ring-transparent'\n              )}\n              value={input}\n              onKeyDown={(e) => {\n                if (isHotkey('backspace')(e) && input.length === 0) {\n                  e.preventDefault();\n                  api.aiChat.hide();\n                }\n                if (isHotkey('enter')(e) && !e.shiftKey && !value) {\n                  e.preventDefault();\n                  void api.aiChat.submit();\n                }\n              }}\n              onValueChange={setInput}\n              placeholder=\"Ask AI anything...\"\n              data-plate-focus\n              autoFocus\n            />\n          )}\n\n          {!isLoading && (\n            <CommandList>\n              <AIMenuItems setValue={setValue} />\n            </CommandList>\n          )}\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\ntype EditorChatState =\n  | 'cursorCommand'\n  | 'cursorSuggestion'\n  | 'selectionCommand'\n  | 'selectionSuggestion';\n\nconst aiChatItems = {\n  accept: {\n    icon: <Check />,\n    label: 'Accept',\n    value: 'accept',\n    onSelect: ({ editor }) => {\n      editor.getTransforms(AIChatPlugin).aiChat.accept();\n      editor.tf.focus({ edge: 'end' });\n    },\n  },\n  continueWrite: {\n    icon: <PenLine />,\n    label: 'Continue writing',\n    value: 'continueWrite',\n    onSelect: ({ editor }) => {\n      const ancestorNode = editor.api.block({ highest: true });\n\n      if (!ancestorNode) return;\n\n      const isEmpty = NodeApi.string(ancestorNode[0]).trim().length === 0;\n\n      void editor.getApi(AIChatPlugin).aiChat.submit({\n        mode: 'insert',\n        prompt: isEmpty\n          ? `<Document>\n{editor}\n</Document>\nStart writing a new paragraph AFTER <Document> ONLY ONE SENTENCE`\n          : 'Continue writing AFTER <Block> ONLY ONE SENTENCE. DONT REPEAT THE TEXT.',\n      });\n    },\n  },\n  discard: {\n    icon: <X />,\n    label: 'Discard',\n    shortcut: 'Escape',\n    value: 'discard',\n    onSelect: ({ editor }) => {\n      editor.getTransforms(AIPlugin).ai.undo();\n      editor.getApi(AIChatPlugin).aiChat.hide();\n    },\n  },\n  emojify: {\n    icon: <SmileIcon />,\n    label: 'Emojify',\n    value: 'emojify',\n    onSelect: ({ editor }) => {\n      void editor.getApi(AIChatPlugin).aiChat.submit({\n        prompt: 'Emojify',\n      });\n    },\n  },\n  explain: {\n    icon: <BadgeHelp />,\n    label: 'Explain',\n    value: 'explain',\n    onSelect: ({ editor }) => {\n      void editor.getApi(AIChatPlugin).aiChat.submit({\n        prompt: {\n          default: 'Explain {editor}',\n          selecting: 'Explain',\n        },\n      });\n    },\n  },\n  fixSpelling: {\n    icon: <Check />,\n    label: 'Fix spelling & grammar',\n    value: 'fixSpelling',\n    onSelect: ({ editor }) => {\n      void editor.getApi(AIChatPlugin).aiChat.submit({\n        prompt: 'Fix spelling and grammar',\n      });\n    },\n  },\n  generateMarkdownSample: {\n    icon: <BookOpenCheck />,\n    label: 'Generate Markdown sample',\n    value: 'generateMarkdownSample',\n    onSelect: ({ editor }) => {\n      void editor.getApi(AIChatPlugin).aiChat.submit({\n        prompt: 'Generate a markdown sample',\n      });\n    },\n  },\n  generateMdxSample: {\n    icon: <BookOpenCheck />,\n    label: 'Generate MDX sample',\n    value: 'generateMdxSample',\n    onSelect: ({ editor }) => {\n      void editor.getApi(AIChatPlugin).aiChat.submit({\n        prompt: 'Generate a mdx sample',\n      });\n    },\n  },\n  improveWriting: {\n    icon: <Wand />,\n    label: 'Improve writing',\n    value: 'improveWriting',\n    onSelect: ({ editor }) => {\n      void editor.getApi(AIChatPlugin).aiChat.submit({\n        prompt: 'Improve the writing',\n      });\n    },\n  },\n  insertBelow: {\n    icon: <ListEnd />,\n    label: 'Insert below',\n    value: 'insertBelow',\n    onSelect: ({ aiEditor, editor }) => {\n      void editor.getTransforms(AIChatPlugin).aiChat.insertBelow(aiEditor);\n    },\n  },\n  makeLonger: {\n    icon: <ListPlus />,\n    label: 'Make longer',\n    value: 'makeLonger',\n    onSelect: ({ editor }) => {\n      void editor.getApi(AIChatPlugin).aiChat.submit({\n        prompt: 'Make longer',\n      });\n    },\n  },\n  makeShorter: {\n    icon: <ListMinus />,\n    label: 'Make shorter',\n    value: 'makeShorter',\n    onSelect: ({ editor }) => {\n      void editor.getApi(AIChatPlugin).aiChat.submit({\n        prompt: 'Make shorter',\n      });\n    },\n  },\n  replace: {\n    icon: <Check />,\n    label: 'Replace selection',\n    value: 'replace',\n    onSelect: ({ aiEditor, editor }) => {\n      void editor.getTransforms(AIChatPlugin).aiChat.replaceSelection(aiEditor);\n    },\n  },\n  simplifyLanguage: {\n    icon: <FeatherIcon />,\n    label: 'Simplify language',\n    value: 'simplifyLanguage',\n    onSelect: ({ editor }) => {\n      void editor.getApi(AIChatPlugin).aiChat.submit({\n        prompt: 'Simplify the language',\n      });\n    },\n  },\n  summarize: {\n    icon: <Album />,\n    label: 'Add a summary',\n    value: 'summarize',\n    onSelect: ({ editor }) => {\n      void editor.getApi(AIChatPlugin).aiChat.submit({\n        mode: 'insert',\n        prompt: {\n          default: 'Summarize {editor}',\n          selecting: 'Summarize',\n        },\n      });\n    },\n  },\n  tryAgain: {\n    icon: <CornerUpLeft />,\n    label: 'Try again',\n    value: 'tryAgain',\n    onSelect: ({ editor }) => {\n      void editor.getApi(AIChatPlugin).aiChat.reload();\n    },\n  },\n} satisfies Record<\n  string,\n  {\n    icon: React.ReactNode;\n    label: string;\n    value: string;\n    component?: React.ComponentType<{ menuState: EditorChatState }>;\n    filterItems?: boolean;\n    items?: { label: string; value: string }[];\n    shortcut?: string;\n    onSelect?: ({\n      aiEditor,\n      editor,\n    }: {\n      aiEditor: SlateEditor;\n      editor: PlateEditor;\n    }) => void;\n  }\n>;\n\nconst menuStateItems: Record<\n  EditorChatState,\n  {\n    items: (typeof aiChatItems)[keyof typeof aiChatItems][];\n    heading?: string;\n  }[]\n> = {\n  cursorCommand: [\n    {\n      items: [\n        aiChatItems.generateMdxSample,\n        aiChatItems.generateMarkdownSample,\n        aiChatItems.continueWrite,\n        aiChatItems.summarize,\n        aiChatItems.explain,\n      ],\n    },\n  ],\n  cursorSuggestion: [\n    {\n      items: [aiChatItems.accept, aiChatItems.discard, aiChatItems.tryAgain],\n    },\n  ],\n  selectionCommand: [\n    {\n      items: [\n        aiChatItems.improveWriting,\n        aiChatItems.emojify,\n        aiChatItems.makeLonger,\n        aiChatItems.makeShorter,\n        aiChatItems.fixSpelling,\n        aiChatItems.simplifyLanguage,\n      ],\n    },\n  ],\n  selectionSuggestion: [\n    {\n      items: [\n        aiChatItems.replace,\n        aiChatItems.insertBelow,\n        aiChatItems.discard,\n        aiChatItems.tryAgain,\n      ],\n    },\n  ],\n};\n\nexport const AIMenuItems = ({\n  setValue,\n}: {\n  setValue: (value: string) => void;\n}) => {\n  const editor = useEditorRef();\n  const { messages } = usePluginOption(AIChatPlugin, 'chat');\n  const aiEditor = usePluginOption(AIChatPlugin, 'aiEditor')!;\n  const isSelecting = useIsSelecting();\n\n  const menuState = React.useMemo(() => {\n    if (messages && messages.length > 0) {\n      return isSelecting ? 'selectionSuggestion' : 'cursorSuggestion';\n    }\n\n    return isSelecting ? 'selectionCommand' : 'cursorCommand';\n  }, [isSelecting, messages]);\n\n  const menuGroups = React.useMemo(() => {\n    const items = menuStateItems[menuState];\n\n    return items;\n  }, [menuState]);\n\n  React.useEffect(() => {\n    if (menuGroups.length > 0 && menuGroups[0].items.length > 0) {\n      setValue(menuGroups[0].items[0].value);\n    }\n  }, [menuGroups, setValue]);\n\n  return (\n    <>\n      {menuGroups.map((group, index) => (\n        <CommandGroup key={index} heading={group.heading}>\n          {group.items.map((menuItem) => (\n            <CommandItem\n              key={menuItem.value}\n              className=\"[&_svg]:text-muted-foreground\"\n              value={menuItem.value}\n              onSelect={() => {\n                menuItem.onSelect?.({\n                  aiEditor,\n                  editor: editor,\n                });\n              }}\n            >\n              {menuItem.icon}\n              <span>{menuItem.label}</span>\n            </CommandItem>\n          ))}\n        </CommandGroup>\n      ))}\n    </>\n  );\n};\n\nexport function AILoadingBar() {\n  const chat = usePluginOption(AIChatPlugin, 'chat');\n  const mode = usePluginOption(AIChatPlugin, 'mode');\n\n  const { status } = chat;\n\n  const { api } = useEditorPlugin(AIChatPlugin);\n\n  const isLoading = status === 'streaming' || status === 'submitted';\n\n  const visible = isLoading && mode === 'insert';\n\n  if (!visible) return null;\n\n  return (\n    <div\n      className={cn(\n        'absolute bottom-4 left-1/2 z-10 flex -translate-x-1/2 items-center gap-3 rounded-md border border-border bg-muted px-3 py-1.5 text-sm text-muted-foreground shadow-md transition-all duration-300'\n      )}\n    >\n      <span className=\"h-4 w-4 animate-spin rounded-full border-2 border-muted-foreground border-t-transparent\" />\n      <span>{status === 'submitted' ? 'Thinking...' : 'Writing...'}</span>\n      <Button\n        size=\"sm\"\n        variant=\"ghost\"\n        className=\"flex items-center gap-1 text-xs\"\n        onClick={() => api.aiChat.stop()}\n      >\n        <PauseIcon className=\"h-4 w-4\" />\n        Stop\n        <kbd className=\"ml-1 rounded bg-border px-1 font-mono text-[10px] text-muted-foreground shadow-sm\">\n          Esc\n        </kbd>\n      </Button>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/ui/ai-chat-editor.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport { withProps } from '@udecode/cn';\nimport { BaseParagraphPlugin, SlateLeaf } from '@udecode/plate';\nimport { useAIChatEditor } from '@udecode/plate-ai/react';\nimport {\n  BaseBoldPlugin,\n  BaseCodePlugin,\n  BaseItalicPlugin,\n  BaseStrikethroughPlugin,\n  BaseSubscriptPlugin,\n  BaseSuperscriptPlugin,\n  BaseUnderlinePlugin,\n} from '@udecode/plate-basic-marks';\nimport { BaseBlockquotePlugin } from '@udecode/plate-block-quote';\nimport { BaseCalloutPlugin } from '@udecode/plate-callout';\nimport {\n  BaseCodeBlockPlugin,\n  BaseCodeLinePlugin,\n  BaseCodeSyntaxPlugin,\n} from '@udecode/plate-code-block';\nimport { BaseDatePlugin } from '@udecode/plate-date';\nimport {\n  BaseFontBackgroundColorPlugin,\n  BaseFontColorPlugin,\n  BaseFontFamilyPlugin,\n  BaseFontSizePlugin,\n  BaseFontWeightPlugin,\n} from '@udecode/plate-font';\nimport {\n  BaseHeadingPlugin,\n  BaseTocPlugin,\n  HEADING_KEYS,\n} from '@udecode/plate-heading';\nimport { BaseHighlightPlugin } from '@udecode/plate-highlight';\nimport { BaseHorizontalRulePlugin } from '@udecode/plate-horizontal-rule';\nimport { BaseIndentPlugin } from '@udecode/plate-indent';\nimport { BaseKbdPlugin } from '@udecode/plate-kbd';\nimport { BaseColumnItemPlugin, BaseColumnPlugin } from '@udecode/plate-layout';\nimport { BaseLinkPlugin } from '@udecode/plate-link';\nimport { BaseListPlugin } from '@udecode/plate-list';\nimport {\n  BaseEquationPlugin,\n  BaseInlineEquationPlugin,\n} from '@udecode/plate-math';\nimport {\n  BaseAudioPlugin,\n  BaseFilePlugin,\n  BaseImagePlugin,\n  BaseVideoPlugin,\n} from '@udecode/plate-media';\nimport { BaseMentionPlugin } from '@udecode/plate-mention';\nimport {\n  BaseTableCellHeaderPlugin,\n  BaseTableCellPlugin,\n  BaseTablePlugin,\n  BaseTableRowPlugin,\n} from '@udecode/plate-table';\nimport { usePlateEditor } from '@udecode/plate/react';\nimport { all, createLowlight } from 'lowlight';\n\nimport { markdownPlugin } from '@/registry/components/editor/plugins/markdown-plugin';\nimport { TodoLiStatic, TodoMarkerStatic } from '@/registry/ui/list-todo-static';\n\nimport { BlockquoteElementStatic } from './blockquote-node-static';\nimport { CalloutElementStatic } from './callout-node-static';\nimport {\n  CodeBlockElementStatic,\n  CodeLineElementStatic,\n  CodeSyntaxLeafStatic,\n} from './code-block-node-static';\nimport { CodeLeafStatic } from './code-node-static';\nimport {\n  ColumnElementStatic,\n  ColumnGroupElementStatic,\n} from './column-node-static';\nimport { DateElement } from './date-node';\nimport { EditorStatic } from './editor-static';\nimport {\n  EquationElementStatic,\n  InlineEquationElementStatic,\n} from './equation-node-static';\nimport { HeadingElementStatic } from './heading-node-static';\nimport { HighlightLeafStatic } from './highlight-node-static';\nimport { HrElementStatic } from './hr-node-static';\nimport { KbdLeaf } from './kbd-node';\nimport { LinkElementStatic } from './link-node-static';\nimport { AudioElementStatic } from './media-audio-node-static';\nimport { FileElementStatic } from './media-file-node-static';\nimport { ImageElementStatic } from './media-image-node-static';\nimport { VideoElementStatic } from './media-video-node-static';\nimport { MentionElementStatic } from './mention-node-static';\nimport { ParagraphElementStatic } from './paragraph-node-static';\nimport {\n  TableCellElementStatic,\n  TableCellHeaderStaticElement,\n  TableElementStatic,\n  TableRowElementStatic,\n} from './table-node-static';\nimport { TocElementStatic } from './toc-node-static';\n\nconst components = {\n  [BaseAudioPlugin.key]: AudioElementStatic,\n  [BaseBlockquotePlugin.key]: BlockquoteElementStatic,\n  [BaseBoldPlugin.key]: withProps(SlateLeaf, { as: 'strong' }),\n  [BaseCalloutPlugin.key]: CalloutElementStatic,\n  [BaseCodeBlockPlugin.key]: CodeBlockElementStatic,\n  [BaseCodeLinePlugin.key]: CodeLineElementStatic,\n  [BaseCodePlugin.key]: CodeLeafStatic,\n  [BaseCodeSyntaxPlugin.key]: CodeSyntaxLeafStatic,\n  [BaseColumnItemPlugin.key]: ColumnElementStatic,\n  [BaseColumnPlugin.key]: ColumnGroupElementStatic,\n  [BaseDatePlugin.key]: DateElement,\n  [BaseEquationPlugin.key]: EquationElementStatic,\n  [BaseFilePlugin.key]: FileElementStatic,\n  [BaseHighlightPlugin.key]: HighlightLeafStatic,\n  [BaseHorizontalRulePlugin.key]: HrElementStatic,\n  [BaseImagePlugin.key]: ImageElementStatic,\n  [BaseInlineEquationPlugin.key]: InlineEquationElementStatic,\n  [BaseItalicPlugin.key]: withProps(SlateLeaf, { as: 'em' }),\n  [BaseKbdPlugin.key]: KbdLeaf,\n  [BaseLinkPlugin.key]: LinkElementStatic,\n  [BaseMentionPlugin.key]: MentionElementStatic,\n  [BaseParagraphPlugin.key]: ParagraphElementStatic,\n  [BaseStrikethroughPlugin.key]: withProps(SlateLeaf, { as: 's' }),\n  [BaseSubscriptPlugin.key]: withProps(SlateLeaf, { as: 'sub' }),\n  [BaseSuperscriptPlugin.key]: withProps(SlateLeaf, { as: 'sup' }),\n  [BaseTableCellHeaderPlugin.key]: TableCellHeaderStaticElement,\n  [BaseTableCellPlugin.key]: TableCellElementStatic,\n  [BaseTablePlugin.key]: TableElementStatic,\n  [BaseTableRowPlugin.key]: TableRowElementStatic,\n  [BaseTocPlugin.key]: TocElementStatic,\n  [BaseUnderlinePlugin.key]: withProps(SlateLeaf, { as: 'u' }),\n\n  [BaseVideoPlugin.key]: VideoElementStatic,\n  [HEADING_KEYS.h1]: withProps(HeadingElementStatic, { variant: 'h1' }),\n\n  [HEADING_KEYS.h2]: withProps(HeadingElementStatic, { variant: 'h2' }),\n  [HEADING_KEYS.h3]: withProps(HeadingElementStatic, { variant: 'h3' }),\n\n  // [BaseCommentsPlugin.key]: CommentLeafStatic\n  // [BaseTogglePlugin.key]: ToggleElementStatic\n};\nconst lowlight = createLowlight(all);\n\nconst plugins = [\n  BaseColumnItemPlugin,\n  BaseColumnPlugin,\n  BaseBlockquotePlugin,\n  BaseSubscriptPlugin,\n  BaseSuperscriptPlugin,\n  BaseImagePlugin,\n  BaseKbdPlugin,\n  BaseBoldPlugin,\n  BaseCodeBlockPlugin.configure({ options: { lowlight } }),\n  BaseDatePlugin,\n  BaseEquationPlugin,\n  BaseInlineEquationPlugin,\n  BaseCodePlugin,\n  BaseItalicPlugin,\n  BaseStrikethroughPlugin,\n  BaseUnderlinePlugin,\n  BaseFontColorPlugin,\n  BaseFontSizePlugin,\n  BaseFontFamilyPlugin,\n  BaseFontWeightPlugin,\n  BaseFontBackgroundColorPlugin,\n  BaseHeadingPlugin,\n  BaseHorizontalRulePlugin,\n  BaseTablePlugin,\n  BaseTocPlugin,\n  BaseHighlightPlugin,\n  BaseLinkPlugin,\n  BaseMentionPlugin,\n  BaseParagraphPlugin,\n  BaseCalloutPlugin,\n  BaseIndentPlugin.extend({\n    inject: {\n      targetPlugins: [BaseParagraphPlugin.key],\n    },\n  }),\n  BaseListPlugin.extend({\n    inject: {\n      targetPlugins: [BaseParagraphPlugin.key],\n    },\n    options: {\n      listStyleTypes: {\n        todo: {\n          liComponent: TodoLiStatic,\n          markerComponent: TodoMarkerStatic,\n          type: 'todo',\n        },\n      },\n    },\n  }),\n  markdownPlugin,\n];\n\nexport const AIChatEditor = React.memo(function AIChatEditor({\n  content,\n}: {\n  content: string;\n}) {\n  const aiEditor = usePlateEditor({\n    plugins,\n  });\n\n  useAIChatEditor(aiEditor, content);\n\n  return (\n    <EditorStatic variant=\"aiChat\" components={components} editor={aiEditor} />\n  );\n});\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "docs": [
      {
        "route": "/docs/ai",
        "title": "AI"
      },
      {
        "route": "https://pro.platejs.org/docs/components/ai-menu",
        "title": "AI Menu"
      }
    ],
    "examples": [
      "ai-demo",
      "ai-pro"
    ],
    "label": "New"
  }
}