{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "inline-equation-element",
  "type": "registry:ui",
  "title": "Inline Equation Element",
  "description": "An inline LaTeX equation element with an editable popover for inputting and rendering mathematical expressions.",
  "dependencies": [
    "@udecode/plate-math"
  ],
  "registryDependencies": [
    "popover"
  ],
  "files": [
    {
      "path": "src/registry/ui/inline-equation-element.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport type { TEquationElement } from '@udecode/plate-math';\nimport type { PlateElementProps } from '@udecode/plate/react';\n\nimport { useEquationElement } from '@udecode/plate-math/react';\nimport {\n  PlateElement,\n  useEditorSelector,\n  useSelected,\n} from '@udecode/plate/react';\nimport { RadicalIcon } from 'lucide-react';\n\nimport { Popover, PopoverTrigger } from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\n\nimport { EquationPopoverContent } from './equation-popover';\n\nexport function InlineEquationElement(\n  props: PlateElementProps<TEquationElement>\n) {\n  const element = props.element;\n  const katexRef = React.useRef<HTMLDivElement | null>(null);\n  const selected = useSelected();\n  const isCollapsed = useEditorSelector(\n    (editor) => editor.api.isCollapsed(),\n    []\n  );\n  const [open, setOpen] = React.useState(selected && isCollapsed);\n\n  React.useEffect(() => {\n    if (selected && isCollapsed) {\n      setOpen(true);\n    }\n  }, [selected, isCollapsed]);\n\n  useEquationElement({\n    element,\n    katexRef: katexRef,\n    options: {\n      displayMode: true,\n      errorColor: '#cc0000',\n      fleqn: false,\n      leqno: false,\n      macros: { '\\\\f': '#1f(#2)' },\n      output: 'htmlAndMathml',\n      strict: 'warn',\n      throwOnError: false,\n      trust: false,\n    },\n  });\n\n  return (\n    <PlateElement\n      {...props}\n      className={cn(\n        'mx-1 inline-block rounded-sm select-none [&_.katex-display]:my-0!'\n      )}\n    >\n      <Popover open={open} onOpenChange={setOpen} modal={false}>\n        <PopoverTrigger asChild>\n          <div\n            className={cn(\n              'after:absolute after:inset-0 after:-top-0.5 after:-left-1 after:z-1 after:h-[calc(100%)+4px] after:w-[calc(100%+8px)] after:rounded-sm after:content-[\"\"]',\n              'h-6',\n              ((element.texExpression.length > 0 && open) || selected) &&\n                'after:bg-brand/15',\n              element.texExpression.length === 0 &&\n                'text-muted-foreground after:bg-neutral-500/10'\n            )}\n            contentEditable={false}\n          >\n            <span\n              ref={katexRef}\n              className={cn(\n                element.texExpression.length === 0 && 'hidden',\n                'font-mono leading-none'\n              )}\n            />\n            {element.texExpression.length === 0 && (\n              <span>\n                <RadicalIcon className=\"mr-1 inline-block h-[19px] w-4 py-[1.5px] align-text-bottom\" />\n                New equation\n              </span>\n            )}\n          </div>\n        </PopoverTrigger>\n\n        <EquationPopoverContent\n          className=\"my-auto\"\n          open={open}\n          placeholder=\"E = mc^2\"\n          setOpen={setOpen}\n          isInline\n        />\n      </Popover>\n\n      {props.children}\n    </PlateElement>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/ui/inline-equation-element-static.tsx",
      "content": "import * as React from 'react';\n\nimport type { SlateElementProps } from '@udecode/plate';\nimport type { TEquationElement } from '@udecode/plate-math';\n\nimport { SlateElement } from '@udecode/plate';\nimport { getEquationHtml } from '@udecode/plate-math';\n\nimport { cn } from '@/lib/utils';\n\nexport function InlineEquationElementStatic(\n  props: SlateElementProps<TEquationElement>\n) {\n  const html = getEquationHtml({\n    element: props.element,\n    options: {\n      displayMode: true,\n      errorColor: '#cc0000',\n      fleqn: false,\n      leqno: false,\n      macros: { '\\\\f': '#1f(#2)' },\n      output: 'htmlAndMathml',\n      strict: 'warn',\n      throwOnError: false,\n      trust: false,\n    },\n  });\n\n  return (\n    <SlateElement\n      {...props}\n      className=\"inline-block rounded-sm select-none [&_.katex-display]:my-0\"\n    >\n      <div\n        className={cn(\n          'after:absolute after:inset-0 after:-top-0.5 after:-left-1 after:z-1 after:h-[calc(100%)+4px] after:w-[calc(100%+8px)] after:rounded-sm after:content-[\"\"]',\n          'h-6',\n          props.element.texExpression.length === 0 &&\n            'text-muted-foreground after:bg-neutral-500/10'\n        )}\n      >\n        <span\n          className={cn(\n            props.element.texExpression.length === 0 && 'hidden',\n            'font-mono leading-none'\n          )}\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n      </div>\n      {props.children}\n    </SlateElement>\n  );\n}\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "docs": [
      {
        "route": "http://localhost:3000/docs/equation",
        "title": "Equation"
      }
    ],
    "examples": [
      "equation-demo"
    ]
  }
}