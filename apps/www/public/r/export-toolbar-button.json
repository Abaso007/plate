{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "export-toolbar-button",
  "type": "registry:ui",
  "title": "Export Toolbar Button",
  "description": "A toolbar button for exporting editor content in various formats (HTML, PDF, Image, Markdown).",
  "dependencies": [
    "@udecode/cn",
    "@udecode/plate-alignment",
    "@udecode/plate-basic-marks",
    "@udecode/plate-block-quote",
    "@udecode/plate-code-block",
    "@udecode/plate-comments",
    "@udecode/plate-date",
    "@udecode/plate-font",
    "@udecode/plate-heading",
    "@udecode/plate-indent",
    "@udecode/plate-list",
    "@udecode/plate-layout",
    "@udecode/plate-line-height",
    "@udecode/plate-link",
    "@udecode/plate-markdown",
    "@udecode/plate-math",
    "@udecode/plate-media",
    "@udecode/plate-mention",
    "@udecode/plate-table",
    "@udecode/plate-toggle",
    "lowlight",
    "html2canvas-pro",
    "pdf-lib",
    "lucide-react"
  ],
  "registryDependencies": [
    "dropdown-menu",
    "https://platejs.org/r/toolbar",
    "https://platejs.org/r/editor",
    "https://platejs.org/r/blockquote-node",
    "https://platejs.org/r/code-block-node",
    "https://platejs.org/r/code-node",
    "https://platejs.org/r/column-node",
    "https://platejs.org/r/comment-node",
    "https://platejs.org/r/date-node",
    "https://platejs.org/r/heading-node",
    "https://platejs.org/r/highlight-node",
    "https://platejs.org/r/hr-node",
    "https://platejs.org/r/list-todo",
    "https://platejs.org/r/kbd-node",
    "https://platejs.org/r/link-node",
    "https://platejs.org/r/media-audio-node",
    "https://platejs.org/r/media-file-node",
    "https://platejs.org/r/media-image-node",
    "https://platejs.org/r/media-video-node",
    "https://platejs.org/r/mention-node",
    "https://platejs.org/r/paragraph-node",
    "https://platejs.org/r/table-node",
    "https://platejs.org/r/toc-node",
    "https://platejs.org/r/toggle-node",
    "https://platejs.org/r/equation-node"
  ],
  "files": [
    {
      "path": "src/registry/ui/export-toolbar-button.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport type { DropdownMenuProps } from '@radix-ui/react-dropdown-menu';\n\nimport { withProps } from '@udecode/cn';\nimport {\n  BaseParagraphPlugin,\n  createSlateEditor,\n  KEYS,\n  serializeHtml,\n} from '@udecode/plate';\nimport { BaseAlignPlugin } from '@udecode/plate-alignment';\nimport { BaseHorizontalRulePlugin } from '@udecode/plate-basic-elements';\nimport {\n  BaseBoldPlugin,\n  BaseCodePlugin,\n  BaseHighlightPlugin,\n  BaseItalicPlugin,\n  BaseKbdPlugin,\n  BaseStrikethroughPlugin,\n  BaseSubscriptPlugin,\n  BaseSuperscriptPlugin,\n  BaseUnderlinePlugin,\n} from '@udecode/plate-basic-marks';\nimport { BaseBlockquotePlugin } from '@udecode/plate-block-quote';\nimport { BaseCodeBlockPlugin } from '@udecode/plate-code-block';\nimport { BaseCommentPlugin } from '@udecode/plate-comments';\nimport { BaseDatePlugin } from '@udecode/plate-date';\nimport {\n  BaseFontBackgroundColorPlugin,\n  BaseFontColorPlugin,\n  BaseFontSizePlugin,\n} from '@udecode/plate-font';\nimport { BaseHeadingPlugin, BaseTocPlugin } from '@udecode/plate-heading';\nimport { BaseIndentPlugin } from '@udecode/plate-indent';\nimport { BaseColumnItemPlugin, BaseColumnPlugin } from '@udecode/plate-layout';\nimport { BaseLineHeightPlugin } from '@udecode/plate-line-height';\nimport { BaseLinkPlugin } from '@udecode/plate-link';\nimport { BaseListPlugin } from '@udecode/plate-list';\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\nimport {\n  BaseEquationPlugin,\n  BaseInlineEquationPlugin,\n} from '@udecode/plate-math';\nimport {\n  BaseAudioPlugin,\n  BaseFilePlugin,\n  BaseImagePlugin,\n  BaseMediaEmbedPlugin,\n  BaseVideoPlugin,\n} from '@udecode/plate-media';\nimport { BaseMentionPlugin } from '@udecode/plate-mention';\nimport {\n  BaseTableCellPlugin,\n  BaseTablePlugin,\n  BaseTableRowPlugin,\n} from '@udecode/plate-table';\nimport { BaseTogglePlugin } from '@udecode/plate-toggle';\nimport { useEditorRef } from '@udecode/plate/react';\nimport { all, createLowlight } from 'lowlight';\nimport { ArrowDownToLineIcon } from 'lucide-react';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { BlockquoteElementStatic } from '@/registry/ui/blockquote-node-static';\nimport {\n  CodeBlockElementStatic,\n  CodeLineElementStatic,\n  CodeSyntaxLeafStatic,\n} from '@/registry/ui/code-block-node-static';\nimport { CodeLeafStatic } from '@/registry/ui/code-node-static';\nimport {\n  ColumnElementStatic,\n  ColumnGroupElementStatic,\n} from '@/registry/ui/column-node-static';\nimport { CommentLeafStatic } from '@/registry/ui/comment-node-static';\nimport { DateElementStatic } from '@/registry/ui/date-node-static';\nimport { HeadingElementStatic } from '@/registry/ui/heading-node-static';\nimport { HighlightLeafStatic } from '@/registry/ui/highlight-node-static';\nimport { HrElementStatic } from '@/registry/ui/hr-node-static';\nimport { KbdLeafStatic } from '@/registry/ui/kbd-node-static';\nimport { LinkElementStatic } from '@/registry/ui/link-node-static';\nimport { TodoLiStatic, TodoMarkerStatic } from '@/registry/ui/list-todo-static';\nimport { AudioElementStatic } from '@/registry/ui/media-audio-node-static';\nimport { FileElementStatic } from '@/registry/ui/media-file-node-static';\nimport { ImageElementStatic } from '@/registry/ui/media-image-node-static';\nimport { VideoElementStatic } from '@/registry/ui/media-video-node-static';\nimport { MentionElementStatic } from '@/registry/ui/mention-node-static';\nimport { ParagraphElementStatic } from '@/registry/ui/paragraph-node-static';\nimport {\n  TableCellElementStatic,\n  TableCellHeaderStaticElement,\n  TableElementStatic,\n  TableRowElementStatic,\n} from '@/registry/ui/table-node-static';\nimport { TocElementStatic } from '@/registry/ui/toc-node-static';\nimport { ToggleElementStatic } from '@/registry/ui/toggle-node-static';\n\nimport { EditorStatic } from './editor-static';\nimport {\n  EquationElementStatic,\n  InlineEquationElementStatic,\n} from './equation-node-static';\nimport { ToolbarButton } from './toolbar';\n\nconst siteUrl = 'https://platejs.org';\nconst lowlight = createLowlight(all);\n\nexport function ExportToolbarButton(props: DropdownMenuProps) {\n  const editor = useEditorRef();\n  const [open, setOpen] = React.useState(false);\n\n  const getCanvas = async () => {\n    const { default: html2canvas } = await import('html2canvas-pro');\n\n    const style = document.createElement('style');\n    document.head.append(style);\n\n    const canvas = await html2canvas(editor.api.toDOMNode(editor)!, {\n      onclone: (document: Document) => {\n        const editorElement = document.querySelector(\n          '[contenteditable=\"true\"]'\n        );\n        if (editorElement) {\n          Array.from(editorElement.querySelectorAll('*')).forEach((element) => {\n            const existingStyle = element.getAttribute('style') || '';\n            element.setAttribute(\n              'style',\n              `${existingStyle}; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif !important`\n            );\n          });\n        }\n      },\n    });\n    style.remove();\n\n    return canvas;\n  };\n\n  const downloadFile = async (url: string, filename: string) => {\n    const response = await fetch(url);\n\n    const blob = await response.blob();\n    const blobUrl = window.URL.createObjectURL(blob);\n\n    const link = document.createElement('a');\n    link.href = blobUrl;\n    link.download = filename;\n    document.body.append(link);\n    link.click();\n    link.remove();\n\n    // Clean up the blob URL\n    window.URL.revokeObjectURL(blobUrl);\n  };\n\n  const exportToPdf = async () => {\n    const canvas = await getCanvas();\n\n    const PDFLib = await import('pdf-lib');\n    const pdfDoc = await PDFLib.PDFDocument.create();\n    const page = pdfDoc.addPage([canvas.width, canvas.height]);\n    const imageEmbed = await pdfDoc.embedPng(canvas.toDataURL('PNG'));\n    const { height, width } = imageEmbed.scale(1);\n    page.drawImage(imageEmbed, {\n      height,\n      width,\n      x: 0,\n      y: 0,\n    });\n    const pdfBase64 = await pdfDoc.saveAsBase64({ dataUri: true });\n\n    await downloadFile(pdfBase64, 'plate.pdf');\n  };\n\n  const exportToImage = async () => {\n    const canvas = await getCanvas();\n    await downloadFile(canvas.toDataURL('image/png'), 'plate.png');\n  };\n\n  const exportToHtml = async () => {\n    const components = {\n      [KEYS.audio]: AudioElementStatic,\n      [KEYS.blockquote]: BlockquoteElementStatic,\n      [KEYS.code]: CodeLeafStatic,\n      [KEYS.codeBlock]: CodeBlockElementStatic,\n      [KEYS.codeLine]: CodeLineElementStatic,\n      [KEYS.codeSyntax]: CodeSyntaxLeafStatic,\n      [KEYS.column]: ColumnElementStatic,\n      [KEYS.columnGroup]: ColumnGroupElementStatic,\n      [KEYS.comment]: CommentLeafStatic,\n      [KEYS.date]: DateElementStatic,\n      [KEYS.equation]: EquationElementStatic,\n      [KEYS.file]: FileElementStatic,\n      [KEYS.h1]: withProps(HeadingElementStatic, { variant: 'h1' }),\n      [KEYS.h2]: withProps(HeadingElementStatic, { variant: 'h2' }),\n      [KEYS.h3]: withProps(HeadingElementStatic, { variant: 'h3' }),\n      [KEYS.h4]: withProps(HeadingElementStatic, { variant: 'h4' }),\n      [KEYS.h5]: withProps(HeadingElementStatic, { variant: 'h5' }),\n      [KEYS.h6]: withProps(HeadingElementStatic, { variant: 'h6' }),\n      [KEYS.highlight]: HighlightLeafStatic,\n      [KEYS.hr]: HrElementStatic,\n      [KEYS.img]: ImageElementStatic,\n      [KEYS.inlineEquation]: InlineEquationElementStatic,\n      [KEYS.kbd]: KbdLeafStatic,\n      [KEYS.link]: LinkElementStatic,\n      // [KEYS.mediaEmbed]: MediaEmbedElementStatic,\n      [KEYS.mention]: MentionElementStatic,\n      [KEYS.p]: ParagraphElementStatic,\n      [KEYS.table]: TableElementStatic,\n      [KEYS.td]: TableCellElementStatic,\n      [KEYS.th]: TableCellHeaderStaticElement,\n      [KEYS.toc]: TocElementStatic,\n      [KEYS.toggle]: ToggleElementStatic,\n      [KEYS.tr]: TableRowElementStatic,\n      [KEYS.video]: VideoElementStatic,\n    };\n\n    const editorStatic = createSlateEditor({\n      plugins: [\n        BaseColumnPlugin,\n        BaseColumnItemPlugin,\n        BaseTocPlugin,\n        BaseVideoPlugin,\n        BaseAudioPlugin,\n        BaseParagraphPlugin,\n        BaseHeadingPlugin,\n        BaseMediaEmbedPlugin,\n        BaseBoldPlugin,\n        BaseCodePlugin,\n        BaseItalicPlugin,\n        BaseStrikethroughPlugin,\n        BaseSubscriptPlugin,\n        BaseSuperscriptPlugin,\n        BaseUnderlinePlugin,\n        BaseBlockquotePlugin,\n        BaseDatePlugin,\n        BaseEquationPlugin,\n        BaseInlineEquationPlugin,\n        BaseCodeBlockPlugin.configure({\n          options: {\n            lowlight,\n          },\n        }),\n        BaseIndentPlugin.extend({\n          inject: {\n            targetPlugins: [KEYS.p, KEYS.blockquote, KEYS.codeBlock],\n          },\n        }),\n        BaseListPlugin.extend({\n          inject: {\n            targetPlugins: [\n              KEYS.p,\n              ...KEYS.heading,\n              KEYS.blockquote,\n              KEYS.codeBlock,\n              KEYS.toggle,\n            ],\n          },\n          options: {\n            listStyleTypes: {\n              todo: {\n                liComponent: TodoLiStatic,\n                markerComponent: TodoMarkerStatic,\n                type: 'todo',\n              },\n            },\n          },\n        }),\n        BaseLinkPlugin,\n        BaseTableRowPlugin,\n        BaseTablePlugin,\n        BaseTableCellPlugin,\n        BaseHorizontalRulePlugin,\n        BaseFontColorPlugin,\n        BaseFontBackgroundColorPlugin,\n        BaseFontSizePlugin,\n        BaseKbdPlugin,\n        BaseAlignPlugin.extend({\n          inject: {\n            targetPlugins: [KEYS.p, ...KEYS.heading, KEYS.img, KEYS.video],\n          },\n        }),\n        BaseLineHeightPlugin,\n        BaseHighlightPlugin,\n        BaseFilePlugin,\n        BaseImagePlugin,\n        BaseMentionPlugin,\n        BaseCommentPlugin,\n        BaseTogglePlugin,\n      ],\n      value: editor.children,\n    });\n\n    const editorHtml = await serializeHtml(editorStatic, {\n      components,\n      editorComponent: EditorStatic,\n      props: { style: { padding: '0 calc(50% - 350px)', paddingBottom: '' } },\n    });\n\n    const tailwindCss = `<link rel=\"stylesheet\" href=\"${siteUrl}/tailwind.css\">`;\n    const katexCss = `<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.16.18/dist/katex.css\" integrity=\"sha384-9PvLvaiSKCPkFKB1ZsEoTjgnJn+O3KvEwtsz37/XrkYft3DTk2gHdYvd9oWgW3tV\" crossorigin=\"anonymous\">`;\n\n    const html = `<!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"color-scheme\" content=\"light dark\" />\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400..700&family=JetBrains+Mono:wght@400..700&display=swap\"\n          rel=\"stylesheet\"\n        />\n        ${tailwindCss}\n        ${katexCss}\n        <style>\n          :root {\n            --font-sans: 'Inter', 'Inter Fallback';\n            --font-mono: 'JetBrains Mono', 'JetBrains Mono Fallback';\n          }\n        </style>\n      </head>\n      <body>\n        ${editorHtml}\n      </body>\n    </html>`;\n\n    const url = `data:text/html;charset=utf-8,${encodeURIComponent(html)}`;\n\n    await downloadFile(url, 'plate.html');\n  };\n\n  const exportToMarkdown = async () => {\n    const md = editor.getApi(MarkdownPlugin).markdown.serialize();\n    const url = `data:text/markdown;charset=utf-8,${encodeURIComponent(md)}`;\n    await downloadFile(url, 'plate.md');\n  };\n\n  return (\n    <DropdownMenu open={open} onOpenChange={setOpen} modal={false} {...props}>\n      <DropdownMenuTrigger asChild>\n        <ToolbarButton pressed={open} tooltip=\"Export\" isDropdown>\n          <ArrowDownToLineIcon className=\"size-4\" />\n        </ToolbarButton>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent align=\"start\">\n        <DropdownMenuGroup>\n          <DropdownMenuItem onSelect={exportToHtml}>\n            Export as HTML\n          </DropdownMenuItem>\n          <DropdownMenuItem onSelect={exportToPdf}>\n            Export as PDF\n          </DropdownMenuItem>\n          <DropdownMenuItem onSelect={exportToImage}>\n            Export as Image\n          </DropdownMenuItem>\n          <DropdownMenuItem onSelect={exportToMarkdown}>\n            Export as Markdown\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "docs": [
      {
        "route": "/docs/export",
        "title": "Export"
      }
    ],
    "examples": [
      "basic-nodes-demo"
    ],
    "label": "New"
  }
}