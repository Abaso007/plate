{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "docs-basic-elements",
  "type": "registry:file",
  "title": "Basic Elements",
  "description": "Documentation for Basic Elements",
  "files": [
    {
      "path": "../../docs/basic-elements.mdx",
      "content": "---\ntitle: Basic Elements\ndocs:\n  - route: /docs/components/blockquote-element\n    title: Block Quote Element\n  - route: /docs/components/code-block-element\n    title: Code Block Element\n  - route: /docs/components/code-line-element\n    title: Code Line Element\n  - route: /docs/components/code-syntax-leaf\n    title: Code Syntax Leaf\n  - route: /docs/components/heading-element\n    title: Heading Element\n---\n\n<ComponentPreview name=\"basic-elements-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Includes commonly used block elements: blockquote, code block, and headings.\n\n</PackageInfo>\n\n## Plugins\n\n- `BlockquotePlugin` for `blockquote` element\n- `CodeBlockPlugin` for `code_block` element\n- `HeadingPlugin` for `h1`, `h2`,... elements\n\n## Installation\n\n```bash\nnpm install @udecode/plate-basic-elements\n# or\nnpm install @udecode/plate-block-quote @udecode/plate-code-block @udecode/plate-heading\n```\n\n## Usage\n\n### Basic Setup\n\n```tsx\nimport { BasicElementsPlugin, CodeBlockPlugin } from '@udecode/plate-basic-elements/react';\nimport { all, createLowlight } from 'lowlight';\n\n// Create a lowlight instance with all languages\nconst lowlight = createLowlight(all);\n\nconst plugins = [\n  // ...otherPlugins,\n  BasicElementsPlugin.configurePlugin(CodeBlockPlugin, {\n    options: {\n      lowlight,\n    },\n  }),\n];\n```\n\n### Custom Language Setup\n\nFor optimized bundle size, you can register only specific languages:\n\n```tsx\nimport { createLowlight } from 'lowlight';\nimport css from 'highlight.js/lib/languages/css';\nimport js from 'highlight.js/lib/languages/javascript';\nimport ts from 'highlight.js/lib/languages/typescript';\nimport html from 'highlight.js/lib/languages/xml';\n\n// Create a lowlight instance\nconst lowlight = createLowlight();\n\n// Register only the languages you need\nlowlight.register('html', html);\nlowlight.register('css', css);\nlowlight.register('js', js);\nlowlight.register('ts', ts);\n\nconst plugins = [\n  BasicElementsPlugin.configurePlugin(CodeBlockPlugin, {\n    options: {\n      lowlight,\n      // Set default language (optional)\n      defaultLanguage: 'js',\n    },\n  }),\n];\n```\n\n## Keyboard Shortcuts\n\n<KeyTable>\n  <KeyTableItem hotkey=\"Cmd + Opt + 1\">Toggle heading 1 block.</KeyTableItem>\n  <KeyTableItem hotkey=\"Cmd + Opt + 2\">Toggle heading 2 block.</KeyTableItem>\n  <KeyTableItem hotkey=\"Cmd + Opt + 3\">Toggle heading 3 block.</KeyTableItem>\n  <KeyTableItem hotkey=\"Cmd + Shift + .\">\n    Toggle the blockquote formatting for selected text.\n  </KeyTableItem>\n</KeyTable>\n\n## Plugins\n\n### `BasicElementsPlugin`\n\nPlugin that includes all basic element plugins.\n\n### `BlockquotePlugin`\n\nPlugin for blockquote elements.\n\n### `HeadingPlugin`\n\n<API name=\"HeadingPlugin\">\n<APIOptions>\n  <APIItem name=\"levels\" type=\"number\" optional>\n    Specifies the heading levels supported, ranging from 1 to the specified levels.\n  </APIItem>\n</APIOptions>\n</API>\n\n### `CodeBlockPlugin`\n\n<API name=\"CodeBlockPlugin\">\n<APIOptions>\n  <APIItem name=\"defaultLanguage\" type=\"string | null\" optional>\n    Default language to use when no language is specified. Set to null to disable syntax highlighting by default.\n  </APIItem>\n  <APIItem name=\"lowlight\" type=\"ReturnType<typeof createLowlight> | null\" optional>\n    Lowlight instance to use for highlighting. If not provided, syntax highlighting will be disabled.\n  </APIItem>\n</APIOptions>\n</API>\n\n## API Code Block\n\n### `isCodeBlockEmpty`\n\n<API name=\"isCodeBlockEmpty\">\n<APIReturns type=\"boolean\">\n  Whether the selection is in an empty code block.\n</APIReturns>\n</API>\n\n### `isSelectionAtCodeBlockStart`\n\n<API name=\"isSelectionAtCodeBlockStart\">\n<APIReturns type=\"boolean\">\n  Whether the selection is at the start of the first code line in a code block.\n</APIReturns>\n</API>\n\n### `indentCodeLine`\n\nIndents the code line if the selection is expanded or there are no non-whitespace characters at left of the cursor. The indentation is 2 spaces by default.\n\n<API name=\"indentCodeLine\">\n<APIOptions type=\"IndentCodeLineOptions\">\n  <APIItem name=\"codeLine\" type=\"ElementEntry\">\n    The code line to be indented.\n  </APIItem>\n  <APIItem name=\"indentDepth\" type=\"number\">\n    The size of indentation for the code line.\n    - **Default:** `2`\n  </APIItem>\n</APIOptions>\n</API>\n\n### `insertCodeBlock`\n\nInserts a code block by setting the node to code line and wrapping it with a code block. If the cursor is not at the block start, it inserts a break before the code block.\n\n<API name=\"insertCodeBlock\">\n<APIParameters>\n  <APIItem name=\"insertNodesOptions\" type=\"Omit<InsertNodesOptions, 'match'>\" optional>\n    Options for inserting nodes.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `insertCodeLine`\n\nInserts a code line starting with the specified indentation depth.\n\n<API name=\"insertCodeLine\">\n<APIParameters>\n  <APIItem name=\"indentDepth\" type=\"number\" optional>\n    The depth of indentation for the code line.\n    - **Default:** `0`\n  </APIItem>\n</APIParameters>\n</API>\n\n### `outdentCodeLine`\n\nOutdents a code line, removing two whitespace characters if present.\n\n<API name=\"outdentCodeLine\">\n<APIOptions type=\"OutdentCodeLineOptions\">\n  <APIItem name=\"codeLine\" type=\"ElementEntry\">\n    The code line to be outdented.\n  </APIItem>\n  <APIItem name=\"codeBlock\" type=\"ElementEntry\">\n    The code block containing the code line to be outdented.\n  </APIItem>\n</APIOptions>\n</API>\n\n### `toggleCodeBlock`\n\nToggles the code block in the editor.\n\n### `unwrapCodeBlock`\n\nUnwraps the code block in the editor.\n\n",
      "type": "registry:file",
      "target": "content/docs/plate/plugins/basic-elements.mdx"
    }
  ]
}