{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "docs-installation-node",
  "type": "registry:file",
  "title": "Node.js",
  "description": "Install and configure Plate for Node.js",
  "files": [
    {
      "path": "../../docs/installation/node.mdx",
      "content": "---\ntitle: Node.js\ndescription: Install and configure Plate for Node.js\n---\n\nThis guide demonstrates how to use Plate in a Node.js environment. This is useful for backend tasks such as data processing, content migration, validation, or any scenario where you need to interact with Plate editor content without a browser or a full React frontend.\n\n<Callout type=\"warning\" title=\"Key Node.js Constraint\">\n  When using Plate in a Node.js environment, you **must not** import from `/react` subpaths of any `@udecode/plate*` package. Always use the base imports (e.g., `@udecode/plate-basic-elements` instead of `@udecode/plate-basic-elements/react`).\n\n  This means you cannot use `createPlateEditor` from `@udecode/plate/react`. Instead, use `createSlateEditor` from `@udecode/plate`.\n</Callout>\n\n<Steps>\n\n### Install Plate\n\nInstall the core Plate package and any specific plugin packages required for your data processing needs.\n\n```bash\nnpm add @udecode/plate\n```\n\n### Create an Editor Instance\n\nIn your Node.js script, use `createSlateEditor` from `@udecode/plate` to initialize an editor instance. This function is framework-agnostic and doesn't depend on React or browser APIs.\n\n```typescript title=\"scripts/process-content.ts\"\nimport { createSlateEditor } from '@udecode/plate';\nimport { BaseHeadingPlugin } from '@udecode/plate-heading';\nimport { MarkdownPlugin, remarkMdx } from '@udecode/plate-markdown';\nimport remarkGfm from 'remark-gfm';\n// ... import other base plugins (NOT from /react paths)\n\nasync function processDocument(value: any[]) {\n  const editor = createSlateEditor({\n    plugins: [\n      BaseHeadingPlugin,\n      MarkdownPlugin.configure({\n        options: {\n          remarkPlugins: [remarkGfm, remarkMdx],\n        },\n      }),\n      // ... add other base plugins relevant to your content structure\n    ],\n    value, // Assign the Slate content to the editor\n  });\n\n  // Perform operations using editor.api or editor.tf\n  const textContent = editor.api.string([]);\n  console.log('Extracted Text:', textContent);\n\n  const markdownContent = editor.api.markdown.serialize();\n  console.log('Serialized Markdown:', markdownContent);\n\n  // Example: Transform all H1s to H2s\n  editor.tf.setNodes(\n    { type: 'h2' },\n    { at: [], match: (n) => n.type === 'h1' }\n  );\n  console.log('Transformed Value:', editor.children);\n\n  return { textContent, markdownContent, transformedValue: editor.children };\n}\n\n// Example usage:\nconst mySlateValue = [\n  { type: 'h1', children: [{ text: 'Original Document Title' }] },\n  { type: 'p', children: [{ text: 'Some paragraph content.' }] },\n];\n\nprocessDocument(mySlateValue).then(result => {\n  console.log('Processing complete.', result);\n});\n```\n\n### Content Manipulation\n\nThe primary use case for Plate in Node.js is programmatic content manipulation:\n\n-   **[`editor.api`](/docs/api/slate/editor-api)**: Access various utility functions for querying the editor state. For example:\n    -   `editor.api.nodes({ at: [], match })`: Find specific nodes.\n    -   `editor.api.string([])`: Extract text content.\n    -   [HTML Serialization](/docs/html)\n    -   [Markdown Serialization](/docs/markdown)\n\n-   **[`editor.tf`](/docs/api/slate/editor-transforms)**: Use transform functions to modify the editor content. For example:\n    -   `editor.tf.insertNodes(nodes, opts)`: Insert new nodes.\n    -   `editor.tf.removeNodes(opts)`: Delete nodes.\n    -   `editor.tf.setNodes(props, opts)`: Update properties of existing nodes.\n    -   `editor.tf.normalize({ force: true })`: Normalize the editor.\n\n</Steps>\n\n### Next Steps\n\nWith Plate configured in your Node.js environment, you can now:\n\n*   Build scripts for migrating content from other systems into Plate format.\n*   Perform bulk updates or transformations on your existing Plate documents.\n*   Validate content structure or extract specific data from your documents.\n*   Integrate with other backend services for content processing pipelines.\n*   Explore [Markdown Serialization](/docs/markdown), [HTML Serialization](/docs/html), and [`PlateStatic`](/docs/plate-static) if you need to generate static content.",
      "type": "registry:file",
      "target": "content/docs/plate/installation/node.mdx"
    }
  ]
}