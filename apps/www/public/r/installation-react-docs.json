{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "installation-react-docs",
  "type": "registry:file",
  "title": "React",
  "description": "Install and configure Plate UI for React",
  "files": [
    {
      "path": "../../docs/installation/react.mdx",
      "content": "---\ntitle: React\ndescription: Install and configure Plate UI for React\n---\n\n<Callout type=\"warning\" title=\"Prerequisites\">\n  Before you begin, ensure you have installed and configured [shadcn/ui](https://ui.shadcn.com/docs/installation) (adapted for your framework, e.g., Vite) and [Plate UI](/docs/installation/plate-ui).\n</Callout>\n\nThis guide walks you through incrementally building a Plate editor in your project.\n\n<Steps>\n\n### Create Your First Editor\n\nStart by adding the core [Editor](/docs/components/editor) component to your project:\n\n```bash\nnpx shadcn@latest add https://platejs.org/r/editor\n```\n\nNext, create a basic editor in your main application file (e.g. `src/App.tsx`). This example sets up a simple editor within an `EditorContainer`.\n\n```tsx showLineNumbers title=\"src/App.tsx\"\nimport { Plate, usePlateEditor } from '@udecode/plate/react';\n\nimport { Editor, EditorContainer } from '@/components/ui/editor';\n\nexport default function App() {\n  const editor = usePlateEditor(); // Initializes the editor instance\n\n  return (\n    <Plate editor={editor}>      {/* Provides editor context */}\n      <EditorContainer>         {/* Styles the editor area */}\n        <Editor placeholder=\"Type your amazing content here...\" />\n      </EditorContainer>\n    </Plate>\n  );\n}\n```\n\n<Callout type=\"info\">\n  `usePlateEditor` creates a memoized editor instance, ensuring stability across re-renders. For a non-memoized version, use `createPlateEditor`.\n</Callout>\n\n<ComponentPreview name=\"installation-next-01-editor-demo\" height=\"200px\" />\n\n### Adding Basic Marks\n\nEnhance your editor with text formatting. Add the [FixedToolbar](/docs/components/fixed-toolbar) and [MarkToolbarButton](/docs/components/mark-toolbar-button) components:\n\n```bash\nnpx shadcn@latest add https://platejs.org/r/fixed-toolbar https://platejs.org/r/mark-toolbar-button\n```\n\nUpdate your `src/App.tsx` to include these components and the `BasicMarksPlugin`.\nThis example adds bold, italic, and underline functionality.\n\n```tsx showLineNumbers title=\"src/App.tsx\" {2,4,6,8,13-14,16-29,33-39,44-48}\nimport * as React from 'react';\nimport type { Value } from '@udecode/plate';\n\nimport { BasicMarksPlugin } from '@udecode/plate-basic-marks/react';\nimport {\n  type PlateLeafProps,\n  Plate,\n  PlateLeaf,\n  usePlateEditor,\n} from '@udecode/plate/react';\n\nimport { Editor, EditorContainer } from '@/components/ui/editor';\nimport { FixedToolbar } from '@/components/ui/fixed-toolbar';\nimport { MarkToolbarButton } from '@/components/ui/mark-toolbar-button';\n\nconst initialValue: Value = [\n  {\n    type: 'p',\n    children: [\n      { text: 'Hello! Try out the ' },\n      { text: 'bold', bold: true },\n      { text: ', ' },\n      { text: 'italic', italic: true },\n      { text: ', and ' },\n      { text: 'underline', underline: true },\n      { text: ' formatting.' },\n    ],\n  },\n];\n\nexport default function App() {\n  const editor = usePlateEditor({\n    plugins: [BasicMarksPlugin], // Add the marks plugin\n    value: initialValue,         // Set initial content\n    components: {                // Map mark keys to components\n      bold: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"strong\" />,\n      italic: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"em\" />,\n      underline: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"u\" />,\n    },\n  });\n\n  return (\n    <Plate editor={editor}>\n      <FixedToolbar className=\"justify-start rounded-t-lg\">\n        <MarkToolbarButton nodeType=\"bold\" tooltip=\"Bold (⌘+B)\">B</MarkToolbarButton>\n        <MarkToolbarButton nodeType=\"italic\" tooltip=\"Italic (⌘+I)\">I</MarkToolbarButton>\n        <MarkToolbarButton nodeType=\"underline\" tooltip=\"Underline (⌘+U)\">U</MarkToolbarButton>\n      </FixedToolbar>\n      <EditorContainer>\n        <Editor placeholder=\"Type your amazing content here...\" />\n      </EditorContainer>\n    </Plate>\n  );\n}\n```\n\n<ComponentPreview name=\"installation-next-02-marks-demo\" height=\"200px\" />\n\n### Adding Basic Elements\n\nIntroduce block-level elements like headings and paragraphs. Add the [HeadingElement](/docs/components/heading-node) and [ParagraphElement](/docs/components/paragraph-node) components:\n\n```bash\nnpx shadcn@latest add https://platejs.org/r/heading-node https://platejs.org/r/paragraph-node https://platejs.org/r/blockquote-node\n```\n\nUpdate your `src/App.tsx` to include `BasicElementsPlugin` and the element components.\n\n```tsx showLineNumbers title=\"src/App.tsx\" {4,7,14,17,19-20,23-24,37,41-45,56-60}\nimport * as React from 'react';\nimport type { Value } from '@udecode/plate';\n\nimport { BasicElementsPlugin } from '@udecode/plate-basic-elements/react';\nimport { BasicMarksPlugin } from '@udecode/plate-basic-marks/react';\nimport {\n  type PlateElementProps,\n  type PlateLeafProps,\n  Plate,\n  PlateLeaf,\n  usePlateEditor,\n} from '@udecode/plate/react';\n\nimport { BlockquoteElement } from '@/components/ui/blockquote-node';\nimport { Editor, EditorContainer } from '@/components/ui/editor';\nimport { FixedToolbar } from '@/components/ui/fixed-toolbar';\nimport { HeadingElement } from '@/components/ui/heading-node';\nimport { MarkToolbarButton } from '@/components/ui/mark-toolbar-button';\nimport { ParagraphElement } from '@/components/ui/paragraph-node';\nimport { ToolbarButton } from '@/components/ui/toolbar'; // Generic toolbar button\n\nconst initialValue: Value = [\n  { type: 'h3', children: [{ text: 'Title' }] },\n  { type: 'blockquote', children: [{ text: 'This is a quote.' }] },\n  {\n    type: 'p',\n    children: [\n      { text: 'With some ' },\n      { text: 'bold', bold: true },\n      { text: ' text for emphasis!' },\n    ],\n  },\n];\n\nexport default function App() {\n  const editor = usePlateEditor({\n    plugins: [BasicElementsPlugin, BasicMarksPlugin], // Add plugins\n    value: initialValue,\n    components: {\n      // Element components\n      blockquote: BlockquoteElement,\n      p: ParagraphElement,\n      h1: (props: PlateElementProps) => <HeadingElement {...props} variant=\"h1\" />,\n      h2: (props: PlateElementProps) => <HeadingElement {...props} variant=\"h2\" />,\n      h3: (props: PlateElementProps) => <HeadingElement {...props} variant=\"h3\" />,\n      // Mark components (from previous step)\n      bold: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"strong\" />,\n      italic: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"em\" />,\n      underline: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"u\" />,\n    },\n  });\n\n  return (\n    <Plate editor={editor}>\n      <FixedToolbar className=\"flex justify-start gap-1 rounded-t-lg\">\n        {/* Element Toolbar Buttons */}\n        <ToolbarButton onClick={() => editor.tf.toggleBlock('h1')}>H1</ToolbarButton>\n        <ToolbarButton onClick={() => editor.tf.toggleBlock('h2')}>H2</ToolbarButton>\n        <ToolbarButton onClick={() => editor.tf.toggleBlock('h3')}>H3</ToolbarButton>\n        <ToolbarButton onClick={() => editor.tf.toggleBlock('blockquote')}>Quote</ToolbarButton>\n        {/* Mark Toolbar Buttons */}\n        <MarkToolbarButton nodeType=\"bold\" tooltip=\"Bold (⌘+B)\">B</MarkToolbarButton>\n        <MarkToolbarButton nodeType=\"italic\" tooltip=\"Italic (⌘+I)\">I</MarkToolbarButton>\n        <MarkToolbarButton nodeType=\"underline\" tooltip=\"Underline (⌘+U)\">U</MarkToolbarButton>\n      </FixedToolbar>\n      <EditorContainer>\n        <Editor placeholder=\"Type your amazing content here...\" />\n      </EditorContainer>\n    </Plate>\n  );\n}\n```\n\n<ComponentPreview name=\"installation-next-03-elements-demo\" height=\"200px\" />\n\n<Callout type=\"info\" title=\"Component Mapping is Key\">\n  When adding plugins for new element or mark types, you **must** map their `type` or plugin `key` (e.g., `'h1'`, `'p'`, `'bold'`) to your React components in the `components` option of `usePlateEditor`. This tells Plate how to render them.\n\n  For a quicker start with common plugins and components pre-configured, use the `editor-basic` block:\n  ```bash\n  npx shadcn@latest add https://platejs.org/r/editor-basic\n  ```\n  This handles much of the boilerplate for you.\n</Callout>\n\n### Handling Editor Value\n\nTo make the editor content persistent, let's integrate `localStorage` to save and load the editor's value.\n\n```tsx showLineNumbers title=\"src/App.tsx\" {48-54,60-62,72-78}\nimport * as React from 'react';\nimport type { Value } from '@udecode/plate';\n\nimport { BasicElementsPlugin } from '@udecode/plate-basic-elements/react';\nimport { BasicMarksPlugin } from '@udecode/plate-basic-marks/react';\nimport {\n  type PlateElementProps,\n  type PlateLeafProps,\n  Plate,\n  PlateLeaf,\n  usePlateEditor,\n} from '@udecode/plate/react';\n\nimport { BlockquoteElement } from '@/components/ui/blockquote-node';\nimport { Editor, EditorContainer } from '@/components/ui/editor';\nimport { FixedToolbar } from '@/components/ui/fixed-toolbar';\nimport { HeadingElement } from '@/components/ui/heading-node';\nimport { MarkToolbarButton } from '@/components/ui/mark-toolbar-button';\nimport { ParagraphElement } from '@/components/ui/paragraph-node';\nimport { ToolbarButton } from '@/components/ui/toolbar';\n\nconst initialValue: Value = [\n  { type: 'h3', children: [{ text: 'Title' }] },\n  { type: 'blockquote', children: [{ text: 'This is a quote.' }] },\n  {\n    type: 'p',\n    children: [\n      { text: 'With some ' },\n      { text: 'bold', bold: true },\n      { text: ' text for emphasis!' },\n    ],\n  },\n];\n\nexport default function App() {\n  const editor = usePlateEditor({\n    plugins: [BasicElementsPlugin, BasicMarksPlugin],\n    components: {\n      blockquote: BlockquoteElement,\n      p: ParagraphElement,\n      h1: (props: PlateElementProps) => <HeadingElement {...props} variant=\"h1\" />,\n      h2: (props: PlateElementProps) => <HeadingElement {...props} variant=\"h2\" />,\n      h3: (props: PlateElementProps) => <HeadingElement {...props} variant=\"h3\" />,\n      bold: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"strong\" />,\n      italic: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"em\" />,\n      underline: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"u\" />,\n    },\n    value: () => {\n      const savedValue = localStorage.getItem('installation-react-demo');\n      if (savedValue) {\n        return JSON.parse(savedValue);\n      }\n      return initialValue;\n    },\n  });\n\n  return (\n    <Plate\n      editor={editor}\n      onChange={({ value }) => {\n        localStorage.setItem('installation-react-demo', JSON.stringify(value));\n      }}\n    >\n      <FixedToolbar className=\"flex justify-start gap-1 rounded-t-lg\">\n        <ToolbarButton onClick={() => editor.tf.toggleBlock('h1')}>H1</ToolbarButton>\n        <ToolbarButton onClick={() => editor.tf.toggleBlock('h2')}>H2</ToolbarButton>\n        <ToolbarButton onClick={() => editor.tf.toggleBlock('h3')}>H3</ToolbarButton>\n        <ToolbarButton onClick={() => editor.tf.toggleBlock('blockquote')}>Quote</ToolbarButton>\n        <MarkToolbarButton nodeType=\"bold\" tooltip=\"Bold (⌘+B)\">B</MarkToolbarButton>\n        <MarkToolbarButton nodeType=\"italic\" tooltip=\"Italic (⌘+I)\">I</MarkToolbarButton>\n        <MarkToolbarButton nodeType=\"underline\" tooltip=\"Underline (⌘+U)\">U</MarkToolbarButton>\n        <div className=\"flex-1\" />\n        <ToolbarButton\n          className=\"px-2\"\n          onClick={() => editor.tf.setValue(initialValue)}\n        >\n          Reset\n        </ToolbarButton>\n      </FixedToolbar>\n      <EditorContainer>\n        <Editor placeholder=\"Type your amazing content here...\" />\n      </EditorContainer>\n    </Plate>\n  );\n}\n```\n\n<ComponentPreview name=\"installation-next-demo\" />\n\n<Callout type=\"note\">\n  `usePlateEditor` includes several core plugins by default (e.g., for paragraphs, history, React integration). For more advanced features like tables or mentions, you'll need to add the specific plugins and their associated components.\n</Callout>\n\n### Next Steps\n\nCongratulations! You've built a foundational Plate editor in your project.\n\nTo further enhance your editor:\n\n*   **Explore Components:** Discover [Toolbars, Menus, Node components](/docs/components), and more.\n*   **Add Plugins:** Integrate features like [Tables](/docs/plugins/table), [Mentions](/docs/plugins/mention), [AI](/docs/plugins/ai), or [Markdown](/docs/plugins/markdown).\n*   **Use Editor Blocks:** Quickly set up pre-configured editors:\n    *   Basic editor: `npx shadcn@latest add https://platejs.org/r/editor-basic`\n    *   AI-powered editor: `npx shadcn@latest add https://platejs.org/r/editor-ai`\n*   **Learn More:**\n    *   [Editor Configuration](/docs/editor)\n    *   [Plugin Configuration](/docs/plugin)\n    *   [Plugin Components](/docs/plugin-components)\n\n</Steps>\n",
      "type": "registry:file",
      "target": "content/docs/plate/installation/plate-ui/react.mdx"
    }
  ]
}