{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table-cell-element",
  "type": "registry:ui",
  "title": "Table Cell Element",
  "description": "A table cell with resizable borders and selection.",
  "dependencies": [
    "@udecode/plate-table"
  ],
  "registryDependencies": [
    "https://platejs.org/r/resize-handle",
    "https://platejs.org/r/block-selection"
  ],
  "files": [
    {
      "path": "src/registry/ui/table-cell-element.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport type { TTableCellElement } from '@udecode/plate-table';\nimport type { PlateElementProps } from '@udecode/plate/react';\n\nimport {\n  BlockSelectionPlugin,\n  useBlockSelected,\n} from '@udecode/plate-selection/react';\nimport {\n  TablePlugin,\n  TableRowPlugin,\n  useTableCellElement,\n  useTableCellElementResizable,\n} from '@udecode/plate-table/react';\nimport {\n  PlateElement,\n  useEditorPlugin,\n  useElementSelector,\n  usePluginOption,\n  useReadOnly,\n} from '@udecode/plate/react';\nimport { cva } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nimport { blockSelectionVariants } from './block-selection';\nimport { ResizeHandle } from './resize-handle';\n\nexport function TableCellElement({\n  isHeader,\n  ...props\n}: PlateElementProps<TTableCellElement> & {\n  isHeader?: boolean;\n}) {\n  const { api } = useEditorPlugin(TablePlugin);\n  const readOnly = useReadOnly();\n  const element = props.element;\n\n  const rowId = useElementSelector(([node]) => node.id as string, [], {\n    key: TableRowPlugin.key,\n  });\n  const isSelectingRow = useBlockSelected(rowId);\n  const isSelectionAreaVisible = usePluginOption(\n    BlockSelectionPlugin,\n    'isSelectionAreaVisible'\n  );\n\n  const { borders, colIndex, colSpan, minHeight, rowIndex, selected, width } =\n    useTableCellElement();\n\n  const { bottomProps, hiddenLeft, leftProps, rightProps } =\n    useTableCellElementResizable({\n      colIndex,\n      colSpan,\n      rowIndex,\n    });\n\n  return (\n    <PlateElement\n      {...props}\n      as={isHeader ? 'th' : 'td'}\n      className={cn(\n        'h-full overflow-visible border-none bg-background p-0',\n        element.background ? 'bg-(--cellBackground)' : 'bg-background',\n        isHeader && 'text-left *:m-0',\n        'before:size-full',\n        selected && 'before:z-10 before:bg-brand/5',\n        \"before:absolute before:box-border before:content-[''] before:select-none\",\n        borders.bottom?.size && `before:border-b before:border-b-border`,\n        borders.right?.size && `before:border-r before:border-r-border`,\n        borders.left?.size && `before:border-l before:border-l-border`,\n        borders.top?.size && `before:border-t before:border-t-border`\n      )}\n      style={\n        {\n          '--cellBackground': element.background,\n          maxWidth: width || 240,\n          minWidth: width || 120,\n        } as React.CSSProperties\n      }\n      attributes={{\n        ...props.attributes,\n        colSpan: api.table.getColSpan(element),\n        rowSpan: api.table.getRowSpan(element),\n      }}\n    >\n      <div\n        className=\"relative z-20 box-border h-full px-3 py-2\"\n        style={{ minHeight }}\n      >\n        {props.children}\n      </div>\n\n      {!isSelectionAreaVisible && (\n        <div\n          className=\"group absolute top-0 size-full select-none\"\n          contentEditable={false}\n          suppressContentEditableWarning={true}\n        >\n          {!readOnly && (\n            <>\n              <ResizeHandle\n                {...rightProps}\n                className=\"-top-2 -right-1 h-[calc(100%_+_8px)] w-2\"\n                data-col={colIndex}\n              />\n              <ResizeHandle {...bottomProps} className=\"-bottom-1 h-2\" />\n              {!hiddenLeft && (\n                <ResizeHandle\n                  {...leftProps}\n                  className=\"top-0 -left-1 w-2\"\n                  data-resizer-left={colIndex === 0 ? 'true' : undefined}\n                />\n              )}\n\n              <div\n                className={cn(\n                  'absolute top-0 z-30 hidden h-full w-1 bg-ring',\n                  'right-[-1.5px]',\n                  columnResizeVariants({ colIndex: colIndex as any })\n                )}\n              />\n              {colIndex === 0 && (\n                <div\n                  className={cn(\n                    'absolute top-0 z-30 h-full w-1 bg-ring',\n                    'left-[-1.5px]',\n                    'hidden animate-in fade-in group-has-[[data-resizer-left]:hover]/table:block group-has-[[data-resizer-left][data-resizing=\"true\"]]/table:block'\n                  )}\n                />\n              )}\n            </>\n          )}\n        </div>\n      )}\n\n      {isSelectingRow && (\n        <div className={blockSelectionVariants()} contentEditable={false} />\n      )}\n    </PlateElement>\n  );\n}\n\nexport function TableCellHeaderElement(\n  props: React.ComponentProps<typeof TableCellElement>\n) {\n  return <TableCellElement {...props} isHeader />;\n}\n\nconst columnResizeVariants = cva('hidden animate-in fade-in', {\n  variants: {\n    colIndex: {\n      0: 'group-has-[[data-col=\"0\"]:hover]/table:block group-has-[[data-col=\"0\"][data-resizing=\"true\"]]/table:block',\n      1: 'group-has-[[data-col=\"1\"]:hover]/table:block group-has-[[data-col=\"1\"][data-resizing=\"true\"]]/table:block',\n      2: 'group-has-[[data-col=\"2\"]:hover]/table:block group-has-[[data-col=\"2\"][data-resizing=\"true\"]]/table:block',\n      3: 'group-has-[[data-col=\"3\"]:hover]/table:block group-has-[[data-col=\"3\"][data-resizing=\"true\"]]/table:block',\n      4: 'group-has-[[data-col=\"4\"]:hover]/table:block group-has-[[data-col=\"4\"][data-resizing=\"true\"]]/table:block',\n      5: 'group-has-[[data-col=\"5\"]:hover]/table:block group-has-[[data-col=\"5\"][data-resizing=\"true\"]]/table:block',\n      6: 'group-has-[[data-col=\"6\"]:hover]/table:block group-has-[[data-col=\"6\"][data-resizing=\"true\"]]/table:block',\n      7: 'group-has-[[data-col=\"7\"]:hover]/table:block group-has-[[data-col=\"7\"][data-resizing=\"true\"]]/table:block',\n      8: 'group-has-[[data-col=\"8\"]:hover]/table:block group-has-[[data-col=\"8\"][data-resizing=\"true\"]]/table:block',\n      9: 'group-has-[[data-col=\"9\"]:hover]/table:block group-has-[[data-col=\"9\"][data-resizing=\"true\"]]/table:block',\n      10: 'group-has-[[data-col=\"10\"]:hover]/table:block group-has-[[data-col=\"10\"][data-resizing=\"true\"]]/table:block',\n    },\n  },\n});\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/ui/table-cell-element-static.tsx",
      "content": "import * as React from 'react';\n\nimport type { SlateElementProps } from '@udecode/plate';\nimport type { TTableCellElement } from '@udecode/plate-table';\n\nimport { SlateElement } from '@udecode/plate';\nimport { BaseTablePlugin } from '@udecode/plate-table';\n\nimport { cn } from '@/lib/utils';\n\nexport function TableCellElementStatic({\n  isHeader,\n  ...props\n}: SlateElementProps<TTableCellElement> & {\n  isHeader?: boolean;\n}) {\n  const { editor, element } = props;\n  const { api } = editor.getPlugin(BaseTablePlugin);\n\n  const { minHeight, width } = api.table.getCellSize({ element });\n  const borders = api.table.getCellBorders({ element });\n\n  return (\n    <SlateElement\n      {...props}\n      as={isHeader ? 'th' : 'td'}\n      className={cn(\n        'h-full overflow-visible border-none bg-background p-0',\n        element.background ? 'bg-(--cellBackground)' : 'bg-background',\n        isHeader && 'text-left font-normal *:m-0',\n        'before:size-full',\n        \"before:absolute before:box-border before:content-[''] before:select-none\",\n        borders &&\n          cn(\n            borders.bottom?.size && `before:border-b before:border-b-border`,\n            borders.right?.size && `before:border-r before:border-r-border`,\n            borders.left?.size && `before:border-l before:border-l-border`,\n            borders.top?.size && `before:border-t before:border-t-border`\n          )\n      )}\n      style={\n        {\n          '--cellBackground': element.background,\n          maxWidth: width || 240,\n          minWidth: width || 120,\n        } as React.CSSProperties\n      }\n      attributes={{\n        ...props.attributes,\n        colSpan: api.table.getColSpan(element),\n        rowSpan: api.table.getRowSpan(element),\n      }}\n    >\n      <div\n        className=\"relative z-20 box-border h-full px-4 py-2\"\n        style={{ minHeight }}\n      >\n        {props.children}\n      </div>\n    </SlateElement>\n  );\n}\n\nexport function TableCellHeaderStaticElement(\n  props: SlateElementProps<TTableCellElement>\n) {\n  return <TableCellElementStatic {...props} isHeader />;\n}\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "docs": [
      {
        "route": "/docs/table"
      },
      {
        "route": "https://pro.platejs.org/docs/components/table-cell-element"
      }
    ],
    "examples": [
      "table-demo"
    ]
  }
}