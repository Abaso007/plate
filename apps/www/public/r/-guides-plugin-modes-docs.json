{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "-guides-plugin-modes-docs",
  "type": "registry:file",
  "title": "Plugin Modes",
  "description": "Configure common editing behaviors.",
  "files": [
    {
      "path": "../../docs/(guides)/plugin-modes.mdx",
      "content": "---\ntitle: Plugin Modes\ndescription: Configure common editing behaviors.\n---\n\nPlugin Modes control how editor nodes respond to common user actions. Instead of overriding the editor methods, you can configure these behaviors directly on a plugin's `node` property.\n\nThis guide shows you how to use `breakMode`, `deleteMode`, `mergeMode`, and the `matchMode` override to create intuitive editing experiences.\n\n<ComponentPreview name=\"plugin-modes-demo\" />\n\n## Actions\n\nPlugin modes use specific action names to define behavior:\n\n- **`'default'`**: Default Slate behavior.\n- **`'reset'`**: Changes the current block to a default paragraph, keeping content.\n- **`'exit'`**: Exits the current block, inserting a new paragraph after it. See [Exit Break](/docs/exit-break) to learn more about this behavior.\n- **`'deleteExit'`**: Deletes content then exits the block.\n- **`'lineBreak'`**: Inserts a line break (`\\n`) instead of splitting the block.\n\n### `default`\n\nStandard Slate behavior. For `breakMode`, splits the block. For `deleteMode`, merges with the previous block.\n\n```tsx\n<p>\n  Hello world|\n</p>\n```\n\nAfter pressing `Enter`:\n\n```tsx\n<p>Hello world</p>\n<p>\n  |\n</p>\n```\n\nAfter pressing `Backspace`:\n\n```tsx\n<p>Hello world|</p>\n```\n\n### `reset`\n\nConverts the current block to a default paragraph while preserving content. Custom properties are removed.\n\n```tsx\n<h3 listStyleType=\"disc\">\n  |\n</h3>\n```\n\nAfter pressing `Enter` with `breakMode: { empty: 'reset' }`:\n\n```tsx\n<p>\n  |\n</p>\n```\n\n### `exit`\n\nExits the current block structure by inserting a new paragraph after it.\n\n```tsx\n<blockquote>\n  |\n</blockquote>\n```\n\nAfter pressing `Enter` with `breakMode: { empty: 'exit' }`:\n\n```tsx\n<blockquote>\n  <text />\n</blockquote>\n<p>\n  |\n</p>\n```\n\n### `deleteExit`\n\nDeletes content then exits the block.\n\n```tsx\n<blockquote>\n  line1\n  |\n</blockquote>\n```\n\nAfter pressing `Enter` with `breakMode: { emptyLineEnd: 'deleteExit' }`:\n\n```tsx\n<blockquote>line1</blockquote>\n<p>\n  |\n</p>\n```\n\n### `lineBreak`\n\nInserts a soft line break (`\\n`) instead of splitting the block.\n\n```tsx\n<blockquote>\n  Hello|\n</blockquote>\n```\n\nAfter pressing `Enter` with `breakMode: { default: 'lineBreak' }`:\n\n```tsx\n<blockquote>\n  Hello\n  |\n</blockquote>\n```\n\n## `breakMode`\n\nControls what happens when users press `Enter` within specific block types.\n\n### Configuration\n\n```tsx\nBlockquotePlugin.configure({\n  node: {\n    breakMode: {\n      // Action when Enter is pressed normally\n      default: 'default' | 'lineBreak' | 'exit' | 'deleteExit',\n      \n      // Action when Enter is pressed in an empty block\n      empty: 'default' | 'reset' | 'exit' | 'deleteExit',\n      \n      // Action when Enter is pressed at end of empty line\n      emptyLineEnd: 'default' | 'exit' | 'deleteExit',\n    },\n  },\n});\n```\n\nEach property controls a specific scenario:\n\n- `default`\n  - [`'default'`](#default)\n  - [`'lineBreak'`](#linebreak)\n  - [`'exit'`](#exit)\n  - [`'deleteExit'`](#deleteexit)\n\n- `empty`\n  - [`'default'`](#default)\n  - [`'reset'`](#reset)\n  - [`'exit'`](#exit)\n  - [`'deleteExit'`](#deleteexit)\n\n- `emptyLineEnd`\n  - [`'default'`](#default)\n  - [`'exit'`](#exit)\n  - [`'deleteExit'`](#deleteexit)\n\n### Examples\n\n**Blockquote with line breaks and smart exits:**\n\n```tsx\nimport { BlockquotePlugin } from '@udecode/plate-basic-nodes/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  BlockquotePlugin.configure({\n    node: {\n      breakMode: {\n        default: 'lineBreak',\n        empty: 'reset',\n        emptyLineEnd: 'deleteExit',\n      },\n    },\n  }),\n];\n```\n\nBefore pressing `Enter` in blockquote:\n```tsx\n<blockquote>\n  Quote text|\n</blockquote>\n```\n\nAfter (line break):\n```tsx\n<blockquote>\n  Quote text\n  |\n</blockquote>\n```\n\n**Code block with custom empty handling:**\n\n```tsx\nimport { CodeBlockPlugin } from '@udecode/plate-code-block/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  CodeBlockPlugin.configure({\n    node: {\n      deleteMode: { empty: 'reset' },\n      matchMode: ({ editor, mode }) => {\n        return mode === 'delete.empty' && isCodeBlockEmpty();\n      },\n    },\n  }),\n];\n```\n\nBefore pressing `Backspace` in empty code block:\n```tsx\n<code_block>\n  <code_line>\n    |\n  </code_line>\n</code_block>\n```\n\nAfter (reset):\n```tsx\n<p>\n  |\n</p>\n```\n\n## `deleteMode`\n\nControls what happens when users press `Backspace` at specific positions.\n\n### Configuration\n\n```tsx\nHeadingPlugin.configure({\n  node: {\n    deleteMode: {\n      // Action when Backspace is pressed at block start\n      start: 'default' | 'reset',\n      \n      // Action when Backspace is pressed in empty block\n      empty: 'default' | 'reset',\n    },\n  },\n});\n```\n\nEach property controls a specific scenario:\n\n- `start`\n  - [`'default'`](#default)\n  - [`'reset'`](#reset)\n\n- `empty`\n  - [`'default'`](#default)\n  - [`'reset'`](#reset)\n\n### Examples\n\n**Reset blockquotes at start:**\n\n```tsx\nimport { BlockquotePlugin } from '@udecode/plate-basic-nodes/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  BlockquotePlugin.configure({\n    node: {\n      deleteMode: { start: 'reset' },\n    },\n  }),\n];\n```\n\nBefore pressing `Backspace` at start:\n```tsx\n<blockquote>\n  |Quote content\n</blockquote>\n```\n\nAfter (reset):\n```tsx\n<p>\n  |Quote content\n</p>\n```\n\n**List items with start reset:**\n\n```tsx\nimport { ListPlugin } from '@udecode/plate-list/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  ListPlugin.configure({\n    node: {\n      deleteMode: { start: 'reset' },\n      matchMode: ({ mode, node }) => {\n        return mode === 'delete.start' && Boolean(node.listStyleType);\n      },\n    },\n  }),\n];\n```\n\nBefore pressing `Backspace` at start of list item:\n```tsx\n<p listStyleType=\"disc\">\n  |List item content\n</p>\n```\n\nAfter (reset):\n```tsx\n<p>\n  |List item content\n</p>\n```\n\n## `mergeMode`\n\nControls how blocks behave when merging with previous blocks.\n\n### Configuration\n\n```tsx\nParagraphPlugin.configure({\n  node: {\n    mergeMode: {\n      // Whether to remove empty previous blocks when merging\n      removeEmptyPrevious: boolean,\n    },\n  },\n});\n```\n\n### Examples\n\nOnly paragraph and heading plugins enable removal by default. Most other plugins use `false`:\n\n```tsx\nimport { H1Plugin, ParagraphPlugin } from '@udecode/plate/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  H1Plugin, // mergeMode: { removeEmptyPrevious: true } by default\n  ParagraphPlugin, // mergeMode: { removeEmptyPrevious: true } by default\n];\n```\n\nBefore pressing `Backspace` at start:\n```tsx\n<p>\n  <text />\n</p>\n<h1>\n  |Heading content\n</h1>\n```\n\nAfter (empty paragraph removed):\n```tsx\n<h1>\n  |Heading content\n</h1>\n```\n\n**Blockquote with removal disabled:**\n\n```tsx\nimport { BlockquotePlugin } from '@udecode/plate-basic-nodes/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  BlockquotePlugin.configure({\n    node: {\n      mergeMode: { removeEmptyPrevious: false }, // Default\n    },\n  }),\n];\n```\n\nBefore pressing `Backspace` at start:\n```tsx\n<p>\n  <text />\n</p>\n<blockquote>\n  |Code content\n</blockquote>\n```\n\nAfter (empty paragraph preserved):\n```tsx\n<p>\n  |Code content\n</p>\n```\n\n<Callout>\nSlate's default is `true` since the default block (paragraph) is first-class, while Plate plugins are likely used to define other node behaviors that shouldn't automatically remove empty predecessors.\n</Callout>\n\n## `matchMode`\n\nApplies modes conditionally based on node properties beyond just type. This is useful to override the behavior of another plugin.\n\n### Examples\n\n**List plugin matching by `listStyleType`:**\n\n```tsx\nimport { ListPlugin } from '@udecode/plate-list/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  ListPlugin.configure({\n    node: {\n      breakMode: { empty: 'reset' },\n      deleteMode: { start: 'reset' },\n      mergeMode: { removeEmptyPrevious: false },\n      matchMode: ({ mode, node }) => {\n        return Boolean(node.listStyleType);\n      },\n    },\n  }),\n];\n```\n\nSince the list plugin extends existing blocks that already have their own plugin configuration (e.g. `ParagraphPlugin`), using `matchMode` allows to override those behaviors.\n\n**Code block matching by emptiness:**\n\n```tsx\nimport { CodeBlockPlugin } from '@udecode/plate-code-block/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  CodeBlockPlugin.configure({\n    node: {\n      deleteMode: { empty: 'reset' },\n      matchMode: ({ editor, mode }) => {\n        return (\n          ['break.empty', 'delete.empty'].includes(mode) &&\n          isCodeBlockEmpty(editor)\n        );\n      },\n    },\n  }),\n];\n```\n\nSince code blocks have nested code lines, we need custom matching logic to determine when the node is actually empty.\n\n## Custom Reset Logic\n\nSome plugins need special reset behavior beyond the standard paragraph conversion. You can override the `resetBlock` transform:\n\n**List plugin reset (outdents instead of converting to paragraph):**\n\n```tsx\nconst ListPlugin = createPlatePlugin({\n  key: 'list',\n  // ... other config\n}).overrideEditor(({ editor, tf: { resetBlock } }) => ({\n  transforms: {\n    resetBlock(options) {\n      if (editor.api.block(options)?.[0]?.listStyleType) {\n        outdentList();\n        return;\n      }\n      \n      return resetBlock(options);\n    },\n  },\n}));\n```\n\n**Code block reset (unwraps instead of converting):**\n\n```tsx\nconst CodeBlockPlugin = createPlatePlugin({\n  key: 'code_block',\n  // ... other config\n}).overrideEditor(({ editor, tf: { resetBlock } }) => ({\n  transforms: {\n    resetBlock(options) {\n      if (editor.api.block({\n        at: options?.at,\n        match: { type: 'code_block' },\n      })) {\n        unwrapCodeBlock();\n        return;\n      }\n      \n      return resetBlock(options);\n    },\n  },\n}));\n```\n\n## Combining Modes\n\nYou can combine different modes for comprehensive block behavior:\n\n```tsx\nimport { BlockquotePlugin } from '@udecode/plate-basic-nodes/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  BlockquotePlugin.configure({\n    node: {\n      breakMode: {\n        default: 'lineBreak',\n        empty: 'reset',\n        emptyLineEnd: 'deleteExit',\n      },\n      deleteMode: {\n        start: 'reset',\n      },\n    },\n  }),\n];\n```\n\n**Line break behavior (default):**\n```tsx\n<blockquote>\n  Hello|\n</blockquote>\n```\n\nAfter `Enter`:\n```tsx\n<blockquote>\n  Hello\n  |\n</blockquote>\n```\n\n**Empty reset behavior:**\n```tsx\n<blockquote>\n  |\n</blockquote>\n```\n\nAfter `Enter`:\n```tsx\n<p>\n  |\n</p>\n```\n\n**Start reset behavior:**\n```tsx\n<blockquote>\n  |Quote content\n</blockquote>\n```\n\nAfter `Backspace`:\n```tsx\n<p>\n  |Quote content\n</p>\n```\n\n## Advanced\n\nFor complex scenarios beyond simple modes, you can override editor transforms directly using [`.overrideEditor`](/docs/plugin-methods#overrideeditor). This gives you complete control over transforms like [`resetBlock`](/docs/plugin-methods#extendtransforms) and [`insertExitBreak`](/docs/plugin-methods#extendtransforms):\n\n```tsx\nconst CustomPlugin = createPlatePlugin({\n  key: 'custom',\n  // ... other config\n}).overrideEditor(({ editor, tf: { insertBreak, deleteBackward, resetBlock } }) => ({\n  transforms: {\n    insertBreak() {\n      const block = editor.api.block();\n      \n      if (/* Custom condition */) {\n        // Custom behavior\n        return;\n      }\n      \n      // Default behavior\n      insertBreak();\n    },\n    \n    deleteBackward(unit) {\n      const block = editor.api.block();\n      \n      if (/* Custom condition */) {\n        // Custom behavior\n        return;\n      }\n      \n      deleteBackward(unit);\n    },\n    \n    resetBlock(options) {\n      if (/* Custom condition */) {\n        // Custom behavior\n        return true;\n      }\n      \n      return resetBlock(options);\n    },\n  },\n}));\n```\n",
      "type": "registry:file",
      "target": "content/docs/plate/(guides)/plugin-modes.mdx"
    }
  ]
}