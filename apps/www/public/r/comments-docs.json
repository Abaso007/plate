{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comments-docs",
  "type": "registry:file",
  "title": "Comments",
  "description": "Documentation for Comments",
  "files": [
    {
      "path": "../../docs/comments.mdx",
      "content": "---\ntitle: Comments\ndocs:\n  - route: /docs/components/comment-node\n    title: Comment Leaf\n  - route: /docs/components/comment-toolbar-button\n    title: Comment Toolbar Button\n  - route: /docs/components/block-discussion\n    title: Block Discussion\n---\n\n<ComponentPreview name=\"comments-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Add comments as text marks.\n- Add overlapping comments.\n- Undo/redo resolution and deletion.\n\n</PackageInfo>\n\n## Installation\n```bash\nnpm install @udecode/plate-comments\n```\n\n## Usage\n\n```tsx\nimport { commentsPlugin } from '@/components/editor/plugins/comments-kit';\nimport { discussionPlugin } from '@/components/editor/plugins/discussion-kit';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    discussionPlugin,\n    commentsPlugin,\n  ],\n});\n```\n\nThe comments plugin works in conjunction with the discussion plugin to provide a complete discussion system. The discussion plugin provides the UI layer for managing discussions and users. Source code of both plugins is available in the example.\n\n## Keyboard Shortcuts\n\n<KeyTable>\n  <KeyTableItem hotkey=\"Cmd + Shift + M\">\n    Add a comment on the selected text.\n  </KeyTableItem>\n</KeyTable>\n\n## Examples\n\n### Plate UI\n\nRefer to the preview above.\n\n### Plate Plus\n\n<ComponentPreviewPro name=\"comments-pro\" />\n\n## Plugins\n\n### `CommentsPlugin`\n\n## API\n\n### `editor.tf.comment.removeMark`\n\nRemoves the comment mark from the editor.\n\n### `editor.tf.comment.setDraft`\n\nSets a draft comment mark at the current selection.\n\n### `editor.tf.comment.unsetMark`\n\nUnsets comment nodes with the specified ID from the editor.\n\n<API name=\"unsetMark\">\n<APIParameters>\n  <APIItem name=\"id\" type=\"string\">\n    The ID of the comment nodes to unset.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `editor.api.comment.has`\n\nChecks if a comment with the given ID exists.\n\n<API name=\"has\">\n<APIParameters>\n  <APIItem name=\"id\" type=\"string\">\n    The ID of the comment to check.\n  </APIItem>\n</APIParameters>\n<APIReturns type=\"boolean\">\n  Whether the comment exists.\n</APIReturns>\n</API>\n\n### `editor.api.comment.node`\n\nGets a comment node entry.\n\n<API name=\"node\">\n<APIOptions type=\"EditorNodesOptions & { id?: string; isDraft?: boolean }\" optional>\n  Options for finding the node.\n</APIOptions>\n<APIReturns type=\"NodeEntry<TCommentText> | undefined\">\n  The comment node entry if found.\n</APIReturns>\n</API>\n\n### `editor.api.comment.nodeId`\n\nGets the ID of a comment from a leaf node.\n\n<API name=\"nodeId\">\n<APIParameters>\n  <APIItem name=\"leaf\" type=\"TCommentText\">\n    The comment leaf node.\n  </APIItem>\n</APIParameters>\n<APIReturns type=\"string | undefined\">\n  The comment ID if found.\n</APIReturns>\n</API>\n\n### `editor.api.comment.nodes`\n\nGets all comment node entries matching the options.\n\n<API name=\"nodes\">\n<APIOptions type=\"EditorNodesOptions & { id?: string; isDraft?: boolean }\" optional>\n  Options for finding the nodes.\n</APIOptions>\n<APIReturns type=\"NodeEntry<TCommentText>[]\">\n  Array of comment node entries.\n</APIReturns>\n</API>\n\n### `getCommentCount`\n\nGets the count of non-draft comments in a comment node.\n\n<API name=\"getCommentCount\">\n<APIParameters>\n  <APIItem name=\"node\" type=\"TCommentText\">\n    The comment node.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `getCommentKey`\n\nGenerates a comment key based on the provided ID.\n\n<API name=\"getCommentKey\">\n<APIParameters>\n  <APIItem name=\"id\" type=\"string\">\n    The ID of the comment.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `getCommentKeyId`\n\nExtracts the comment ID from a comment key.\n\n<API name=\"getCommentKeyId\">\n<APIParameters>\n  <APIItem name=\"key\" type=\"string\">\n    The comment key.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `getCommentKeys`\n\nReturns an array of comment keys present in the given node.\n\n<API name=\"getCommentKeys\">\n<APIParameters>\n  <APIItem name=\"node\" type=\"TCommentText\">\n    The node to check for comment keys.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `getDraftCommentKey`\n\nGets the key used for draft comments.\n\n### `isCommentKey`\n\nChecks if a given key is a comment key.\n\n<API name=\"isCommentKey\">\n<APIParameters>\n  <APIItem name=\"key\" type=\"string\">\n    The key to check.\n  </APIItem>\n</APIParameters>\n\n<APIReturns type=\"boolean\">\n  Whether the key is a comment key.\n</APIReturns>\n</API>\n\n### `isCommentNodeById`\n\nChecks if a given node is a comment with the specified ID.\n\n<API name=\"isCommentNodeById\">\n<APIParameters>\n  <APIItem name=\"node\" type=\"TNode\">\n    The node to check.\n  </APIItem>\n  <APIItem name=\"id\" type=\"string\">\n    The ID of the comment.\n  </APIItem>\n</APIParameters>\n\n<APIReturns type=\"boolean\">\n  Whether the node is a comment with the specified ID.\n</APIReturns>\n</API>\n\n## Types\n\n### `TCommentText`\n\nInterface for text nodes that can contain comments.\n\n<API name=\"TCommentText\">\n<APIAttributes>\n  <APIItem name=\"comment\" type=\"boolean\" optional>\n    Indicates whether this is a comment.\n  </APIItem>\n  <APIItem name=\"comment_<id>\" type=\"boolean\" optional>\n    Indicates the comment ID. Multiple comments can be present in a single text node.\n  </APIItem>\n</APIAttributes>\n</API>\n",
      "type": "registry:file",
      "target": "content/docs/plate/plugins/comments.mdx"
    }
  ]
}