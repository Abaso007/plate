{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "copilot-docs",
  "type": "registry:file",
  "title": "Copilot",
  "description": "Documentation for Copilot",
  "files": [
    {
      "path": "../../docs/copilot.mdx",
      "content": "---\ntitle: Copilot\ndocs:\n  - route: /docs/components/ghost-text\n    title: Ghost Text\n  - route: https://pro.platejs.org/docs/components/ghost-text\n    title: Ghost Text\n---\n\n<ComponentPreview name=\"copilot-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Renders ghost text suggestions as you type\n- Two trigger modes:\n  - Shortcut (`Ctrl+Space`). Press again for alternative suggestions.\n  - Debounce mode: automatically triggers after a space at paragraph ends\n- Accept suggestions with Tab or word-by-word with `Cmd+→`\n- Built-in support for Vercel AI SDK completion API\n\n</PackageInfo>\n\n## Installation\n\n```bash\nnpm install @udecode/plate-ai @udecode/plate-markdown\n```\n\n## Usage\n\n```tsx\nimport { CopilotPlugin } from '@udecode/plate-ai/react';\nimport {\n  MarkdownPlugin,\n  serializeMdNodes,\n  stripMarkdown,\n} from '@udecode/plate-markdown';\n```\n\n```tsx\nconst plugins = [\n  // ...otherPlugins,\n  MarkdownPlugin.configure({\n    options: {\n      remarkPlugins: [remarkMath, remarkGfm, remarkMdx],\n    },\n  }), \n  CopilotPlugin.configure(({ api }) => ({\n    options: {\n    completeOptions: {\n      api: '/api/your-api-endpoint',\n      body: {\n        system: `You are an advanced AI writing assistant, similar to VSCode Copilot but for general text. Your task is to predict and generate the next part of the text based on the given context.\n\nRules:\n- Continue the text naturally up to the next punctuation mark (., ,, ;, :, ?, or !).\n- Maintain style and tone. Don't repeat given text.\n- For unclear context, provide the most likely continuation.\n- Handle code snippets, lists, or structured text if needed.\n- Don't include \"\"\" in your response.\n- CRITICAL: Always end with a punctuation mark.\n- CRITICAL: Avoid starting a new block. Do not use block formatting like >, #, 1., 2., -, etc. The suggestion should continue in the same block as the context.\n- If no context is provided or you can't generate a continuation, return \"0\" without explanation.`,\n      },\n      onFinish: (_, completion) => {\n        if (completion === '0') return;\n\n        api.copilot.setBlockSuggestion({\n          //stripMarkdownBlocks in plus GhostText\n          text: stripMarkdown(completion),\n        });\n      },\n    },\n    debounceDelay: 500,\n    getPrompt: ({ editor }) => {\n      const contextEntry = getAncestorNode(editor);\n\n      if (!contextEntry) return '';\n\n      const prompt = serializeMdNodes([contextEntry[0] as TElement]);\n\n      return `Continue the text up to the next punctuation mark:\n\"\"\"\n${prompt}\n\"\"\"`;\n    },\n    renderGhostText: GhostText,\n  },\n}));\n```\n\n- [GhostText](/docs/components/ghost-text)\n\n## Tab Key Handling\n\nThe Copilot plugin uses the Tab key to accept suggestions. To avoid conflicts with other plugins that use Tab (like `IndentPlugin` or `TabbablePlugin`), ensure `CopilotPlugin` is placed before them in your plugin configuration. This allows Copilot to handle Tab key events first when suggestions are present.\n\n```tsx\nconst plugins = [\n  // ...otherPlugins,\n  CopilotPlugin,\n  // Place tab-using plugins after Copilot\n  IndentPlugin,\n  TabbablePlugin,\n];\n```\n\n## Examples\n\n### Plate UI\n\nRefer to the preview above.\n\n### Plate Plus\n\n<ComponentPreviewPro name=\"copilot-pro\" />\n\n## Keyboard Shortcuts\n\n<KeyTable>\n  <KeyTableItem hotkey=\"Ctrl + Space\">\n    Trigger suggestion. Press again for alternative suggestions.\n  </KeyTableItem>\n  <KeyTableItem hotkey=\"Tab\">Accept the entire suggestion.</KeyTableItem>\n  <KeyTableItem hotkey=\"Cmd + →\">\n    Accept the next word of the suggestion.\n  </KeyTableItem>\n  <KeyTableItem hotkey=\"Escape\">Dismiss the current suggestion.</KeyTableItem>\n</KeyTable>\n\n## Plugins\n\n### `CopilotPlugin`\n\nPlugin for AI-powered text completion suggestions.\n\n<API name=\"CopilotPlugin\">\n<APIOptions>\n  <APIItem name=\"autoTriggerQuery\" type=\"(options: { editor: PlateEditor }) => boolean\" optional>\n    Additional conditions to auto trigger copilot.\n    - **Default:** Checks:\n      - Block above is not empty\n      - Block above ends with a space\n      - No existing suggestion\n  </APIItem>\n  <APIItem name=\"completeOptions\" type=\"Partial<CompleteOptions>\">\n    AI completion configuration options. See [AI SDK useCompletion Parameters](https://sdk.vercel.ai/docs/reference/ai-sdk-ui/use-completion#parameters).\n  </APIItem>\n  <APIItem name=\"debounceDelay\" type=\"number\" optional>\n    Delay for debouncing auto-triggered suggestions.\n    - **Default:** `0`\n  </APIItem>\n  <APIItem name=\"getNextWord\" type=\"(options: { text: string }) => { firstWord: string; remainingText: string }\" optional>\n    Function to extract the next word from suggestion text.\n  </APIItem>\n  <APIItem name=\"getPrompt\" type=\"(options: { editor: PlateEditor }) => string\" optional>\n    Function to generate the prompt for AI completion.\n    - **Default:** Uses markdown serialization of ancestor node\n  </APIItem>\n  <APIItem name=\"renderGhostText\" type=\"(() => React.ReactNode) | null\" optional>\n    Component to render ghost text suggestions.\n  </APIItem>\n  <APIItem name=\"triggerQuery\" type=\"(options: { editor: PlateEditor }) => boolean\" optional>\n    Conditions to trigger copilot.\n    - **Default:** Checks:\n      - Selection is not expanded\n      - Selection is at block end\n  </APIItem>\n</APIOptions>\n</API>\n\n## API\n\n### `editor.api.copilot.accept()`\n\nAccepts the current suggestion and applies it to the editor content.\n\n### `editor.api.copilot.acceptNextWord()`\n\nAccepts only the next word of the current suggestion, allowing for granular acceptance of suggestions.\n\n### `editor.api.copilot.reset()`\n\nResets the plugin state to its initial condition:\n\n- Aborts any ongoing API request\n- Clears the current completion\n- Clears suggestion node ID and text\n\n### `editor.api.copilot.setBlockSuggestion()`\n\nSets suggestion text for a block.\n\n<API name=\"setBlockSuggestion\">\n<APIParameters>\n  <APIItem name=\"options\" type=\"SetBlockSuggestionOptions\">\n    Options for setting the block suggestion.\n  </APIItem>\n</APIParameters>\n\n<APIOptions type=\"SetBlockSuggestionOptions\">\n  <APIItem name=\"text\" type=\"string\">\n    The suggestion text to set.\n  </APIItem>\n  <APIItem name=\"id\" type=\"string\" optional>\n    Target block ID.\n    - **Default:** Current block\n  </APIItem>\n</APIOptions>\n</API>\n\n### `editor.api.copilot.stop()`\n\nStops ongoing suggestion requests and cleans up:\n\n- Cancels debounced trigger calls\n- Aborts current API request\n- Resets abort controller\n\n### `editor.api.copilot.triggerSuggestion()`\n\nTriggers a new suggestion request. The request may be debounced based on the plugin configuration.\n",
      "type": "registry:file",
      "target": "content/docs/plate/plugins/copilot.mdx"
    }
  ]
}