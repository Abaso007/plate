{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "block-selection-docs",
  "type": "registry:file",
  "title": "Block Selection",
  "description": "Documentation for Block Selection",
  "files": [
    {
      "path": "../../docs/block-selection.mdx",
      "content": "---\ntitle: Block Selection\ndocs:\n  - route: /docs/components/block-selection\n    title: Block Selection\n---\n\n<ComponentPreview name=\"block-selection-demo\" />\n\n<PackageInfo>\n\nThe Block Selection feature allows users to select and manipulate entire text blocks, as opposed to individual words or characters. This powerful functionality enhances the editing experience by providing efficient ways to manage large sections of content.\n\n## Features\n\n- Select entire blocks with a single action\n- Multi-block selection\n- Copy, cut, and delete operations on selected blocks\n- Keyboard shortcuts for quick selection:\n  - `Cmd+A`:\n    - First press: select the current block\n    - Double press: select all blocks\n  - Arrow keys: select the block above or below\n- Customizable styling for selected blocks\n\n</PackageInfo>\n\n## Installation\n\n```bash\nnpm install @udecode/plate-selection\n```\n\n## Usage\n\n```tsx\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  BlockSelectionPlugin,\n];\n```\n\n### `Exclude blocks from selection`\n\nYou can exclude certain plugins from block selection using:\n\n```ts\nBlockSelectionPlugin.configure({\n  inject: {\n    // Exclude blocks below table rows\n    excludeBelowPlugins: ['tr'],\n    // Exclude block types\n    excludePlugins: ['table', 'code_line', 'column_group', 'column'],\n  }\n})\n```\n\n- `excludeBelowPlugins`: Plugin keys of non-selectable block descendants. Use this to prevent selection below specific blocks. For example, excluding 'tr' prevents selecting individual cells while still allowing table row selection.\n\n- `excludePlugins`: Plugin keys of non-selectable blocks.\n\n### Set scrollable container\n\nIf you're using `EditorContainer` from [Editor](/docs/components/editor), you can skip this section.\n\nTo control the scrollable container, configure the `boundaries` and `container` options within `areaOptions`. These options accept CSS selectors, such as `#selection-demo #${editor.uid}`, which are used with `document.querySelector()`.\n\nFor this to work effectively:\n\n1. Add an `id` or `className` to your scroll container. If you're not sure about the container, you can add it to the `<Editor />` component. We recommend using `id={editor.uid}`.\n2. Use the appropriate selector in your configuration.\n3. Don't forget to set `position: relative` to the container.\n\nDefault configuration:\n\n```js\nBlockSelectionPlugin.configure({\n  options: {\n    areaOptions: {\n      boundaries: `#${editor.uid}`,\n      container: `#${editor.uid}`,\n      selectables: `#${editor.uid} .slate-selectable`,\n    },\n  },\n});\n```\n\n### Set scroll speed\n\nUse `options.areaOptions.behaviour.scrolling.speedDivider` to set the scroll speed.\n\nThe value `0.8` is our recommended speed since it's near the browser-native speed.\n\n```ts\nBlockSelectionPlugin.configure({\n  options: {\n    areaOptions: {\n      behaviour: {\n      scrolling: {\n        // You can slow down the scroll speed by setting a bigger value.\n        speedDivider: 1.5,\n      },\n      // The distance needed to move for the selection area to appear.\n      // If it's too small, it may cause the mouse click event to be blocked. 10 is a good default.\n      startThreshold: 4,\n    },\n  },\n});\n```\n\n### Add selectable element\n\nAdd `data-plate-selectable=\"true\"` to any element you want to start block selection.\n\n### Prevent unselect\n\nTo prevent unselecting blocks when clicking on certain elements, add the `data-plate-prevent-unselect` attribute to those components\n\nFor example:\n```tsx\n<YourSpecialButtoon data-plate-prevent-unselect />\n```\n\n### Full Page Selection\n\n#### Making Elements Selectable\n\nYou can enable block selection for elements outside the `<Editor />` component, similar to the [Potion](https://potion.platejs.org/) template. Add the `data-plate-selectable` attribute to any component you want to make selectable:\n\n```tsx\n<Cover data-plate-selectable />\n<Sidebar data-plate-selectable />\n```\n\nThis works for any element, even those outside the editor's DOM tree.\n\n#### Resetting Selection\n\nThere are two ways to handle resetting selection across the full page:\n\n1. Direct API call:\n```tsx\neditor.api.blockSelection.deselect();\n```\n\n2. Click outside handler:\n```tsx\nconst handleClickOutside = (event: MouseEvent) => {\n  if (!(event.target as HTMLElement).closest('[data-plate-selectable]')) {\n    editor.api.blockSelection.deselect();\n  }\n};\n```\n\n## Styling\n\n### Selection area\n\nStyle the selection area by adding the `.slate-selection-area` class to your editor container component. For example:\n\n```js\n'[&_.slate-selection-area]:border [&_.slate-selection-area]:border-primary [&_.slate-selection-area]:bg-primary/10'\n```\n\n### Selected element\n\nTo determine if an element is selected, use `useBlockSelected` hook. You can render a visual indicator around selected blocks using our [BlockSelection](/docs/components/block-selection) component or create your own.\n\nThis component should be rendered inside each block element for consistent selection feedback. Plate UI is doing it by configuring the plugin this way:\n\n```tsx\nrender: {\n  belowRootNodes: (props) => {\n    if (!props.className?.includes('slate-selectable')) return null;\n\n    return <BlockSelection />;\n  },\n},\n```\n\n## Plugins\n\n### `BlockSelectionPlugin`\n\nPlugin for block selection functionality.\n\n<API name=\"BlockSelectionPlugin\">\n<APIOptions>\n  <APIItem name=\"areaOptions\" type=\"PartialSelectionOptions\" optional>\n    Options for the selection area.\n\n```ts\n{\n    boundaries: [`#${editor.uid}`],\n    container: [`#${editor.uid}`],\n    selectables: [`#${editor.uid} .slate-selectable`],\n    selectionAreaClass: 'slate-selection-area',\n}\n```\n  </APIItem>\n  <APIItem name=\"enableContextMenu\" type=\"boolean\" optional>\n    Enables or disables the context menu for block selection.\n    - **Default:** `false`\n  </APIItem>\n  <APIItem name=\"isSelecting\" type=\"boolean\" optional>\n    Indicates whether block selection is currently active.\n    - **Default:** `false`\n  </APIItem>\n  <APIItem name=\"onKeyDownSelecting\" type=\"(e: KeyboardEvent) => void\" optional>\n    A function to handle the keydown event when selecting.\n  </APIItem>\n  <APIItem name=\"query\" type=\"QueryNodeOptions\" optional>\n    Options for querying nodes during block selection.\n    - **Default:** `{ maxLevel: 1 }`\n  </APIItem>\n  <APIItem name=\"selectedIds\" type=\"Set<string>\" optional>\n    A set of IDs for the currently selected blocks.\n    - **Default:** `new Set()`\n  </APIItem>\n  <APIItem name=\"anchorId\" type=\"string | null\" optional>\n    (Internal) The ID of the anchor block in the current selection. Used for shift-based selection.\n    - **Default:** `null`\n  </APIItem>\n  <APIItem name=\"isSelectable\" type=\"(element: TElement, path: Path) => boolean\" optional>\n    Function to determine if a block element is selectable.\n    - **Default:** `() => true`\n  </APIItem>\n</APIOptions>\n</API>\n\n## API\n\n### `api.blockSelection.add`\n\nAdds one or more blocks to the selection.\n\n<API name=\"add\">\n<APIParameters>\n  <APIItem name=\"id\" type=\"string | string[]\">\n    The ID(s) of the block(s) to be selected.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `api.blockSelection.clear`\n\nResets the set of selected IDs to an empty set.\n\n### `api.blockSelection.delete`\n\nRemoves one or more blocks from the selection.\n\n<API name=\"delete\">\n<APIParameters>\n  <APIItem name=\"id\" type=\"string | string[]\">\n    The ID(s) of the block(s) to remove from selection.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `api.blockSelection.deselect`\n\nDeselects all blocks and sets the `isSelecting` flag to false.\n\n### `api.blockSelection.focus`\n\nFocuses the block selection shadow input. This input handles copy, delete, and paste events for selected blocks.\n\n### `api.blockSelection.getNodes`\n\nGets the selected blocks in the editor.\n\n<API name=\"getNodes\">\n<APIReturns type=\"NodeEntry[]\">\n  Array of selected block entries.\n</APIReturns>\n</API>\n\n### `api.blockSelection.has`\n\nChecks if one or more blocks are selected.\n\n<API name=\"has\">\n<APIParameters>\n  <APIItem name=\"id\" type=\"string | string[]\">\n    The ID(s) of the block(s) to check.\n  </APIItem>\n</APIParameters>\n\n<APIReturns>\n  <APIItem type=\"boolean\">\n    Whether the block(s) are selected.\n  </APIItem>\n</APIReturns>\n</API>\n\n### `api.blockSelection.selectAll`\n\nSelects all selectable blocks in the editor.\n\n### `api.blockSelection.set`\n\nSets the selection to one or more blocks, clearing any existing selection.\n\n<API name=\"set\">\n<APIParameters>\n  <APIItem name=\"id\" type=\"string | string[]\">\n    The ID(s) of the block(s) to be selected.\n  </APIItem>\n</APIParameters>\n</API>\n\n## Transforms\n\n### `tf.blockSelection.duplicate`\n\nDuplicate the selected blocks.\n\n### `tf.blockSelection.removeNodes`\n\nRemove the selected nodes from the editor.\n\n### `tf.blockSelection.select`\n\nSelect the nodes returned by `getNodes()` and reset selected IDs.\n\n### `tf.blockSelection.setNodes`\n\nSets properties on the selected nodes.\n\n<API name=\"setNodes\">\n<APIParameters>\n  <APIItem name=\"props\" type=\"Partial<NodeProps<TElement>>\">\n    Properties to set on selected nodes.\n  </APIItem>\n  <APIItem name=\"options\" type=\"SetNodesOptions\" optional>\n    Options for setting nodes.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `tf.blockSelection.setTexts`\n\nSets text properties on the selected nodes.\n\n<API name=\"setTexts\">\n<APIParameters>\n  <APIItem name=\"props\" type=\"Partial<NodeProps<TText>>\">\n    Text properties to set on selected nodes.\n  </APIItem>\n  <APIItem name=\"options\" type=\"Omit<SetNodesOptions, 'at'>\" optional>\n    Options for setting text nodes, excluding the 'at' property.\n  </APIItem>\n</APIParameters>\n</API>\n\n## Hooks\n\n### `useBlockSelectable`\n\nA hook that provides props for making a block element selectable, including context menu behavior.\n\n<API name=\"useBlockSelectable\">\n<APIReturns type=\"object\">\n  <APIItem name=\"props\" type=\"object\">\n    Props to be spread on the block element.\n    <APISubList>\n      <APISubListItem parent=\"props\" name=\"className\" type=\"string\">\n        Required class for selection functionality.\n        - **Default:** `'slate-selectable'`\n      </APISubListItem>\n      <APISubListItem parent=\"props\" name=\"onContextMenu\" type=\"(event: React.MouseEvent) => void\">\n        Handles right-click context menu behavior:\n        - Opens context menu for selected blocks\n        - Opens for void elements\n        - Opens for elements with `data-plate-open-context-menu=\"true\"`\n        - Adds block to selection with Shift key for multi-select\n      </APISubListItem>\n    </APISubList>\n  </APIItem>\n</APIReturns>\n</API>\n\n### `useBlockSelected`\n\n<API name=\"useBlockSelected\">\n<APIReturns type=\"boolean\">\n  Whether the context block is selected.\n</APIReturns>\n</API>\n\n### `useBlockSelectionNodes`\n\n<API name=\"useBlockSelectionNodes\">\n<APIReturns type=\"NodeEntry[]\">\n  Array of selected block entries.\n</APIReturns>\n</API>\n\n### `useBlockSelectionFragment`\n\n<API name=\"useBlockSelectionFragment\">\n<APIReturns type=\"Node[]\">\n  Array of selected block nodes.\n</APIReturns>\n</API>\n\n### `useBlockSelectionFragmentProp`\n\n<API name=\"useBlockSelectionFragmentProp\">\n<APIReturns type=\"Node[]\">\n  Fragment prop for selected blocks.\n</APIReturns>\n</API>\n\n### `useSelectionArea`\n\nInitialize and manage selection area functionality.\n\n### `api.blockSelection.isSelectable`\n\n<API name=\"isSelectable\">\n<APIParameters>\n  <APIItem name=\"element\" type=\"TElement\">\n    Block element to check.\n  </APIItem>\n  <APIItem name=\"path\" type=\"Path\">\n    Path to the block element.\n  </APIItem>\n</APIParameters>\n\n<APIReturns type=\"boolean\">\n  Whether the block is selectable.\n</APIReturns>\n</API>\n\n### `api.blockSelection.moveSelection`\n\nMoves the selection up or down to the next selectable block.\n\nWhen moving up:\n- Gets the previous selectable block from the top-most selected block\n- Sets it as the new anchor\n- Clears previous selection and selects only this block\nWhen moving down:\n- Gets the next selectable block from the bottom-most selected block\n- Sets it as the new anchor\n- Clears previous selection and selects only this block\n\n<API name=\"moveSelection\">\n<APIParameters>\n  <APIItem name=\"direction\" type=\"'up' | 'down'\">\n    Direction to move selection.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `api.blockSelection.shiftSelection`\n\nExpands or shrinks the selection based on the anchor block.\n\nFor SHIFT + DOWN:\n- If anchor is top-most: Expands down by adding block below bottom-most\n- Otherwise: Shrinks from top-most (unless top-most is the anchor)\nFor SHIFT + UP:\n- If anchor is bottom-most: Expands up by adding block above top-most\n- Otherwise: Shrinks from bottom-most (unless bottom-most is the anchor)\nThe anchor block always remains selected. If no anchor is set, it defaults to:\n- Bottom-most block for SHIFT + UP\n- Top-most block for SHIFT + DOWN\n\n<API name=\"shiftSelection\">\n<APIParameters>\n  <APIItem name=\"direction\" type=\"'up' | 'down'\">\n    Direction to expand/shrink selection.\n  </APIItem>\n</APIParameters>\n</API>\n\n",
      "type": "registry:file",
      "target": "content/docs/plate/block-selection.mdx"
    }
  ]
}