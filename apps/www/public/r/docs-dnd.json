{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "docs-dnd",
  "type": "registry:file",
  "title": "Drag & Drop",
  "description": "Documentation for Drag & Drop",
  "files": [
    {
      "path": "../../docs/dnd.mdx",
      "content": "---\ntitle: Drag & Drop\ndocs:\n  - route: /docs/components/draggable\n    title: Draggable\n  - route: /docs/dnd\n    title: Dnd Plugin\n---\n\n<ComponentPreview name=\"dnd-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Drag & drop of blocks for content movement and insertion within the editor.\n\n</PackageInfo>\n\n## Installation\n\n```bash\nnpm install @udecode/plate-dnd @udecode/plate-node-id react-dnd react-dnd-html5-backend\n```\n\n## Usage\n\n```tsx\nimport { DndPlugin } from '@udecode/plate-dnd';\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\n\nconst plugins = [\n  // ...otherPlugins,\n  NodeIdPlugin,\n  DndPlugin,\n];\n```\n\nThen, wrap your plugin components with [Draggable](/docs/components/draggable).\n\n## Plugins\n\n### `DndPlugin`\n\n<API name=\"DndPlugin\">\n<APIOptions>\n  <APIItem name=\"enableScroller\" type=\"boolean\" optional>\n    Enables the scroller feature.\n  </APIItem>\n  <APIItem name=\"scrollerProps\" type=\"Partial<ScrollerProps>\" optional>\n    Props for the `Scroller` component.\n  </APIItem>\n  <APIItem name=\"dropTarget\" type=\"{ id: string | null; line: DropLineDirection }\" optional>\n    The current drop target state containing both the target element id and drop line direction.\n  </APIItem>\n</APIOptions>\n</API>\n\n## API\n\n### `focusBlockStartById`\n\nSelects the start of a block by ID and focuses the editor.\n\n<API name=\"focusBlockStartById\">\n<APIParameters>\n  <APIItem name=\"id\" type=\"string\">\n    The ID of the block to be focused.\n  </APIItem>\n</APIParameters>\n</API>\n\n### `getBlocksWithId`\n\nReturns an array of blocks that have an ID.\n\n<API name=\"getBlocksWithId\">\n<APIOptions type=\"EditorNodesOptions\">\n  The options for getting node entries.\n</APIOptions>\n\n<APIReturns type=\"NodeEntry[]\">\n  Array of blocks that have an ID.\n</APIReturns>\n</API>\n\n### `selectBlockById`\n\n<API name=\"selectBlockById\">\n<APIParameters>\n  <APIItem name=\"id\" type=\"string\">\n    The ID of the block to select.\n  </APIItem>\n</APIParameters>\n</API>\n\n## Components\n\n### `withDraggable`\n\nEnhances a component with draggable behavior.\n\n<API name=\"withDraggable\">\n<APIParameters>\n  <APIItem name=\"Draggable\" type=\"React.FC\">\n    The draggable component to be rendered.\n  </APIItem>\n  <APIItem name=\"Component\" type=\"React.FC\">\n    The component to be enhanced with draggable behavior.\n  </APIItem>\n  <APIItem name=\"options\" type=\"WithDraggableOptions\" optional>\n    Options for draggable behavior.\n  </APIItem>\n</APIParameters>\n\n<APIOptions type=\"WithDraggableOptions\">\n  <APIItem name=\"level\" type=\"number | null\" optional>\n    The level of the draggable component.\n  </APIItem>\n  <APIItem name=\"filter\" type=\"(editor: PlateEditor, path: Path) => boolean\" optional>\n    Function that returns whether the component should be draggable.\n  </APIItem>\n  <APIItem name=\"allowReadOnly\" type=\"boolean\" optional>\n    Whether the component should be draggable in read-only mode.\n  </APIItem>\n  <APIItem name=\"draggableProps\" type=\"T\" optional>\n    Props to be passed to the draggable component.\n  </APIItem>\n</APIOptions>\n</API>\n\n### `DndScroller`\n\nA wrapper component for the `Scroller` component that is conditionally rendered based on the dragging state.\n\n<API name=\"DndScroller\">\n<APIState>\n  <APIItem name=\"enabled\" type=\"boolean\">\n    A flag indicating whether the scroll area is enabled. If set to false, the scroll functionality is disabled.\n  </APIItem>\n  <APIItem name=\"height\" type=\"number\">\n    Height of the scrollable area in pixels.\n  </APIItem>\n  <APIItem name=\"zIndex\" type=\"number\">\n    The stack order of the scrollable area. An element with a higher z-index is drawn in front of an element with a lower one.\n  </APIItem>\n  <APIItem name=\"minStrength\" type=\"number\">\n    The minimum strength (speed) of the scrolling action. Higher values will make the scroll action more sensitive.\n  </APIItem>\n  <APIItem name=\"strengthMultiplier\" type=\"number\">\n    A multiplier that increases the scroll speed. Higher values will result in faster scrolling.\n  </APIItem>\n  <APIItem name=\"containerRef\" type=\"RefObject<any>\">\n    Reference to the scrollable container DOM element.\n  </APIItem>\n  <APIItem name=\"scrollAreaProps\" type=\"HTMLAttributes<HTMLDivElement>\">\n    Additional props for the scroll area div element.\n  </APIItem>\n</APIState>\n</API>\n\n## Hooks\n\n### `useDndNode`\n\nA custom hook that combines the `useDragNode` and `useDropNode` hooks to enable dragging and dropping of a node from the editor. It provides a default preview for the dragged node, which can be customized or disabled.\n\n<API name=\"useDndNode\">\n<APIOptions type=\"UseDndNodeOptions\">\n  <APIItem name=\"element\" type=\"TElement\">\n    The node to be dragged.\n  </APIItem>\n  <APIItem name=\"type\" type=\"string\" optional>\n    The type of drag item.\n    - **Default:** `'block'`\n  </APIItem>\n  <APIItem name=\"nodeRef\" type=\"any\">\n    The ref of the node to be dragged.\n  </APIItem>\n  <APIItem name=\"orientation\" type=\"'horizontal' | 'vertical'\" optional>\n    The orientation of drag and drop.\n    - **Default:** `'vertical'`\n  </APIItem>\n  <APIItem name=\"canDropNode\" type=\"(args: { dragEntry: NodeEntry; dragItem: DragItemNode; dropEntry: NodeEntry; editor: PlateEditor }) => boolean\" optional>\n    Callback to determine if a node can be dropped at the current location.\n  </APIItem>\n  <APIItem name=\"preview\" type=\"previewOptions\" optional>\n    The preview options for the dragged node.\n  </APIItem>\n  <APIItem name=\"drag\" type=\"dragOptions\" optional>\n    The drag options for the dragged node.\n  </APIItem>\n  <APIItem name=\"drop\" type=\"dropOptions\" optional>\n    The drop options for the dragged node.\n  </APIItem>\n  <APIItem name=\"onDropHandler\" type=\"string\" optional>\n    Handler called when the node is dropped.\n  </APIItem>\n</APIOptions>\n\n<APIReturns type=\"object\">\n  <APIItem name=\"isDragging\" type=\"boolean\">\n    Whether the node is currently being dragged.\n  </APIItem>\n  <APIItem name=\"isOver\" type=\"boolean\">\n    Whether the dragged node is over a drop target.\n  </APIItem>\n  <APIItem name=\"dragRef\" type=\"ConnectDragSource\">\n    Drag reference for the draggable element.\n  </APIItem>\n</APIReturns>\n</API>\n\n### `useDragNode`\n\nA custom hook that enables dragging of a node from the editor using the `useDrag` hook from `react-dnd`.\n\n<API name=\"useDragNode\">\n<APIOptions type=\"UseDragNodeOptions\">\n  <APIItem name=\"element\" type=\"TElement\">\n    The node to be dragged.\n  </APIItem>\n  <APIItem name=\"item\" type=\"DragObject | DragObjectFactory<DragObject>\" optional>\n    Drag object or factory function that returns it.\n  </APIItem>\n</APIOptions>\n</API>\n\n### `useDraggable`\n\nA custom hook that enables draggable behavior for a given element. It provides a preview for the element, which can be customized or disabled.\n\n<API name=\"useDraggable\">\n<APIOptions type=\"object\">\n  <APIItem name=\"element\" type=\"TElement\">\n    The element to make draggable.\n  </APIItem>\n  <APIItem name=\"orientation\" type=\"'horizontal' | 'vertical'\" optional>\n    Orientation of drag and drop.\n    - **Default:** `'vertical'`\n  </APIItem>\n  <APIItem name=\"type\" type=\"string\" optional>\n    Type of drag item.\n    - **Default:** `'block'`\n  </APIItem>\n  <APIItem name=\"onDropHandler\" type=\"function\" optional>\n    Handler called when element is dropped.\n  </APIItem>\n</APIOptions>\n\n<APIReturns type=\"object\">\n  <APIItem name=\"handleRef\" type=\"(element: Element | React.ReactElement | React.RefObject<any> | null) => void\">\n    Drag source connector function.\n  </APIItem>\n  <APIItem name=\"isDragging\" type=\"boolean\">\n    Whether element is being dragged.\n  </APIItem>\n  <APIItem name=\"previewRef\" type=\"React.RefObject<HTMLDivElement>\">\n    Reference to draggable element.\n  </APIItem>\n</APIReturns>\n</API>\n\n### `useDropNode`\n\nA custom hook that enables dropping a node on the editor. It uses the `useDrop` hook from `react-dnd` to handle the drop behavior.\n\n<API name=\"useDropNode\">\n<APIOptions type=\"UseDropNodeOptions\">\n  <APIItem name=\"nodeRef\" type=\"any\">\n    Reference to the node being dragged.\n  </APIItem>\n  <APIItem name=\"element\" type=\"TElement\">\n    The node to which the drop line is attached.\n  </APIItem>\n  <APIItem name=\"dropLine\" type=\"string\">\n    Current value of the drop line.\n  </APIItem>\n  <APIItem name=\"onChangeDropLine\" type=\"function\">\n    Callback when drop line changes.\n  </APIItem>\n  <APIItem name=\"onDropHandler\" type=\"object\">\n    Callback that intercepts drop handling.\n    - Returns `true` to prevent default behavior\n    - Returns `false` to run default behavior after\n  </APIItem>\n</APIOptions>\n</API>\n\n### `useDropLine`\n\nReturns the current drop line state for an element.\n\n<API name=\"useDropLine\">\n<APIOptions type=\"object\">\n  <APIItem name=\"id\" type=\"string\" optional>\n    Element ID to show drop line for.\n    - **Default:** Current element ID\n  </APIItem>\n  <APIItem name=\"orientation\" type=\"'horizontal' | 'vertical'\" optional>\n    Filter drop lines by orientation.\n    - **Default:** `'vertical'`\n  </APIItem>\n</APIOptions>\n\n<APIReturns type=\"object\">\n  <APIItem name=\"dropLine\" type=\"'top' | 'bottom' | 'left' | 'right' | ''\">\n    Current drop line direction.\n  </APIItem>\n</APIReturns>\n</API>\n",
      "type": "registry:file",
      "target": "content/docs/plate/plugins/dnd.mdx"
    }
  ]
}