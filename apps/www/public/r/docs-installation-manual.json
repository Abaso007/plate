{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "docs-installation-manual",
  "type": "registry:file",
  "title": "Manual Installation",
  "description": "Install and configure Plate in your React project without relying on UI component libraries.",
  "files": [
    {
      "path": "../../docs/installation/manual.mdx",
      "content": "---\ntitle: Manual Installation\ndescription: Install and configure Plate in your React project without relying on UI component libraries.\n---\n\nThis guide walks you through setting up Plate from scratch, giving you full control over styling and component rendering. This approach is ideal if you're not using a UI library like shadcn/ui or Tailwind CSS.\n\n<Steps>\n\n### Create Project\n\n<Callout type=\"info\">\nThis guide uses **Vite** for demonstrating the initial project setup. Plate is framework-agnostic and integrates seamlessly with other React environments like Next.js or Remix. You can adapt the general setup principles to your chosen framework.\n</Callout>\n\nTo begin with Vite, create a new project and select the **React + TypeScript** template:\n\n```bash\nnpm create vite@latest\n```\n\n### Install Core Dependencies\n\nFirst, install the necessary Plate packages. These packages provide the core editor functionality, React integration, and basic plugins for marks and elements.\n\n```bash\nnpm add @udecode/plate @udecode/plate-basic-elements @udecode/plate-basic-marks\n```\n\n-   `@udecode/plate`: The core Plate engine and React components.\n-   `@udecode/plate-basic-elements`: Plugin for common block elements like paragraphs and headings.\n-   `@udecode/plate-basic-marks`: Plugin for basic text formatting like bold, italic, and underline.\n\n### TypeScript Configuration\n\nPlate provides ESM packages. If you're using TypeScript, ensure your `tsconfig.json` is configured correctly. The recommended setup for Plate requires TypeScript 5.0+ with the `\"moduleResolution\": \"bundler\"` setting:\n\n```jsonc\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    // ... other options\n    \"module\": \"esnext\", // or commonjs if your setup requires it and handles ESM interop\n    \"moduleResolution\": \"bundler\",\n    // ... other options\n  },\n}\n```\n\n<Callout type=\"info\">\n  If you cannot use `\"moduleResolution\": \"bundler\"` or are on an older TypeScript version, please see our [full TypeScript guide](/docs/typescript) for alternative configurations using path aliases.\n</Callout>\n\n### Create Your First Editor\n\nStart by creating a basic editor component. This example sets up a simple editor.\n\n```tsx title=\"src/App.tsx\"\nimport React from 'react';\nimport type { Value } from '@udecode/plate';\nimport { Plate, PlateContent, usePlateEditor } from '@udecode/plate/react';\n\nexport default function App() {\n  const editor = usePlateEditor();\n\n  return (\n    <Plate editor={editor}>\n      <PlateContent \n        style={{ padding: '16px 64px', minHeight: '100px' }}\n        placeholder=\"Type your amazing content here...\"\n      />\n    </Plate>\n  );\n}\n```\n\n<Callout type=\"info\">\n  `usePlateEditor` creates a memoized editor instance, ensuring stability across re-renders. For a non-memoized version, use `createPlateEditor` from `@udecode/plate/react`.\n</Callout>\n\n<ComponentPreview name=\"installation-next-01-editor-demo\" height=\"200px\" />\n\nAt this point, you'll have a very basic editor capable of displaying and editing plain text.\n\n### Adding Basic Marks\n\nLet's add support for basic text formatting like bold, italic, and underline.\n\nUpdate your editor to include the `BasicMarksPlugin` and define how these marks should be rendered.\n\n```tsx showLineNumbers title=\"src/App.tsx\" {3-4,11,13,15,24-31}\nimport React from 'react';\nimport type { Value } from '@udecode/plate';\nimport { BasicMarksPlugin } from '@udecode/plate-basic-marks/react'; // Import the plugin\nimport { Plate, PlateContent, PlateLeaf, usePlateEditor, type PlateLeafProps } from '@udecode/plate/react';\n\nconst initialValue: Value = [\n  {\n    type: 'p',\n    children: [\n      { text: 'Hello! Try out the ' },\n      { text: 'bold', bold: true },\n      { text: ', ' },\n      { text: 'italic', italic: true },\n      { text: ', and ' },\n      { text: 'underline', underline: true },\n      { text: ' formatting.' },\n    ],\n  },\n];\n\nexport default function App() {\n  const editor = usePlateEditor({\n    value: initialValue,\n    plugins: [BasicMarksPlugin], // Add the marks plugin\n    components: {\n      // Define how each mark type should be rendered\n      // We use PlateLeaf and pass an 'as' prop for semantic HTML, or render directly.\n      bold: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"strong\" />,\n      italic: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"em\" />,\n      underline: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"u\" />,\n    },\n  });\n\n  return (\n    <Plate editor={editor}>\n      {/* You would typically add a toolbar here to toggle marks */}\n      <PlateContent style={{ padding: '16px 64px', minHeight: '100px' }} />\n    </Plate>\n  );\n}\n```\n\n<Callout type=\"info\" title=\"Component Mapping is Key\">\n  When adding plugins for new mark types (like `bold`), you **must** map their plugin `key` (e.g., `'bold'`) to your React components in the `components` option of `usePlateEditor`. This tells Plate how to render them. `PlateLeaf` is a helper component from `@udecode/plate/react` that simplifies rendering leaf nodes.\n</Callout>\n\n<ComponentPreview name=\"installation-next-02-marks-demo\" height=\"200px\" />\n\nYou'll need to implement your own toolbar to apply these marks. For example, to toggle bold: `editor.tf.toggleMark('bold')`.\n\n### Adding Basic Elements\n\nNow, let's add support for block-level elements like paragraphs (which is often a default), headings, and blockquotes.\n\n```tsx showLineNumbers title=\"src/App.tsx\" {4-5,8-9,23,27-30}\nimport React from 'react';\nimport type { Value } from '@udecode/plate';\nimport { BasicMarksPlugin } from '@udecode/plate-basic-marks/react';\nimport { BasicElementsPlugin } from '@udecode/plate-basic-elements/react'; // Import the plugin\nimport { Plate, PlateContent, PlateLeaf, PlateElement, usePlateEditor, type PlateLeafProps, type PlateElementProps } from '@udecode/plate/react';\n\nconst initialValue: Value = [\n  { type: 'h3', children: [{ text: 'Title' }] },\n  { type: 'blockquote', children: [{ text: 'This is a quote.' }] },\n  {\n    type: 'p',\n    children: [\n      { text: 'With some ' },\n      { text: 'bold', bold: true },\n      { text: ' text for emphasis!' },\n    ],\n  },\n];\n\nexport default function App() {\n  const editor = usePlateEditor({\n    value: initialValue,\n    plugins: [BasicElementsPlugin, BasicMarksPlugin], // Add BasicElementsPlugin\n    components: {\n      // Define how each element type should be rendered\n      // We use PlateElement and pass an 'as' prop for semantic HTML, or render directly.\n      h1: (props: PlateElementProps) => <PlateElement {...props} as=\"h1\" />,\n      h2: (props: PlateElementProps) => <PlateElement {...props} as=\"h2\" />,\n      p: (props: PlateElementProps) => <PlateElement {...props} as=\"p\" />,\n      blockquote: (props: PlateElementProps) => <PlateElement {...props} as=\"blockquote\" style={{ borderLeft: '2px solid #eee', marginLeft: 0, marginRight: 0, paddingLeft: '16px 64px', color: '#aaa' }} />,\n      // Marks from previous step\n      bold: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"strong\" />,\n      italic: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"em\" />,\n      underline: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"u\" />,\n    },\n  });\n\n  return (\n    <Plate editor={editor}>\n      {/* Toolbar here */}\n      <PlateContent style={{ padding: '16px 64px', minHeight: '100px' }}/>\n    </Plate>\n  );\n}\n```\n\n<Callout type=\"note\">\n  Similar to marks, you map element `type`s (e.g., `'h1'`, `'p'`) to components. `PlateElement` is a helper for rendering element nodes. You'll need to implement UI (e.g., a dropdown) to toggle block types, for example, using `editor.tf.toggleBlock('h1')`.\n</Callout>\n\n<ComponentPreview name=\"installation-next-03-elements-demo\" height=\"200px\" />\n\n### Handling Editor Value\n\nTo make the editor's content persistent, let's integrate state management to save and load the editor's value.\n\n```tsx showLineNumbers title=\"src/App.tsx\" {34-40,46-48,52-54}\nimport React, { useCallback } from 'react';\nimport type { Value } from '@udecode/plate';\nimport { BasicMarksPlugin } from '@udecode/plate-basic-marks/react';\nimport { BasicElementsPlugin } from '@udecode/plate-basic-elements/react';\nimport { Plate, PlateContent, PlateLeaf, PlateElement, usePlateEditor, type PlateLeafProps, type PlateElementProps } from '@udecode/plate/react';\n\nconst initialValue: Value = [\n  { type: 'h3', children: [{ text: 'Title' }] },\n  { type: 'blockquote', children: [{ text: 'This is a quote.' }] },\n  {\n    type: 'p',\n    children: [\n      { text: 'With some ' },\n      { text: 'bold', bold: true },\n      { text: ' text for emphasis!' },\n    ],\n  },\n];\n\nexport default function App() {\n  const editor = usePlateEditor({\n    plugins: [BasicElementsPlugin, BasicMarksPlugin],\n    components: {\n      h1: (props: PlateElementProps) => <PlateElement {...props} as=\"h1\" />,\n      h2: (props: PlateElementProps) => <PlateElement {...props} as=\"h2\" />,\n      p: (props: PlateElementProps) => <PlateElement {...props} as=\"p\" />,\n      blockquote: (props: PlateElementProps) => (\n        <PlateElement {...props} as=\"blockquote\" style={{ borderLeft: '2px solid #eee', marginLeft: 0, marginRight: 0, paddingLeft: '16px 64px', color: '#aaa' }} />\n      ),\n      bold: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"strong\" />,\n      italic: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"em\" />,\n      underline: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"u\" />,\n    },\n    value: () => {\n      const savedValue = localStorage.getItem('plate-value-demo');\n      if (savedValue) {\n        return JSON.parse(savedValue);\n      }\n      return initialValue;\n    },\n  });\n\n  return (\n    <Plate \n      editor={editor}\n      onChange={({ value }) => {\n        localStorage.setItem('plate-value-demo', JSON.stringify(value));\n      }}\n    >\n      {/* <FixedToolbar> */}\n      {/* ...buttons */}\n        <button onClick={() => editor.tf.setValue(initialValue)}>\n          Reset\n        </button>\n      {/* </FixedToolbar> */}\n      <PlateContent \n        style={{ padding: '16px 64px', minHeight: '100px' }} \n        placeholder=\"Type your amazing content here...\"\n      />\n    </Plate>\n  );\n}\n```\n\n<Callout type=\"info\" title=\"Value Management\">\n  The example above demonstrates a basic pattern for managing editor value:\n  - Initial value is set through the `value` option in `usePlateEditor`\n  - Changes can be handled via the `onChange` prop on `<Plate>`\n  - The reset button uses `editor.tf.setValue()` to restore the initial value\n  - To control the value, see [Controlled Value](/docs/controlled)\n</Callout>\n\n<ComponentPreview name=\"installation-next-demo\" />\n\n### Next Steps\n\nYou've now set up a basic Plate editor manually! From here, you can:\n\n*   **Add Styling:**\n    *   For a quick start with pre-built components, consider using [Plate UI](/docs/installation/plate-ui)\n    *   Or continue styling manually using CSS, CSS-in-JS libraries, or your preferred styling solution\n*   **[Add Plugins](/docs/plugins):** Plate has a rich ecosystem of plugins for features like tables, mentions, images, lists, and more. Install their packages (e.g., `@udecode/plate-table`) and add them to your `plugins` array.\n*   **[Build a Toolbar](/docs/toolbar):** Create React components for toolbar buttons that use the [Editor Transforms](/docs/transforms) to apply formatting (e.g., `editor.tf.toggleMark('bold')`, `editor.tf.toggleBlock('h1')`). You can also the editor state with the [Editor API](/docs/api).\n*   [Editor Configuration](/docs/editor)\n*   [Plugin Configuration](/docs/plugin)\n*   [Plugin Components](/docs/plugin-components)\n\n</Steps>\n",
      "type": "registry:file",
      "target": "content/docs/plate/installation/manual.mdx"
    }
  ]
}