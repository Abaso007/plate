{
  "dependencies": ["@udecode/plate-table"],
  "doc": {
    "description": "A table cell with resizable borders and selection.",
    "docs": [
      {
        "route": "/docs/table"
      },
      {
        "route": "https://pro.platejs.org/docs/components/table-cell-element"
      }
    ],
    "examples": ["table-demo"]
  },
  "files": [
    {
<<<<<<< HEAD
      "content": "'use client';\n\nimport React from 'react';\n\nimport type { TTableCellElement } from '@udecode/plate-table';\n\nimport { cn, withProps, withRef } from '@udecode/cn';\nimport {\n  useEditorPlugin,\n  useElementSelector,\n  useReadOnly,\n} from '@udecode/plate/react';\nimport { useBlockSelected } from '@udecode/plate-selection/react';\nimport {\n  TablePlugin,\n  TableRowPlugin,\n  useTableCellElement,\n  useTableCellElementResizable,\n} from '@udecode/plate-table/react';\nimport { cva } from 'class-variance-authority';\n\nimport { blockSelectionVariants } from './block-selection';\nimport { PlateElement } from './plate-element';\nimport { ResizeHandle } from './resizable';\n\nexport const TableCellElement = withRef<\n  typeof PlateElement,\n  {\n    isHeader?: boolean;\n  }\n>(({ children, className, isHeader, style, ...props }, ref) => {\n  const { api } = useEditorPlugin(TablePlugin);\n  const readOnly = useReadOnly();\n  const element = props.element as TTableCellElement;\n\n  const rowId = useElementSelector(([node]) => node.id as string, [], {\n    key: TableRowPlugin.key,\n  });\n  const isSelectingRow = useBlockSelected(rowId);\n\n  const {\n    borders,\n    colIndex,\n    colSpan,\n    isSelectingCell,\n    minHeight,\n    rowIndex,\n    selected,\n    width,\n  } = useTableCellElement();\n\n  const { bottomProps, hiddenLeft, leftProps, rightProps } =\n    useTableCellElementResizable({\n      colIndex,\n      colSpan,\n      rowIndex,\n    });\n\n  return (\n    <PlateElement\n      ref={ref}\n      as={isHeader ? 'th' : 'td'}\n      className={cn(\n        className,\n        'relative h-full overflow-visible border-none bg-background p-0',\n        element.background ? 'bg-[--cellBackground]' : 'bg-background',\n\n        cn(\n          isHeader && 'text-left [&_>_*]:m-0',\n          'before:size-full',\n          selected && 'before:z-10 before:bg-muted',\n          \"before:absolute before:box-border before:select-none before:content-['']\",\n          borders &&\n            cn(\n              borders.bottom?.size && `before:border-b before:border-b-border`,\n              borders.right?.size && `before:border-r before:border-r-border`,\n              borders.left?.size && `before:border-l before:border-l-border`,\n              borders.top?.size && `before:border-t before:border-t-border`\n            )\n        )\n      )}\n      style={\n        {\n          '--cellBackground': element.background,\n          maxWidth: width || 240,\n          minWidth: width || 120,\n          ...style,\n        } as React.CSSProperties\n      }\n      {...{\n        colSpan: api.table.getColSpan(element),\n        rowSpan: api.table.getRowSpan(element),\n      }}\n      {...props}\n    >\n      <div\n        className=\"relative z-20 box-border h-full px-4 py-2\"\n        style={{ minHeight }}\n      >\n        {children}\n      </div>\n\n      {!isSelectingCell && (\n        <div\n          className=\"group absolute top-0 size-full select-none\"\n          contentEditable={false}\n          suppressContentEditableWarning={true}\n        >\n          {!readOnly && (\n            <>\n              <ResizeHandle\n                {...rightProps}\n                className=\"-right-1 -top-2 h-[calc(100%_+_8px)] w-2\"\n                data-col={colIndex}\n              />\n              <ResizeHandle {...bottomProps} className=\"-bottom-1 h-2\" />\n              {!hiddenLeft && (\n                <ResizeHandle\n                  {...leftProps}\n                  className=\"-left-1 top-0 w-2\"\n                  data-resizer-left={colIndex === 0 ? 'true' : undefined}\n                />\n              )}\n\n              <div\n                className={cn(\n                  'absolute top-0 z-30 hidden h-full w-1 bg-ring',\n                  'right-[-1.5px]',\n                  columnResizeVariants({ colIndex: colIndex as any })\n                )}\n              />\n              {colIndex === 0 && (\n                <div\n                  className={cn(\n                    'absolute top-0 z-30 h-full w-1 bg-ring',\n                    'left-[-1.5px]',\n                    'hidden animate-in fade-in group-has-[[data-resizer-left]:hover]/table:block group-has-[[data-resizer-left][data-resizing=\"true\"]]/table:block'\n                  )}\n                />\n              )}\n            </>\n          )}\n        </div>\n      )}\n\n      {isSelectingRow && (\n        <div className={blockSelectionVariants()} contentEditable={false} />\n      )}\n    </PlateElement>\n  );\n});\n\nexport const TableCellHeaderElement = withProps(TableCellElement, {\n  isHeader: true,\n});\n\nconst columnResizeVariants = cva('hidden animate-in fade-in', {\n  variants: {\n    colIndex: {\n      0: 'group-has-[[data-col=\"0\"]:hover]/table:block group-has-[[data-col=\"0\"][data-resizing=\"true\"]]/table:block',\n      1: 'group-has-[[data-col=\"1\"]:hover]/table:block group-has-[[data-col=\"1\"][data-resizing=\"true\"]]/table:block',\n      2: 'group-has-[[data-col=\"2\"]:hover]/table:block group-has-[[data-col=\"2\"][data-resizing=\"true\"]]/table:block',\n      3: 'group-has-[[data-col=\"3\"]:hover]/table:block group-has-[[data-col=\"3\"][data-resizing=\"true\"]]/table:block',\n      4: 'group-has-[[data-col=\"4\"]:hover]/table:block group-has-[[data-col=\"4\"][data-resizing=\"true\"]]/table:block',\n      5: 'group-has-[[data-col=\"5\"]:hover]/table:block group-has-[[data-col=\"5\"][data-resizing=\"true\"]]/table:block',\n      6: 'group-has-[[data-col=\"6\"]:hover]/table:block group-has-[[data-col=\"6\"][data-resizing=\"true\"]]/table:block',\n      7: 'group-has-[[data-col=\"7\"]:hover]/table:block group-has-[[data-col=\"7\"][data-resizing=\"true\"]]/table:block',\n      8: 'group-has-[[data-col=\"8\"]:hover]/table:block group-has-[[data-col=\"8\"][data-resizing=\"true\"]]/table:block',\n      9: 'group-has-[[data-col=\"9\"]:hover]/table:block group-has-[[data-col=\"9\"][data-resizing=\"true\"]]/table:block',\n      10: 'group-has-[[data-col=\"10\"]:hover]/table:block group-has-[[data-col=\"10\"][data-resizing=\"true\"]]/table:block',\n    },\n  },\n});\n",
=======
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn, withProps, withRef } from '@udecode/cn';\nimport { useEditorPlugin, useElement } from '@udecode/plate-common/react';\nimport { useBlockSelected } from '@udecode/plate-selection/react';\nimport {\n  TablePlugin,\n  TableRowPlugin,\n  useTableCellElement,\n  useTableCellElementResizable,\n} from '@udecode/plate-table/react';\nimport { cva } from 'class-variance-authority';\nimport { useReadOnly } from 'slate-react';\n\nimport { blockSelectionVariants } from './block-selection';\nimport { PlateElement } from './plate-element';\nimport { ResizeHandle } from './resizable';\n\nexport const TableCellElement = withRef<\n  typeof PlateElement,\n  {\n    isHeader?: boolean;\n  }\n>(({ children, className, isHeader, style, ...props }, ref) => {\n  const { element } = props;\n  const { api } = useEditorPlugin(TablePlugin);\n  const readOnly = useReadOnly();\n  const rowElement = useElement(TableRowPlugin.key);\n  const isSelectingRow = useBlockSelected(rowElement.id as string);\n\n  const {\n    borders,\n    colIndex,\n    colSpan,\n    isSelectingCell,\n    minHeight,\n    rowIndex,\n    selected,\n    width,\n  } = useTableCellElement();\n\n  const { bottomProps, hiddenLeft, leftProps, rightProps } =\n    useTableCellElementResizable({\n      colIndex,\n      colSpan,\n      rowIndex,\n    });\n\n  return (\n    <PlateElement\n      ref={ref}\n      as={isHeader ? 'th' : 'td'}\n      className={cn(\n        className,\n        'relative h-full overflow-visible border-none bg-background p-0',\n        element.background ? 'bg-[--cellBackground]' : 'bg-background',\n\n        cn(\n          isHeader && 'text-left [&_>_*]:m-0',\n          'before:size-full',\n          selected && 'before:z-10 before:bg-muted',\n          \"before:absolute before:box-border before:select-none before:content-['']\",\n          borders &&\n            cn(\n              borders.bottom?.size && `before:border-b before:border-b-border`,\n              borders.right?.size && `before:border-r before:border-r-border`,\n              borders.left?.size && `before:border-l before:border-l-border`,\n              borders.top?.size && `before:border-t before:border-t-border`\n            )\n        )\n      )}\n      style={\n        {\n          '--cellBackground': element.background,\n          maxWidth: width || 240,\n          minWidth: width || 120,\n          ...style,\n        } as React.CSSProperties\n      }\n      {...{\n        colSpan: api.table.getColSpan(element),\n        rowSpan: api.table.getRowSpan(element),\n      }}\n      {...props}\n    >\n      <div\n        className=\"relative z-20 box-border h-full px-4 py-2\"\n        style={{ minHeight }}\n      >\n        {children}\n      </div>\n\n      {!isSelectingCell && (\n        <div\n          className=\"group absolute top-0 size-full select-none\"\n          contentEditable={false}\n          suppressContentEditableWarning={true}\n        >\n          {!readOnly && (\n            <>\n              <ResizeHandle\n                {...rightProps}\n                className=\"-right-1 -top-2 h-[calc(100%_+_8px)] w-2\"\n                data-col={colIndex}\n              />\n              <ResizeHandle {...bottomProps} className=\"-bottom-1 h-2\" />\n              {!hiddenLeft && (\n                <ResizeHandle\n                  {...leftProps}\n                  className=\"-left-1 top-0 w-2\"\n                  data-resizer-left={colIndex === 0 ? 'true' : undefined}\n                />\n              )}\n\n              <div\n                className={cn(\n                  'absolute top-0 z-30 hidden h-full w-1 bg-ring',\n                  'right-[-1.5px]',\n                  columnResizeVariants({ colIndex: colIndex as any })\n                )}\n              />\n              {colIndex === 0 && (\n                <div\n                  className={cn(\n                    'absolute top-0 z-30 h-full w-1 bg-ring',\n                    'left-[-1.5px]',\n                    'hidden animate-in fade-in group-has-[[data-resizer-left]:hover]/table:block group-has-[[data-resizer-left][data-resizing=\"true\"]]/table:block'\n                  )}\n                />\n              )}\n            </>\n          )}\n        </div>\n      )}\n\n      {isSelectingRow && (\n        <div className={blockSelectionVariants()} contentEditable={false} />\n      )}\n    </PlateElement>\n  );\n});\n\nTableCellElement.displayName = 'TableCellElement';\n\nexport const TableCellHeaderElement = withProps(TableCellElement, {\n  isHeader: true,\n});\n\nconst columnResizeVariants = cva('hidden animate-in fade-in', {\n  variants: {\n    colIndex: {\n      0: 'group-has-[[data-col=\"0\"]:hover]/table:block group-has-[[data-col=\"0\"][data-resizing=\"true\"]]/table:block',\n      1: 'group-has-[[data-col=\"1\"]:hover]/table:block group-has-[[data-col=\"1\"][data-resizing=\"true\"]]/table:block',\n      2: 'group-has-[[data-col=\"2\"]:hover]/table:block group-has-[[data-col=\"2\"][data-resizing=\"true\"]]/table:block',\n      3: 'group-has-[[data-col=\"3\"]:hover]/table:block group-has-[[data-col=\"3\"][data-resizing=\"true\"]]/table:block',\n      4: 'group-has-[[data-col=\"4\"]:hover]/table:block group-has-[[data-col=\"4\"][data-resizing=\"true\"]]/table:block',\n      5: 'group-has-[[data-col=\"5\"]:hover]/table:block group-has-[[data-col=\"5\"][data-resizing=\"true\"]]/table:block',\n      6: 'group-has-[[data-col=\"6\"]:hover]/table:block group-has-[[data-col=\"6\"][data-resizing=\"true\"]]/table:block',\n      7: 'group-has-[[data-col=\"7\"]:hover]/table:block group-has-[[data-col=\"7\"][data-resizing=\"true\"]]/table:block',\n      8: 'group-has-[[data-col=\"8\"]:hover]/table:block group-has-[[data-col=\"8\"][data-resizing=\"true\"]]/table:block',\n      9: 'group-has-[[data-col=\"9\"]:hover]/table:block group-has-[[data-col=\"9\"][data-resizing=\"true\"]]/table:block',\n      10: 'group-has-[[data-col=\"10\"]:hover]/table:block group-has-[[data-col=\"10\"][data-resizing=\"true\"]]/table:block',\n    },\n  },\n});\n",
>>>>>>> main
      "path": "plate-ui/table-cell-element.tsx",
      "target": "components/plate-ui/table-cell-element.tsx",
      "type": "registry:ui"
    },
    {
<<<<<<< HEAD
      "content": "import React from 'react';\n\nimport type { SlateElementProps } from '@udecode/plate';\n\nimport { cn } from '@udecode/cn';\nimport { SlateElement } from '@udecode/plate';\nimport { type TTableCellElement, BaseTablePlugin } from '@udecode/plate-table';\n\nexport function TableCellElementStatic({\n  children,\n  className,\n  isHeader,\n  style,\n  ...props\n}: SlateElementProps<TTableCellElement> & {\n  isHeader?: boolean;\n}) {\n  const { editor, element } = props;\n  const { api } = editor.getPlugin(BaseTablePlugin);\n\n  const { minHeight, width } = api.table.getCellSize({ element });\n  const borders = api.table.getCellBorders({ element });\n\n  return (\n    <SlateElement\n      as={isHeader ? 'th' : 'td'}\n      className={cn(\n        className,\n        'relative h-full overflow-visible border-none bg-background p-0',\n        element.background ? 'bg-[--cellBackground]' : 'bg-background',\n        cn(\n          isHeader && 'text-left font-normal [&_>_*]:m-0',\n          'before:size-full',\n          \"before:absolute before:box-border before:select-none before:content-['']\",\n          borders &&\n            cn(\n              borders.bottom?.size && `before:border-b before:border-b-border`,\n              borders.right?.size && `before:border-r before:border-r-border`,\n              borders.left?.size && `before:border-l before:border-l-border`,\n              borders.top?.size && `before:border-t before:border-t-border`\n            )\n        )\n      )}\n      style={\n        {\n          '--cellBackground': element.background,\n          maxWidth: width || 240,\n          minWidth: width || 120,\n          ...style,\n        } as React.CSSProperties\n      }\n      {...{\n        colSpan: api.table.getColSpan(element),\n        rowSpan: api.table.getRowSpan(element),\n      }}\n      {...props}\n    >\n      <div\n        className=\"relative z-20 box-border h-full px-4 py-2\"\n        style={{ minHeight }}\n      >\n        {children}\n      </div>\n    </SlateElement>\n  );\n}\n\nexport function TableCellHeaderStaticElement(props: SlateElementProps) {\n  return <TableCellElementStatic {...props} isHeader />;\n}\n",
=======
      "content": "import React from 'react';\n\nimport type { SlateElementProps } from '@udecode/plate-common';\nimport type { TTableCellElement } from '@udecode/plate-table';\n\nimport { cn } from '@udecode/cn';\nimport { SlateElement } from '@udecode/plate-common';\nimport { TablePlugin } from '@udecode/plate-table/react';\n\nexport function TableCellElementStatic({\n  children,\n  className,\n  isHeader,\n  style,\n  ...props\n}: SlateElementProps<TTableCellElement> & {\n  isHeader?: boolean;\n}) {\n  const { editor, element } = props;\n  const { api } = editor.getPlugin(TablePlugin);\n\n  const { minHeight, width } = api.table.getCellSize({ element });\n  const borders = api.table.getCellBorders({ element });\n\n  return (\n    <SlateElement\n      as={isHeader ? 'th' : 'td'}\n      className={cn(\n        className,\n        'relative h-full overflow-visible border-none bg-background p-0',\n        element.background ? 'bg-[--cellBackground]' : 'bg-background',\n        cn(\n          isHeader && 'text-left font-normal [&_>_*]:m-0',\n          'before:size-full',\n          \"before:absolute before:box-border before:select-none before:content-['']\",\n          borders &&\n            cn(\n              borders.bottom?.size && `before:border-b before:border-b-border`,\n              borders.right?.size && `before:border-r before:border-r-border`,\n              borders.left?.size && `before:border-l before:border-l-border`,\n              borders.top?.size && `before:border-t before:border-t-border`\n            )\n        )\n      )}\n      style={\n        {\n          '--cellBackground': element.background,\n          maxWidth: width || 240,\n          minWidth: width || 120,\n          ...style,\n        } as React.CSSProperties\n      }\n      {...{\n        colSpan: api.table.getColSpan(element),\n        rowSpan: api.table.getRowSpan(element),\n      }}\n      {...props}\n    >\n      <div\n        className=\"relative z-20 box-border h-full px-4 py-2\"\n        style={{ minHeight }}\n      >\n        {children}\n      </div>\n    </SlateElement>\n  );\n}\n\nexport function TableCellHeaderStaticElement(props: SlateElementProps) {\n  return <TableCellElementStatic {...props} isHeader />;\n}\n",
>>>>>>> main
      "path": "plate-ui/table-cell-element-static.tsx",
      "target": "components/plate-ui/table-cell-element-static.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "table-cell-element",
  "registryDependencies": ["resizable", "plate-element"],
  "type": "registry:ui"
}
