{
  "dependencies": [
    "@udecode/plate-common",
    "@udecode/plate-ai",
    "@udecode/cn",
    "@udecode/plate-basic-marks",
    "@udecode/plate-block-quote",
    "@udecode/plate-code-block",
    "@udecode/plate-comments",
    "@udecode/plate-date",
    "@udecode/plate-dnd",
    "@udecode/plate-docx",
    "@udecode/plate-emoji",
    "@udecode/plate-excalidraw",
    "@udecode/plate-font",
    "@udecode/plate-heading",
    "@udecode/plate-highlight",
    "@udecode/plate-horizontal-rule",
    "@udecode/plate-indent",
    "@udecode/plate-indent-list",
    "@udecode/plate-juice",
    "@udecode/plate-kbd",
    "@udecode/plate-layout",
    "@udecode/plate-line-height",
    "@udecode/plate-link",
    "@udecode/plate-list",
    "@udecode/plate-markdown",
    "@udecode/plate-media",
    "@udecode/plate-mention",
    "@udecode/plate-node-id",
    "@udecode/plate-reset-node",
    "@udecode/plate-select",
    "@udecode/plate-selection",
    "@udecode/plate-slash-command",
    "@udecode/plate-tabbable",
    "@udecode/plate-table",
    "@udecode/plate-toggle",
    "@udecode/plate-trailing-block",
    "@udecode/plate-alignment",
    "@udecode/plate-autoformat",
    "@udecode/plate-break",
    "@udecode/plate-caption",
    "react-dnd",
    "react-dnd-html5-backend",
    "prismjs"
  ],
  "description": "An AI editor.",
  "files": [
    {
      "content": "import { PlateEditor } from '@/components/editor/plate-editor';\n\nexport default function Page() {\n  return (\n    <div className=\"h-screen w-full\" data-registry=\"plate\">\n      <PlateEditor />\n    </div>\n  );\n}\n",
      "path": "block/editor-ai/page.tsx",
      "target": "app/editor/page.tsx",
      "type": "registry:page"
    },
    {
      "content": "'use client';\n\nimport React, { useRef } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { Plate } from '@udecode/plate-common/react';\n\nimport { useCreateEditor } from '@/components/editor/use-create-editor';\nimport { CommentsPopover } from '@/components/plate-ui/comments-popover';\nimport { CursorOverlay } from '@/components/plate-ui/cursor-overlay';\nimport { Editor, EditorContainer } from '@/components/plate-ui/editor';\nimport { FixedToolbar } from '@/components/plate-ui/fixed-toolbar';\nimport { FixedToolbarButtons } from '@/components/plate-ui/fixed-toolbar-buttons';\nimport { FloatingToolbar } from '@/components/plate-ui/floating-toolbar';\nimport { FloatingToolbarButtons } from '@/components/plate-ui/floating-toolbar-buttons';\n\nexport function PlateEditor() {\n  const containerRef = useRef(null);\n\n  const editor = useCreateEditor();\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Plate editor={editor}>\n        <FixedToolbar>\n          <FixedToolbarButtons />\n        </FixedToolbar>\n\n        <EditorContainer\n          id=\"scroll_container\"\n          ref={containerRef}\n          variant=\"demo\"\n        >\n          <Editor variant=\"demo\" />\n\n          <FloatingToolbar>\n            <FloatingToolbarButtons />\n          </FloatingToolbar>\n\n          <CommentsPopover />\n\n          <CursorOverlay containerRef={containerRef} />\n        </EditorContainer>\n      </Plate>\n    </DndProvider>\n  );\n}\n",
      "path": "block/editor-ai/components/editor/plate-editor.tsx",
      "target": "components/editor/plate-editor.tsx",
      "type": "registry:component"
    },
    {
      "content": "import React from 'react';\n\nimport { withProps } from '@udecode/cn';\nimport { AIPlugin } from '@udecode/plate-ai/react';\nimport { AlignPlugin } from '@udecode/plate-alignment/react';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  SubscriptPlugin,\n  SuperscriptPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { ExitBreakPlugin, SoftBreakPlugin } from '@udecode/plate-break/react';\nimport { CaptionPlugin } from '@udecode/plate-caption/react';\nimport {\n  isCodeBlockEmpty,\n  isSelectionAtCodeBlockStart,\n  unwrapCodeBlock,\n} from '@udecode/plate-code-block';\nimport {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n  CodeSyntaxPlugin,\n} from '@udecode/plate-code-block/react';\nimport { CommentsPlugin } from '@udecode/plate-comments/react';\nimport {\n  isBlockAboveEmpty,\n  isSelectionAtBlockStart,\n  someNode,\n} from '@udecode/plate-common';\nimport {\n  ParagraphPlugin,\n  PlateElement,\n  PlateLeaf,\n  usePlateEditor,\n} from '@udecode/plate-common/react';\nimport { DatePlugin } from '@udecode/plate-date/react';\nimport { DndPlugin } from '@udecode/plate-dnd';\nimport { DocxPlugin } from '@udecode/plate-docx';\nimport { EmojiInputPlugin, EmojiPlugin } from '@udecode/plate-emoji/react';\nimport { ExcalidrawPlugin } from '@udecode/plate-excalidraw/react';\nimport {\n  FontBackgroundColorPlugin,\n  FontColorPlugin,\n  FontSizePlugin,\n} from '@udecode/plate-font/react';\nimport { HEADING_KEYS, HEADING_LEVELS } from '@udecode/plate-heading';\nimport { HeadingPlugin, TocPlugin } from '@udecode/plate-heading/react';\nimport { HighlightPlugin } from '@udecode/plate-highlight/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport { IndentPlugin } from '@udecode/plate-indent/react';\nimport { IndentListPlugin } from '@udecode/plate-indent-list/react';\nimport { JuicePlugin } from '@udecode/plate-juice';\nimport { KbdPlugin } from '@udecode/plate-kbd/react';\nimport { ColumnItemPlugin, ColumnPlugin } from '@udecode/plate-layout/react';\nimport { LineHeightPlugin } from '@udecode/plate-line-height/react';\nimport { LinkPlugin } from '@udecode/plate-link/react';\nimport {\n  BulletedListPlugin,\n  ListItemPlugin,\n  NumberedListPlugin,\n  TodoListPlugin,\n} from '@udecode/plate-list/react';\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\nimport { ImagePlugin, MediaEmbedPlugin } from '@udecode/plate-media/react';\nimport {\n  MentionInputPlugin,\n  MentionPlugin,\n} from '@udecode/plate-mention/react';\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\nimport { ResetNodePlugin } from '@udecode/plate-reset-node/react';\nimport { SelectOnBackspacePlugin } from '@udecode/plate-select';\nimport {\n  BlockMenuPlugin,\n  BlockSelectionPlugin,\n} from '@udecode/plate-selection/react';\nimport {\n  SlashInputPlugin,\n  SlashPlugin,\n} from '@udecode/plate-slash-command/react';\nimport { TabbablePlugin } from '@udecode/plate-tabbable/react';\nimport {\n  TableCellHeaderPlugin,\n  TableCellPlugin,\n  TablePlugin,\n  TableRowPlugin,\n} from '@udecode/plate-table/react';\nimport { TogglePlugin } from '@udecode/plate-toggle/react';\nimport { TrailingBlockPlugin } from '@udecode/plate-trailing-block';\nimport Prism from 'prismjs';\n\nimport { aiPlugins } from '@/components/editor/plugins/ai-plugins';\nimport { autoformatPlugin } from '@/components/editor/plugins/autoformat-plugin';\nimport { copilotPlugins } from '@/components/editor/plugins/copilot-plugins';\nimport { AILeaf } from '@/components/plate-ui/ai-leaf';\nimport { BlockContextMenu } from '@/components/plate-ui/block-context-menu';\nimport { BlockquoteElement } from '@/components/plate-ui/blockquote-element';\nimport { CodeBlockElement } from '@/components/plate-ui/code-block-element';\nimport { CodeLeaf } from '@/components/plate-ui/code-leaf';\nimport { CodeLineElement } from '@/components/plate-ui/code-line-element';\nimport { CodeSyntaxLeaf } from '@/components/plate-ui/code-syntax-leaf';\nimport { ColumnElement } from '@/components/plate-ui/column-element';\nimport { ColumnGroupElement } from '@/components/plate-ui/column-group-element';\nimport { CommentLeaf } from '@/components/plate-ui/comment-leaf';\nimport { DragOverCursorPlugin } from '@/components/plate-ui/cursor-overlay';\nimport { DateElement } from '@/components/plate-ui/date-element';\nimport { EmojiInputElement } from '@/components/plate-ui/emoji-input-element';\nimport { ExcalidrawElement } from '@/components/plate-ui/excalidraw-element';\nimport { HeadingElement } from '@/components/plate-ui/heading-element';\nimport { HighlightLeaf } from '@/components/plate-ui/highlight-leaf';\nimport { HrElement } from '@/components/plate-ui/hr-element';\nimport { ImageElement } from '@/components/plate-ui/image-element';\nimport { ImagePreview } from '@/components/plate-ui/image-preview';\nimport {\n  TodoLi,\n  TodoMarker,\n} from '@/components/plate-ui/indent-todo-marker';\nimport { KbdLeaf } from '@/components/plate-ui/kbd-leaf';\nimport { LinkElement } from '@/components/plate-ui/link-element';\nimport { LinkFloatingToolbar } from '@/components/plate-ui/link-floating-toolbar';\nimport { ListElement } from '@/components/plate-ui/list-element';\nimport { MediaEmbedElement } from '@/components/plate-ui/media-embed-element';\nimport { MentionElement } from '@/components/plate-ui/mention-element';\nimport { MentionInputElement } from '@/components/plate-ui/mention-input-element';\nimport { ParagraphElement } from '@/components/plate-ui/paragraph-element';\nimport { withPlaceholders } from '@/components/plate-ui/placeholder';\nimport { SlashInputElement } from '@/components/plate-ui/slash-input-element';\nimport {\n  TableCellElement,\n  TableCellHeaderElement,\n} from '@/components/plate-ui/table-cell-element';\nimport { TableElement } from '@/components/plate-ui/table-element';\nimport { TableRowElement } from '@/components/plate-ui/table-row-element';\nimport { TocElement } from '@/components/plate-ui/toc-element';\nimport { ToggleElement } from '@/components/plate-ui/toggle-element';\nimport { withDraggables } from '@/components/plate-ui/with-draggables';\n\nexport const useCreateEditor = () => {\n  return usePlateEditor({\n    override: {\n      components: withDraggables(\n        withPlaceholders({\n          [AIPlugin.key]: AILeaf,\n          [BlockquotePlugin.key]: BlockquoteElement,\n          [BoldPlugin.key]: withProps(PlateLeaf, { as: 'strong' }),\n          [BulletedListPlugin.key]: withProps(ListElement, { variant: 'ul' }),\n          [CodeBlockPlugin.key]: CodeBlockElement,\n          [CodeLinePlugin.key]: CodeLineElement,\n          [CodePlugin.key]: CodeLeaf,\n          [CodeSyntaxPlugin.key]: CodeSyntaxLeaf,\n          [ColumnItemPlugin.key]: ColumnElement,\n          [ColumnPlugin.key]: ColumnGroupElement,\n          [CommentsPlugin.key]: CommentLeaf,\n          [DatePlugin.key]: DateElement,\n          [EmojiInputPlugin.key]: EmojiInputElement,\n          [ExcalidrawPlugin.key]: ExcalidrawElement,\n          [HEADING_KEYS.h1]: withProps(HeadingElement, { variant: 'h1' }),\n          [HEADING_KEYS.h2]: withProps(HeadingElement, { variant: 'h2' }),\n          [HEADING_KEYS.h3]: withProps(HeadingElement, { variant: 'h3' }),\n          [HEADING_KEYS.h4]: withProps(HeadingElement, { variant: 'h4' }),\n          [HEADING_KEYS.h5]: withProps(HeadingElement, { variant: 'h5' }),\n          [HEADING_KEYS.h6]: withProps(HeadingElement, { variant: 'h6' }),\n          [HighlightPlugin.key]: HighlightLeaf,\n          [HorizontalRulePlugin.key]: HrElement,\n          [ImagePlugin.key]: ImageElement,\n          [ItalicPlugin.key]: withProps(PlateLeaf, { as: 'em' }),\n          [KbdPlugin.key]: KbdLeaf,\n          [LinkPlugin.key]: LinkElement,\n          [ListItemPlugin.key]: withProps(PlateElement, { as: 'li' }),\n          [MediaEmbedPlugin.key]: MediaEmbedElement,\n          [MentionInputPlugin.key]: MentionInputElement,\n          [MentionPlugin.key]: MentionElement,\n          [NumberedListPlugin.key]: withProps(ListElement, { variant: 'ol' }),\n          [ParagraphPlugin.key]: ParagraphElement,\n          [SlashInputPlugin.key]: SlashInputElement,\n          [StrikethroughPlugin.key]: withProps(PlateLeaf, { as: 's' }),\n          [SubscriptPlugin.key]: withProps(PlateLeaf, { as: 'sub' }),\n          [SuperscriptPlugin.key]: withProps(PlateLeaf, { as: 'sup' }),\n          [TableCellHeaderPlugin.key]: TableCellHeaderElement,\n          [TableCellPlugin.key]: TableCellElement,\n          [TablePlugin.key]: TableElement,\n          [TableRowPlugin.key]: TableRowElement,\n          [TocPlugin.key]: TocElement,\n          [TogglePlugin.key]: ToggleElement,\n          [UnderlinePlugin.key]: withProps(PlateLeaf, { as: 'u' }),\n        })\n      ),\n    },\n    plugins: [\n      // AI\n      ...aiPlugins,\n      ...copilotPlugins,\n      // Nodes\n      HeadingPlugin,\n      TocPlugin.configure({\n        options: {\n          scrollContainerSelector: `#scroll_container`,\n          topOffset: 80,\n        },\n      }),\n      BlockquotePlugin,\n      CodeBlockPlugin.configure({\n        options: {\n          prism: Prism,\n        },\n      }),\n      HorizontalRulePlugin,\n      LinkPlugin.configure({\n        render: { afterEditable: () => <LinkFloatingToolbar /> },\n      }),\n      ImagePlugin.extend({\n        render: { afterEditable: ImagePreview },\n      }),\n      MediaEmbedPlugin,\n      CaptionPlugin.configure({\n        options: { plugins: [ImagePlugin, MediaEmbedPlugin] },\n      }),\n      DatePlugin,\n      MentionPlugin.configure({\n        options: {\n          triggerPreviousCharPattern: /^$|^[\\s\"']$/,\n        },\n      }),\n      SlashPlugin,\n      TablePlugin.configure({\n        options: {\n          enableMerging: true,\n        },\n      }),\n      ColumnPlugin,\n\n      TodoListPlugin,\n      TogglePlugin,\n      ExcalidrawPlugin,\n      // Marks\n      BoldPlugin,\n      ItalicPlugin,\n      UnderlinePlugin,\n      StrikethroughPlugin,\n      CodePlugin,\n      SubscriptPlugin,\n      SuperscriptPlugin,\n      FontColorPlugin,\n      FontBackgroundColorPlugin,\n      FontSizePlugin,\n      HighlightPlugin,\n      KbdPlugin,\n\n      // Block Style\n      AlignPlugin.configure({\n        inject: {\n          targetPlugins: [\n            ParagraphPlugin.key,\n            MediaEmbedPlugin.key,\n            ImagePlugin.key,\n            ...HEADING_LEVELS,\n          ],\n        },\n      }),\n      IndentPlugin.configure({\n        inject: {\n          targetPlugins: [\n            ParagraphPlugin.key,\n            BlockquotePlugin.key,\n            CodeBlockPlugin.key,\n            TogglePlugin.key,\n            ...HEADING_LEVELS,\n          ],\n        },\n      }),\n      IndentListPlugin.configure({\n        inject: {\n          targetPlugins: [\n            ParagraphPlugin.key,\n            BlockquotePlugin.key,\n            CodeBlockPlugin.key,\n            TogglePlugin.key,\n            ...HEADING_LEVELS,\n          ],\n        },\n        options: {\n          listStyleTypes: {\n            todo: {\n              liComponent: TodoLi,\n              markerComponent: TodoMarker,\n              type: 'todo',\n            },\n          },\n        },\n      }),\n      LineHeightPlugin.configure({\n        inject: {\n          nodeProps: {\n            defaultNodeValue: 1.5,\n            validNodeValues: [1, 1.2, 1.5, 2, 3],\n          },\n          targetPlugins: [ParagraphPlugin.key, ...HEADING_LEVELS],\n        },\n      }),\n\n      // Functionality\n      autoformatPlugin,\n      BlockSelectionPlugin.configure({\n        options: {\n          areaOptions: {\n            behaviour: {\n              scrolling: {\n                speedDivider: 1.5,\n              },\n              startThreshold: 10,\n            },\n            boundaries: `#scroll_container`,\n            container: `#scroll_container`,\n            selectables: [`#scroll_container .slate-selectable`],\n            selectionAreaClass: 'slate-selection-area',\n          },\n          enableContextMenu: true,\n        },\n      }),\n      BlockMenuPlugin.configure({\n        render: { aboveEditable: BlockContextMenu },\n      }),\n      DndPlugin.configure({\n        options: { enableScroller: true },\n      }),\n      EmojiPlugin,\n      ExitBreakPlugin.configure({\n        options: {\n          rules: [\n            {\n              hotkey: 'mod+enter',\n            },\n            {\n              before: true,\n              hotkey: 'mod+shift+enter',\n            },\n            {\n              hotkey: 'enter',\n              level: 1,\n              query: {\n                allow: HEADING_LEVELS,\n                end: true,\n                start: true,\n              },\n              relative: true,\n            },\n          ],\n        },\n      }),\n      NodeIdPlugin,\n      ResetNodePlugin.configure({\n        options: {\n          rules: [\n            {\n              defaultType: ParagraphPlugin.key,\n              hotkey: 'Enter',\n              predicate: isBlockAboveEmpty,\n              types: [BlockquotePlugin.key, TodoListPlugin.key],\n            },\n            {\n              defaultType: ParagraphPlugin.key,\n              hotkey: 'Backspace',\n              predicate: isSelectionAtBlockStart,\n              types: [BlockquotePlugin.key, TodoListPlugin.key],\n            },\n            {\n              defaultType: ParagraphPlugin.key,\n              hotkey: 'Enter',\n              predicate: isCodeBlockEmpty,\n              types: [CodeBlockPlugin.key],\n              onReset: unwrapCodeBlock,\n            },\n            {\n              defaultType: ParagraphPlugin.key,\n              hotkey: 'Backspace',\n              predicate: isSelectionAtCodeBlockStart,\n              types: [CodeBlockPlugin.key],\n              onReset: unwrapCodeBlock,\n            },\n          ],\n        },\n      }),\n      SelectOnBackspacePlugin.configure({\n        options: {\n          query: {\n            allow: [ImagePlugin.key, HorizontalRulePlugin.key],\n          },\n        },\n      }),\n      SoftBreakPlugin.configure({\n        options: {\n          rules: [\n            { hotkey: 'shift+enter' },\n            {\n              hotkey: 'enter',\n              query: {\n                allow: [\n                  CodeBlockPlugin.key,\n                  BlockquotePlugin.key,\n                  TableCellPlugin.key,\n                  TableCellHeaderPlugin.key,\n                ],\n              },\n            },\n          ],\n        },\n      }),\n      TabbablePlugin.configure(({ editor }) => ({\n        options: {\n          query: () => {\n            if (isSelectionAtBlockStart(editor)) return false;\n\n            return !someNode(editor, {\n              match: (n) => {\n                return !!(\n                  n.type &&\n                  ([\n                    CodeBlockPlugin.key,\n                    TablePlugin.key,\n                    TodoListPlugin.key,\n                  ].includes(n.type as string) ||\n                    n.listStyleType)\n                );\n              },\n            });\n          },\n        },\n      })),\n      TrailingBlockPlugin.configure({\n        options: { type: ParagraphPlugin.key },\n      }),\n\n      // Collaboration\n      DragOverCursorPlugin,\n      CommentsPlugin.configure({\n        options: {\n          myUserId: '1',\n          users: {\n            1: {\n              id: '1',\n              avatarUrl:\n                'https://avatars.githubusercontent.com/u/19695832?s=96&v=4',\n              name: 'zbeyens',\n            },\n          },\n        },\n      }),\n\n      // Deserialization\n      DocxPlugin,\n      MarkdownPlugin.configure({ options: { indentList: true } }),\n      JuicePlugin,\n    ],\n    value: [\n      {\n        id: '1',\n        children: [{ text: 'Playground' }],\n        type: 'h1',\n      },\n      {\n        id: '2',\n        children: [\n          { text: 'A rich-text editor with AI capabilities. Try the ' },\n          { bold: true, text: 'AI commands' },\n          { text: ' or use ' },\n          { kbd: true, text: 'Cmd+J' },\n          { text: ' to open the AI menu.' },\n        ],\n        type: ParagraphPlugin.key,\n      },\n    ],\n  });\n};\n",
      "path": "block/editor-ai/components/editor/use-create-editor.tsx",
      "target": "components/editor/use-create-editor.tsx",
      "type": "registry:component"
    }
  ],
  "name": "editor-ai",
  "registryDependencies": [
    "plate-types",
    "ai-plugins",
    "autoformat-plugin",
    "copilot-plugins",
    "ai-menu",
    "ai-leaf",
    "ghost-text",
    "comments-popover",
    "cursor-overlay",
    "editor",
    "fixed-toolbar",
    "fixed-toolbar-buttons",
    "floating-toolbar",
    "floating-toolbar-buttons",
    "block-context-menu",
    "blockquote-element",
    "code-block-element",
    "code-leaf",
    "code-line-element",
    "code-syntax-leaf",
    "column-element",
    "column-group-element",
    "comment-leaf",
    "date-element",
    "draggable",
    "emoji-input-element",
    "excalidraw-element",
    "heading-element",
    "highlight-leaf",
    "hr-element",
    "image-element",
    "image-preview",
    "indent-todo-marker",
    "kbd-leaf",
    "link-element",
    "link-floating-toolbar",
    "list-element",
    "media-embed-element",
    "mention-element",
    "mention-input-element",
    "paragraph-element",
    "placeholder",
    "slash-input-element",
    "table-cell-element",
    "table-element",
    "table-row-element",
    "toc-element",
    "toggle-element"
  ],
  "type": "registry:block"
}