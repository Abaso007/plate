{
  "dependencies": [
    "@udecode/plate-cursor",
    "@udecode/plate-dnd",
    "@udecode/plate-selection"
  ],
  "doc": {
    "description": "A visual overlay for collaborative cursors and selections.",
    "docs": [
      {
        "route": "https://pro.platejs.org/docs/components/cursor-overlay"
      }
    ],
    "examples": [
      "ai-demo"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React, { useEffect } from 'react';\n\nimport type { PluginConfig } from '@udecode/plate-common';\n\nimport { cn } from '@udecode/cn';\nimport {\n  type DOMHandler,\n  createTPlatePlugin,\n  findEventRange,\n  useEditorPlugin,\n  useEditorRef,\n} from '@udecode/plate-common/react';\nimport {\n  type CursorData,\n  type CursorOverlayProps,\n  type CursorProps,\n  type CursorState,\n  CursorOverlay as CursorOverlayPrimitive,\n} from '@udecode/plate-cursor';\nimport { DndPlugin } from '@udecode/plate-dnd';\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\n\ntype CursorOverlayConfig = PluginConfig<\n  'cursorOverlay',\n  {\n    cursors: Record<string, CursorState<CursorData>>;\n  }\n>;\n\nconst resetCursorsHandler: DOMHandler<CursorOverlayConfig> = ({\n  editor,\n  plugin,\n}) => {\n  editor.setOption(plugin, 'cursors', {});\n};\n\nexport const CursorOverlayPlugin = createTPlatePlugin<CursorOverlayConfig>({\n  key: 'cursorOverlay',\n  options: { cursors: {} },\n  useHooks: ({ setOption }) => {\n    const { editor } = useEditorPlugin(BlockSelectionPlugin);\n    const isSelecting = editor.useOption(BlockSelectionPlugin, 'isSelecting');\n\n    useEffect(() => {\n      if (isSelecting) {\n        setTimeout(() => {\n          setOption('cursors', {});\n        }, 0);\n      }\n    }, [isSelecting, setOption]);\n  },\n  handlers: {\n    onBlur: ({ editor, event, setOption }) => {\n      const isPrevented =\n        (event.relatedTarget as HTMLElement)?.dataset?.platePreventOverlay ===\n        'true';\n\n      if (isPrevented || !editor.selection) return;\n\n      setOption('cursors', {\n        blur: {\n          key: 'blur',\n          selection: editor.selection,\n        },\n      });\n    },\n    onDragEnd: resetCursorsHandler,\n    onDragLeave: resetCursorsHandler,\n    onDragOver: ({ editor, event, setOption }) => {\n      if (editor.getOptions(DndPlugin).isDragging) return;\n\n      const range = findEventRange(editor, event);\n\n      if (!range) return;\n\n      setOption('cursors', {\n        drag: {\n          key: 'drag',\n          selection: range,\n        },\n      });\n    },\n    onDrop: resetCursorsHandler,\n    onFocus: resetCursorsHandler,\n  },\n});\n\nexport function Cursor({\n  caretPosition,\n  classNames,\n  data,\n  disableCaret,\n  disableSelection,\n  selectionRects,\n}: CursorProps<CursorData>) {\n  const { style } = data ?? ({} as CursorData);\n\n  return (\n    <>\n      {!disableSelection &&\n        selectionRects.map((position, i) => (\n          <div\n            key={i}\n            className={cn(\n              'pointer-events-none absolute z-10 bg-brand/25',\n              classNames?.selectionRect\n            )}\n            style={{\n              // ...selectionStyle,\n              ...position,\n            }}\n          />\n        ))}\n      {!disableCaret && caretPosition && (\n        <div\n          className={cn(\n            'pointer-events-none absolute z-10 w-px bg-brand',\n            classNames?.caret\n          )}\n          style={{ ...caretPosition, ...style }}\n        />\n      )}\n    </>\n  );\n}\n\nexport function CursorOverlay({ cursors, ...props }: CursorOverlayProps) {\n  const editor = useEditorRef();\n  const dynamicCursors = editor.useOption(CursorOverlayPlugin, 'cursors');\n\n  const allCursors = { ...cursors, ...dynamicCursors };\n\n  return (\n    <CursorOverlayPrimitive\n      {...props}\n      onRenderCursor={Cursor}\n      cursors={allCursors}\n    />\n  );\n}\n",
      "path": "plate-ui/cursor-overlay.tsx",
      "target": "components/plate-ui/cursor-overlay.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "cursor-overlay",
  "registryDependencies": [],
  "type": "registry:ui"
}