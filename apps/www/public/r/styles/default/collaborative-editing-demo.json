{
  "files": [
    {
      "path": "examples/collaborative-editing-demo.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { YjsPlugin } from '@udecode/plate-yjs/react';\nimport { createPlateEditor, Plate } from '@udecode/plate/react';\nimport * as Y from 'yjs';\n\nimport { editorPlugins } from '@/components/editor/plugins/editor-plugins';\nimport { Editor, EditorContainer } from '@/components/plate-ui/editor';\nimport { RemoteCursorOverlay } from '@/components/plate-ui/remote-cursor-overlay';\n\nexport default function CollaborativeEditingDemo(): React.ReactNode {\n  const roomName = 'editor-room-1';\n  // Generate a random user name to differentiate users in different tabs\n  const [userName] = React.useState(() => `user-${Math.floor(Math.random() * 1000)}`);\n  // Generate a random color for this user's cursor\n  const [cursorColor] = React.useState(() => getRandomColor());\n  \n  return (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"rounded-md bg-muted p-4 text-center text-sm text-muted-foreground\">\n        <p className=\"mb-2 font-medium\">Collaborative Editing Demo</p>\n        <p>\n          Open this page in another tab or browser window to see real-time collaboration in action.\n          Each instance will have a different cursor color for easy identification.\n        </p>\n        <p className=\"mt-2\">\n          This demo showcases multiple providers working together:\n          <ul className=\"mt-1 text-left list-disc list-inside\">\n            <li>WebRTC for peer-to-peer editing (In the same browser it uses local storage so no signaling server is needed)</li>\n            <li>Hocuspocus for server-based persistence</li>\n          </ul>\n        </p>\n      </div>\n\n      <CollaborativeEditor \n        cursorColor={cursorColor} \n        editorTitle=\"Collaborative Editor\" \n        roomName={roomName}\n        userName={userName} \n      />\n    </div>\n  );\n}\n\ninterface CollaborativeEditorProps {\n  cursorColor: string;\n  editorTitle: string;\n  roomName: string;\n  userName: string;\n}\n\nfunction CollaborativeEditor({ \n  cursorColor,\n  editorTitle,\n  roomName,\n  userName\n}: CollaborativeEditorProps): React.ReactNode {\n  const [editor, setEditor] = React.useState<any>(null);\n  const [providerStatus, setProviderStatus] = React.useState({\n    hocuspocus: false,\n    webrtc: false,\n  });\n\n  React.useEffect(() => {\n    // Create a shared Y.Doc to be used by all providers\n    const ydoc = new Y.Doc();\n\n    const newEditor = createPlateEditor({\n      plugins: [\n        ...editorPlugins,\n        YjsPlugin.configure({\n          options: {\n            cursors: {\n              autoSend: true,\n              data: { color: cursorColor, name: userName },\n            },\n            disableCursors: false,\n            // Configure collaboration providers\n            providerConfigs: [\n              {\n                options: {\n                  name: roomName,\n                  url: 'ws://localhost:8888',\n                },\n                type: 'hocuspocus',\n              },\n              {\n                options: {\n                  roomName: roomName,\n                  signaling: ['ws://localhost:4444'],\n                },\n                type: 'webrtc',\n              },\n            ],\n            // Show content as soon as any provider is synced (default)\n            waitForAllProviders: false,\n            // Pass our shared Y.Doc\n            ydoc,\n          },\n          render: {\n            afterEditable: RemoteCursorOverlay,\n          },\n        }),\n      ],\n    }) ;\n\n    // Set up hooks to monitor provider status\n    const monitorProviders = () => {\n      const providers = newEditor.getOption(YjsPlugin, 'providers');\n      if (!providers) return;\n      \n      // Update status for each provider type\n      const status = {\n        hocuspocus: providers.find((p: any) => p.type === 'hocuspocus')?.isConnected || false,\n        webrtc: providers.find((p: any) => p.type === 'webrtc')?.isConnected || false,\n      };\n      \n      setProviderStatus(status);\n    };\n    \n    // Check status initially and every 2 seconds\n    monitorProviders();\n    const interval = setInterval(monitorProviders, 2000);\n\n    setEditor(newEditor);\n\n    return () => {\n      clearInterval(interval);\n      // Clean up all providers\n      newEditor.getOption(YjsPlugin, 'ydoc')?.destroy();\n    };\n  }, [userName, roomName, editorTitle, cursorColor]);\n\n  if (!editor) return null;\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"flex-1 overflow-hidden rounded-md border\">\n        <div className=\"bg-muted px-4 py-2 font-medium\">\n          {editorTitle} - Connected as <span style={{ color: cursorColor }}>{userName}</span>\n          <div className=\"mt-1 text-xs flex gap-2\">\n            <span className={`px-2 py-0.5 rounded ${providerStatus.webrtc ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n              WebRTC: {providerStatus.webrtc ? 'Connected' : 'Disconnected'}\n            </span>\n            <span className={`px-2 py-0.5 rounded ${providerStatus.hocuspocus ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n              Hocuspocus: {providerStatus.hocuspocus ? 'Connected' : 'Disconnected'}\n            </span>\n          </div>\n        </div>\n        <Plate editor={editor}>\n          <EditorContainer>\n            <Editor\n              variant=\"demo\"\n              className=\"min-h-[600px] border-t\"\n            />\n          </EditorContainer>\n        </Plate>\n      </div>\n    </DndProvider>\n  );\n}\n\nexport const getRandomColor = () => {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\n",
      "type": "registry:example",
      "target": "components/collaborative-editing-demo.tsx"
    }
  ],
  "name": "collaborative-editing-demo",
  "registryDependencies": [],
  "type": "registry:example",
  "$schema": "https://platejs.org/schema/registry-item.json",
  "author": "udecode (https://platejs.org)"
}
