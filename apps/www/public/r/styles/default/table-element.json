{
  "dependencies": [
    "@udecode/plate-table"
  ],
  "doc": {
    "description": "A table component with floating toolbar and border customization.",
    "docs": [
      {
        "route": "/docs/table"
      }
    ],
    "examples": [
      "table-demo"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport type * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\nimport type { TTableElement } from '@udecode/plate-table';\n\nimport { PopoverAnchor } from '@radix-ui/react-popover';\nimport { cn, withRef } from '@udecode/cn';\nimport { isSelectionExpanded } from '@udecode/plate-common';\nimport {\n  useEditorRef,\n  useEditorSelector,\n  useElement,\n  useRemoveNodeButton,\n  withHOC,\n} from '@udecode/plate-common/react';\nimport {\n  TableProvider,\n  mergeTableCells,\n  unmergeTableCells,\n  useTableBordersDropdownMenuContentState,\n  useTableElement,\n  useTableElementState,\n  useTableMergeState,\n} from '@udecode/plate-table/react';\nimport { useReadOnly, useSelected } from 'slate-react';\n\nimport { Icons, iconVariants } from '@/components/icons';\n\nimport { Button } from './button';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n} from './dropdown-menu';\nimport { PlateElement } from './plate-element';\nimport { Popover, PopoverContent, popoverVariants } from './popover';\nimport { Separator } from './separator';\n\nexport const TableBordersDropdownMenuContent = withRef<\n  typeof DropdownMenuPrimitive.Content\n>((props, ref) => {\n  const {\n    getOnSelectTableBorder,\n    hasBottomBorder,\n    hasLeftBorder,\n    hasNoBorders,\n    hasOuterBorders,\n    hasRightBorder,\n    hasTopBorder,\n  } = useTableBordersDropdownMenuContentState();\n\n  return (\n    <DropdownMenuContent\n      ref={ref}\n      className={cn('min-w-[220px]')}\n      align=\"start\"\n      side=\"right\"\n      sideOffset={0}\n      {...props}\n    >\n      <DropdownMenuCheckboxItem\n        checked={hasBottomBorder}\n        onCheckedChange={getOnSelectTableBorder('bottom')}\n      >\n        <Icons.borderBottom className={iconVariants({ size: 'sm' })} />\n        <div>Bottom Border</div>\n      </DropdownMenuCheckboxItem>\n      <DropdownMenuCheckboxItem\n        checked={hasTopBorder}\n        onCheckedChange={getOnSelectTableBorder('top')}\n      >\n        <Icons.borderTop className={iconVariants({ size: 'sm' })} />\n        <div>Top Border</div>\n      </DropdownMenuCheckboxItem>\n      <DropdownMenuCheckboxItem\n        checked={hasLeftBorder}\n        onCheckedChange={getOnSelectTableBorder('left')}\n      >\n        <Icons.borderLeft className={iconVariants({ size: 'sm' })} />\n        <div>Left Border</div>\n      </DropdownMenuCheckboxItem>\n      <DropdownMenuCheckboxItem\n        checked={hasRightBorder}\n        onCheckedChange={getOnSelectTableBorder('right')}\n      >\n        <Icons.borderRight className={iconVariants({ size: 'sm' })} />\n        <div>Right Border</div>\n      </DropdownMenuCheckboxItem>\n\n      <Separator />\n\n      <DropdownMenuCheckboxItem\n        checked={hasNoBorders}\n        onCheckedChange={getOnSelectTableBorder('none')}\n      >\n        <Icons.borderNone className={iconVariants({ size: 'sm' })} />\n        <div>No Border</div>\n      </DropdownMenuCheckboxItem>\n      <DropdownMenuCheckboxItem\n        checked={hasOuterBorders}\n        onCheckedChange={getOnSelectTableBorder('outer')}\n      >\n        <Icons.borderAll className={iconVariants({ size: 'sm' })} />\n        <div>Outside Borders</div>\n      </DropdownMenuCheckboxItem>\n    </DropdownMenuContent>\n  );\n});\n\nexport const TableFloatingToolbar = withRef<typeof PopoverContent>(\n  ({ children, ...props }, ref) => {\n    const element = useElement<TTableElement>();\n    const { props: buttonProps } = useRemoveNodeButton({ element });\n\n    const selectionCollapsed = useEditorSelector(\n      (editor) => !isSelectionExpanded(editor),\n      []\n    );\n\n    const readOnly = useReadOnly();\n    const selected = useSelected();\n    const editor = useEditorRef();\n\n    const collapsed = !readOnly && selected && selectionCollapsed;\n    const open = !readOnly && selected;\n\n    const { canMerge, canUnmerge } = useTableMergeState();\n\n    const mergeContent = canMerge && (\n      <Button\n        variant=\"ghost\"\n        onClick={() => mergeTableCells(editor)}\n        contentEditable={false}\n        isMenu\n      >\n        <Icons.combine className=\"mr-2 size-4\" />\n        Merge\n      </Button>\n    );\n\n    const unmergeButton = canUnmerge && (\n      <Button\n        variant=\"ghost\"\n        onClick={() => unmergeTableCells(editor)}\n        contentEditable={false}\n        isMenu\n      >\n        <Icons.ungroup className=\"mr-2 size-4\" />\n        Unmerge\n      </Button>\n    );\n\n    const bordersContent = collapsed && (\n      <>\n        <DropdownMenu modal={false}>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" isMenu>\n              <Icons.borderAll className=\"mr-2 size-4\" />\n              Borders\n            </Button>\n          </DropdownMenuTrigger>\n\n          <DropdownMenuPortal>\n            <TableBordersDropdownMenuContent />\n          </DropdownMenuPortal>\n        </DropdownMenu>\n\n        <Button variant=\"ghost\" contentEditable={false} isMenu {...buttonProps}>\n          <Icons.delete className=\"mr-2 size-4\" />\n          Delete\n        </Button>\n      </>\n    );\n\n    return (\n      <Popover open={open} modal={false}>\n        <PopoverAnchor asChild>{children}</PopoverAnchor>\n        {(canMerge || canUnmerge || collapsed) && (\n          <PopoverContent\n            ref={ref}\n            className={cn(\n              popoverVariants(),\n              'flex w-[220px] flex-col gap-1 p-1'\n            )}\n            onOpenAutoFocus={(e) => e.preventDefault()}\n            {...props}\n          >\n            {unmergeButton}\n            {mergeContent}\n            {bordersContent}\n          </PopoverContent>\n        )}\n      </Popover>\n    );\n  }\n);\n\nexport const TableElement = withHOC(\n  TableProvider,\n  withRef<typeof PlateElement>(({ children, className, ...props }, ref) => {\n    const { colSizes, isSelectingCell, marginLeft, minColumnWidth } =\n      useTableElementState();\n    const { colGroupProps, props: tableProps } = useTableElement();\n\n    return (\n      <TableFloatingToolbar>\n        <div style={{ paddingLeft: marginLeft }}>\n          <PlateElement\n            ref={ref}\n            as=\"table\"\n            className={cn(\n              'my-4 ml-px mr-0 table h-px w-full table-fixed border-collapse',\n              isSelectingCell && '[&_*::selection]:bg-none',\n              className\n            )}\n            {...tableProps}\n            {...props}\n          >\n            <colgroup {...colGroupProps}>\n              {colSizes.map((width, index) => (\n                <col\n                  key={index}\n                  style={{\n                    minWidth: minColumnWidth,\n                    width: width || undefined,\n                  }}\n                />\n              ))}\n            </colgroup>\n\n            <tbody className=\"min-w-full\">{children}</tbody>\n          </PlateElement>\n        </div>\n      </TableFloatingToolbar>\n    );\n  })\n);\n",
      "path": "plate-ui/table-element.tsx",
      "target": "components/plate-ui/table-element.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "table-element",
  "registryDependencies": [
    "dropdown-menu",
    "plate-element"
  ],
  "type": "registry:ui"
}