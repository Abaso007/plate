{
  "description": "An AI editor.",
  "files": [
    {
      "content": "import { PlateEditor } from '@/components/plate-editor';\n\nexport default function Page() {\n  return (\n    <div className=\"flex h-screen w-full\">\n      <PlateEditor />\n    </div>\n  );\n}\n",
      "path": "block/ai-editor/page.tsx",
      "target": "app/editor/page.tsx",
      "type": "registry:page"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { withProps } from '@udecode/cn';\nimport { AIChatPlugin, AIPlugin } from '@udecode/plate-ai/react';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n  CodeSyntaxPlugin,\n} from '@udecode/plate-code-block/react';\nimport {\n  ParagraphPlugin,\n  PlateLeaf,\n  createPlateEditor,\n} from '@udecode/plate-common/react';\nimport {\n  FontBackgroundColorPlugin,\n  FontColorPlugin,\n} from '@udecode/plate-font/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { HeadingPlugin } from '@udecode/plate-heading/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport { IndentPlugin } from '@udecode/plate-indent/react';\nimport { IndentListPlugin } from '@udecode/plate-indent-list/react';\nimport { LinkPlugin } from '@udecode/plate-link/react';\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\nimport Prism from 'prismjs';\n\nimport { AIMenu } from '@/components/plate-ui/ai-menu';\nimport { BlockquoteElement } from '@/components/plate-ui/blockquote-element';\nimport { CodeBlockElement } from '@/components/plate-ui/code-block-element';\nimport { CodeLeaf } from '@/components/plate-ui/code-leaf';\nimport { CodeLineElement } from '@/components/plate-ui/code-line-element';\nimport { CodeSyntaxLeaf } from '@/components/plate-ui/code-syntax-leaf';\nimport { SelectionOverlayPlugin } from '@/components/plate-ui/cursor-overlay';\nimport { HeadingElement } from '@/components/plate-ui/heading-element';\nimport { HrElement } from '@/components/plate-ui/hr-element';\nimport { LinkElement } from '@/components/plate-ui/link-element';\nimport { LinkFloatingToolbar } from '@/components/plate-ui/link-floating-toolbar';\nimport { ParagraphElement } from '@/components/plate-ui/paragraph-element';\n\nexport const createAIEditor = () => {\n  const editor = createPlateEditor({\n    id: 'ai',\n    override: {\n      components: {\n        [BlockquotePlugin.key]: BlockquoteElement,\n        [BoldPlugin.key]: withProps(PlateLeaf, { as: 'strong' }),\n        [CodeBlockPlugin.key]: CodeBlockElement,\n        [CodeLinePlugin.key]: CodeLineElement,\n        [CodePlugin.key]: CodeLeaf,\n        [CodeSyntaxPlugin.key]: CodeSyntaxLeaf,\n        [HEADING_KEYS.h1]: withProps(HeadingElement, { variant: 'h1' }),\n        [HEADING_KEYS.h2]: withProps(HeadingElement, { variant: 'h2' }),\n        [HEADING_KEYS.h3]: withProps(HeadingElement, { variant: 'h3' }),\n        [HorizontalRulePlugin.key]: HrElement,\n        [ItalicPlugin.key]: withProps(PlateLeaf, { as: 'em' }),\n        [LinkPlugin.key]: LinkElement,\n        [ParagraphPlugin.key]: ParagraphElement,\n        [StrikethroughPlugin.key]: withProps(PlateLeaf, { as: 's' }),\n        [UnderlinePlugin.key]: withProps(PlateLeaf, { as: 'u' }),\n      },\n    },\n    plugins: [\n      ParagraphPlugin,\n      IndentPlugin.configure({\n        inject: {\n          targetPlugins: [\n            ParagraphPlugin.key,\n            HEADING_KEYS.h1,\n            HEADING_KEYS.h2,\n            HEADING_KEYS.h3,\n            BlockquotePlugin.key,\n            CodeBlockPlugin.key,\n          ],\n        },\n      }),\n      IndentListPlugin.configure({\n        inject: {\n          targetPlugins: [\n            ParagraphPlugin.key,\n            HEADING_KEYS.h1,\n            HEADING_KEYS.h2,\n            HEADING_KEYS.h3,\n            BlockquotePlugin.key,\n            CodeBlockPlugin.key,\n          ],\n        },\n      }),\n      HeadingPlugin.configure({ options: { levels: 3 } }),\n      BlockquotePlugin,\n      CodeBlockPlugin.configure({ options: { prism: Prism } }),\n      HorizontalRulePlugin,\n      LinkPlugin.configure({\n        render: { afterEditable: () => <LinkFloatingToolbar /> },\n      }),\n      MarkdownPlugin.configure({ options: { indentList: true } }),\n      // FIXME: Fixed the throw error: BlockSelectionPlugin is missing. readonly editor need'nt this plugin so using an empty plugin instead\n      BlockSelectionPlugin.configure({\n        api: {},\n        extendEditor: null,\n        options: {},\n        render: {},\n        useHooks: null,\n        handlers: {},\n      }),\n      BoldPlugin,\n      ItalicPlugin,\n      UnderlinePlugin,\n      StrikethroughPlugin,\n      CodePlugin,\n      FontColorPlugin,\n      FontBackgroundColorPlugin,\n    ],\n    value: [{ children: [{ text: '' }], type: 'p' }],\n  });\n\n  return editor;\n};\n\nconst systemCommon = `\\\nYou are an advanced AI-powered note-taking assistant, designed to enhance productivity and creativity in note management.\nRespond directly to user prompts with clear, concise, and relevant content. Maintain a neutral, helpful tone.\n\nRules:\n- <Document> is the entire note the user is working on.\n- <Reminder> is a reminder of how you should reply to INSTRUCTIONS. It does not apply to questions.\n- Anything else is the user prompt.\n- Your response should be tailored to the user's prompt, providing precise assistance to optimize note management.\n- For INSTRUCTIONS: Follow the <Reminder> exactly. Provide ONLY the content to be inserted or replaced. No explanations or comments.\n- For QUESTIONS: Provide a helpful and concise answer. You may include brief explanations if necessary.\n- CRITICAL: Distinguish between INSTRUCTIONS and QUESTIONS. Instructions typically ask you to modify or add content. Questions ask for information or clarification.\n`;\n\nconst systemDefault = `\\\n${systemCommon}\n- <Block> is the current block of text the user is working on.\n- Ensure your output can seamlessly fit into the existing <Block> structure.\n- CRITICAL: Provide only a single block of text. DO NOT create multiple paragraphs or separate blocks.\n<Block>\n{block}\n</Block>\n`;\n\nconst systemSelecting = `\\\n${systemCommon}\n- <Block> is the block of text containing the user's selection, providing context.\n- Ensure your output can seamlessly fit into the existing <Block> structure.\n- <Selection> is the specific text the user has selected in the block and wants to modify or ask about.\n- Consider the context provided by <Block>, but only modify <Selection>. Your response should be a direct replacement for <Selection>.\n<Block>\n{block}\n</Block>\n<Selection>\n{selection}\n</Selection>\n`;\n\nconst systemBlockSelecting = `\\\n${systemCommon}\n- <Selection> represents the full blocks of text the user has selected and wants to modify or ask about.\n- Your response should be a direct replacement for the entire <Selection>.\n- Maintain the overall structure and formatting of the selected blocks, unless explicitly instructed otherwise.\n- CRITICAL: Provide only the content to replace <Selection>. Do not add additional blocks or change the block structure unless specifically requested.\n<Selection>\n{block}\n</Selection>\n`;\n\nconst userDefault = `<Reminder>\nCRITICAL: DO NOT use block formatting. You can only use inline formatting.\nCRITICAL: DO NOT start new lines or paragraphs.\nNEVER write <Block>.\n</Reminder>\n{prompt}`;\n\nconst userSelecting = `<Reminder>\nIf this is a question, provide a helpful and concise answer about <Selection>.\nIf this is an instruction, provide ONLY the text to replace <Selection>. No explanations.\nEnsure it fits seamlessly within <Block>. If <Block> is empty, write ONE random sentence.\nNEVER write <Block> or <Selection>.\n</Reminder>\n{prompt} about <Selection>`;\n\nconst userBlockSelecting = `<Reminder>\nIf this is a question, provide a helpful and concise answer about <Selection>.\nIf this is an instruction, provide ONLY the content to replace the entire <Selection>. No explanations.\nMaintain the overall structure unless instructed otherwise.\nNEVER write <Block> or <Selection>.\n</Reminder>\n{prompt} about <Selection>`;\n\nexport const PROMPT_TEMPLATES = {\n  systemBlockSelecting,\n  systemDefault,\n  systemSelecting,\n  userBlockSelecting,\n  userDefault,\n  userSelecting,\n};\n\nexport const aiPlugins = [\n  SelectionOverlayPlugin,\n  MarkdownPlugin.configure({ options: { indentList: true } }),\n  AIPlugin,\n  AIChatPlugin.configure({\n    options: {\n      createAIEditor,\n      promptTemplate: ({ isBlockSelecting, isSelecting }) => {\n        return isBlockSelecting\n          ? PROMPT_TEMPLATES.userBlockSelecting\n          : isSelecting\n            ? PROMPT_TEMPLATES.userSelecting\n            : PROMPT_TEMPLATES.userDefault;\n      },\n      scrollContainerSelector: '#scroll_container',\n      systemTemplate: ({ isBlockSelecting, isSelecting }) => {\n        return isBlockSelecting\n          ? PROMPT_TEMPLATES.systemBlockSelecting\n          : isSelecting\n            ? PROMPT_TEMPLATES.systemSelecting\n            : PROMPT_TEMPLATES.systemDefault;\n      },\n    },\n    render: { afterEditable: () => <AIMenu /> },\n  }),\n] as const;\n",
      "path": "block/ai-editor/components/editor/ai-plugins.tsx",
      "target": "components/ai-plugins.tsx",
      "type": "registry:component"
    },
    {
      "content": "import type {\n  AutoformatBlockRule,\n  AutoformatRule,\n} from '@udecode/plate-autoformat';\nimport type { SlateEditor } from '@udecode/plate-common';\nimport type { TTodoListItemElement } from '@udecode/plate-list';\n\nimport {\n  autoformatArrow,\n  autoformatLegal,\n  autoformatLegalHtml,\n  autoformatMath,\n  autoformatPunctuation,\n  autoformatSmartQuotes,\n} from '@udecode/plate-autoformat';\nimport { AutoformatPlugin } from '@udecode/plate-autoformat/react';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  SubscriptPlugin,\n  SuperscriptPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { insertEmptyCodeBlock } from '@udecode/plate-code-block';\nimport {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n} from '@udecode/plate-code-block/react';\nimport {\n  getParentNode,\n  insertNodes,\n  isBlock,\n  isElement,\n  isType,\n  setNodes,\n} from '@udecode/plate-common';\nimport { ParagraphPlugin } from '@udecode/plate-common/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { HighlightPlugin } from '@udecode/plate-highlight/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport {\n  INDENT_LIST_KEYS,\n  ListStyleType,\n  toggleIndentList,\n} from '@udecode/plate-indent-list';\nimport { toggleList, unwrapList } from '@udecode/plate-list';\nimport {\n  BulletedListPlugin,\n  ListItemPlugin,\n  NumberedListPlugin,\n  TodoListPlugin,\n} from '@udecode/plate-list/react';\nimport { TogglePlugin, openNextToggles } from '@udecode/plate-toggle/react';\n\nexport const preFormat: AutoformatBlockRule['preFormat'] = (editor) =>\n  unwrapList(editor);\n\nexport const format = (editor: SlateEditor, customFormatting: any) => {\n  if (editor.selection) {\n    const parentEntry = getParentNode(editor, editor.selection);\n\n    if (!parentEntry) return;\n\n    const [node] = parentEntry;\n\n    if (\n      isElement(node) &&\n      !isType(editor, node, CodeBlockPlugin.key) &&\n      !isType(editor, node, CodeLinePlugin.key)\n    ) {\n      customFormatting();\n    }\n  }\n};\n\nexport const formatList = (editor: SlateEditor, elementType: string) => {\n  format(editor, () =>\n    toggleList(editor, {\n      type: elementType,\n    })\n  );\n};\n\nexport const autoformatMarks: AutoformatRule[] = [\n  {\n    match: '***',\n    mode: 'mark',\n    type: [BoldPlugin.key, ItalicPlugin.key],\n  },\n  {\n    match: '__*',\n    mode: 'mark',\n    type: [UnderlinePlugin.key, ItalicPlugin.key],\n  },\n  {\n    match: '__**',\n    mode: 'mark',\n    type: [UnderlinePlugin.key, BoldPlugin.key],\n  },\n  {\n    match: '___***',\n    mode: 'mark',\n    type: [UnderlinePlugin.key, BoldPlugin.key, ItalicPlugin.key],\n  },\n  {\n    match: '**',\n    mode: 'mark',\n    type: BoldPlugin.key,\n  },\n  {\n    match: '__',\n    mode: 'mark',\n    type: UnderlinePlugin.key,\n  },\n  {\n    match: '*',\n    mode: 'mark',\n    type: ItalicPlugin.key,\n  },\n  {\n    match: '_',\n    mode: 'mark',\n    type: ItalicPlugin.key,\n  },\n  {\n    match: '~~',\n    mode: 'mark',\n    type: StrikethroughPlugin.key,\n  },\n  {\n    match: '^',\n    mode: 'mark',\n    type: SuperscriptPlugin.key,\n  },\n  {\n    match: '~',\n    mode: 'mark',\n    type: SubscriptPlugin.key,\n  },\n  {\n    match: '==',\n    mode: 'mark',\n    type: HighlightPlugin.key,\n  },\n  {\n    match: '≡',\n    mode: 'mark',\n    type: HighlightPlugin.key,\n  },\n  {\n    match: '`',\n    mode: 'mark',\n    type: CodePlugin.key,\n  },\n];\n\nexport const autoformatBlocks: AutoformatRule[] = [\n  {\n    match: '# ',\n    mode: 'block',\n    preFormat,\n    type: HEADING_KEYS.h1,\n  },\n  {\n    match: '## ',\n    mode: 'block',\n    preFormat,\n    type: HEADING_KEYS.h2,\n  },\n  {\n    match: '### ',\n    mode: 'block',\n    preFormat,\n    type: HEADING_KEYS.h3,\n  },\n  {\n    match: '#### ',\n    mode: 'block',\n    preFormat,\n    type: HEADING_KEYS.h4,\n  },\n  {\n    match: '##### ',\n    mode: 'block',\n    preFormat,\n    type: HEADING_KEYS.h5,\n  },\n  {\n    match: '###### ',\n    mode: 'block',\n    preFormat,\n    type: HEADING_KEYS.h6,\n  },\n  {\n    match: '> ',\n    mode: 'block',\n    preFormat,\n    type: BlockquotePlugin.key,\n  },\n  {\n    format: (editor) => {\n      insertEmptyCodeBlock(editor, {\n        defaultType: ParagraphPlugin.key,\n        insertNodesOptions: { select: true },\n      });\n    },\n    match: '```',\n    mode: 'block',\n    preFormat,\n    triggerAtBlockStart: false,\n    type: CodeBlockPlugin.key,\n  },\n  {\n    match: '+ ',\n    mode: 'block',\n    preFormat: openNextToggles,\n    type: TogglePlugin.key,\n  },\n  {\n    format: (editor) => {\n      setNodes(editor, { type: HorizontalRulePlugin.key });\n      insertNodes(editor, {\n        children: [{ text: '' }],\n        type: ParagraphPlugin.key,\n      });\n    },\n    match: ['---', '—-', '___ '],\n    mode: 'block',\n    type: HorizontalRulePlugin.key,\n  },\n];\n\nexport const autoformatLists: AutoformatRule[] = [\n  {\n    format: (editor) => formatList(editor, BulletedListPlugin.key),\n    match: ['* ', '- '],\n    mode: 'block',\n    preFormat,\n    type: ListItemPlugin.key,\n  },\n  {\n    format: (editor) => formatList(editor, NumberedListPlugin.key),\n    match: [String.raw`^\\d+\\.$ `, String.raw`^\\d+\\)$ `],\n    matchByRegex: true,\n    mode: 'block',\n    preFormat,\n    type: ListItemPlugin.key,\n  },\n  {\n    match: '[] ',\n    mode: 'block',\n    type: TodoListPlugin.key,\n  },\n  {\n    format: (editor) =>\n      setNodes<TTodoListItemElement>(\n        editor,\n        { checked: true, type: TodoListPlugin.key },\n        {\n          match: (n) => isBlock(editor, n),\n        }\n      ),\n    match: '[x] ',\n    mode: 'block',\n    type: TodoListPlugin.key,\n  },\n];\n\nexport const autoformatIndentLists: AutoformatRule[] = [\n  {\n    format: (editor) => {\n      toggleIndentList(editor, {\n        listStyleType: ListStyleType.Disc,\n      });\n    },\n    match: ['* ', '- '],\n    mode: 'block',\n    type: 'list',\n  },\n  {\n    format: (editor) =>\n      toggleIndentList(editor, {\n        listStyleType: ListStyleType.Decimal,\n      }),\n    match: [String.raw`^\\d+\\.$ `, String.raw`^\\d+\\)$ `],\n    matchByRegex: true,\n    mode: 'block',\n    type: 'list',\n  },\n  {\n    format: (editor) => {\n      toggleIndentList(editor, {\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n      setNodes(editor, {\n        checked: false,\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n    },\n    match: ['[] '],\n    mode: 'block',\n    type: 'list',\n  },\n  {\n    format: (editor) => {\n      toggleIndentList(editor, {\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n      setNodes(editor, {\n        checked: true,\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n    },\n    match: ['[x] '],\n    mode: 'block',\n    type: 'list',\n  },\n];\n\nexport const autoformatPlugin = AutoformatPlugin.configure({\n  options: {\n    enableUndoOnDelete: true,\n    rules: [\n      ...autoformatBlocks,\n      ...autoformatMarks,\n      ...autoformatSmartQuotes,\n      ...autoformatPunctuation,\n      ...autoformatLegal,\n      ...autoformatLegalHtml,\n      ...autoformatArrow,\n      ...autoformatMath,\n      // Use autoformatLists instead if using ListPlugin\n      ...autoformatIndentLists,\n    ],\n  },\n});\n",
      "path": "block/ai-editor/components/editor/autoformat-plugin.ts",
      "target": "components/autoformat-plugin.ts",
      "type": "registry:component"
    },
    {
      "content": "import type { TElement } from '@udecode/plate-common';\n\nimport { CopilotPlugin } from '@udecode/plate-ai/react';\nimport { getAncestorNode } from '@udecode/plate-common';\nimport { serializeMdNodes, stripMarkdown } from '@udecode/plate-markdown';\n\nimport { GhostText } from '@/components/plate-ui/ghost-text';\n\nexport const copilotPlugins = [\n  CopilotPlugin.configure(({ api }) => ({\n    options: {\n      completeOptions: {\n        api: '/api/ai/copilot',\n        body: {\n          system: `You are an advanced AI writing assistant, similar to VSCode Copilot but for general text. Your task is to predict and generate the next part of the text based on the given context.\n  \n  Rules:\n  - Continue the text naturally up to the next punctuation mark (., ,, ;, :, ?, or !).\n  - Maintain style and tone. Don't repeat given text.\n  - For unclear context, provide the most likely continuation.\n  - Handle code snippets, lists, or structured text if needed.\n  - Don't include \"\"\" in your response.\n  - CRITICAL: Always end with a punctuation mark.\n  - CRITICAL: Avoid starting a new block. Do not use block formatting like >, #, 1., 2., -, etc. The suggestion should continue in the same block as the context.\n  - If no context is provided or you can't generate a continuation, return \"0\" without explanation.`,\n        },\n        onError: (error) => {\n          let text = '';\n\n          text = error.message.includes('API key')\n            ? 'Set your OpenAI API key for real AI suggestions'\n            : 'Try with a valid OpenAI API key for real AI suggestions';\n\n          api.copilot.setBlockSuggestion({\n            text: stripMarkdown(text),\n          });\n        },\n        onFinish: (_, completion) => {\n          if (completion === '0') return;\n\n          api.copilot.setBlockSuggestion({\n            //stripMarkdownBlocks in plus GhostText\n            text: stripMarkdown(completion),\n          });\n        },\n      },\n      debounceDelay: 500,\n      getPrompt: ({ editor }) => {\n        const contextEntry = getAncestorNode(editor);\n\n        if (!contextEntry) return '';\n\n        const prompt = serializeMdNodes([contextEntry[0] as TElement]);\n\n        return `Continue the text up to the next punctuation mark:\n  \"\"\"\n  ${prompt}\n  \"\"\"`;\n      },\n      renderGhostText: GhostText,\n    },\n  })),\n] as const;\n",
      "path": "block/ai-editor/components/editor/copilot-plugins.tsx",
      "target": "components/copilot-plugins.tsx",
      "type": "registry:component"
    },
    {
      "content": "'use client';\n\nimport React, { useRef } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { Plate } from '@udecode/plate-common/react';\n\nimport { useCreateEditor } from '@/components/editor/use-create-editor';\nimport { CommentsPopover } from '@/components/plate-ui/comments-popover';\nimport { CursorOverlay } from '@/components/plate-ui/cursor-overlay';\nimport { Editor, EditorContainer } from '@/components/plate-ui/editor';\nimport { FixedToolbar } from '@/components/plate-ui/fixed-toolbar';\nimport { FixedToolbarButtons } from '@/components/plate-ui/fixed-toolbar-buttons';\nimport { FloatingToolbar } from '@/components/plate-ui/floating-toolbar';\nimport { FloatingToolbarButtons } from '@/components/plate-ui/floating-toolbar-buttons';\n\n// import { SettingsDialog } from './openai/settings-dialog';\n\nexport default function PlateEditor() {\n  const containerRef = useRef(null);\n\n  const editor = useCreateEditor();\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Plate editor={editor}>\n        <FixedToolbar>\n          <FixedToolbarButtons />\n        </FixedToolbar>\n\n        <EditorContainer\n          id=\"scroll_container\"\n          ref={containerRef}\n          variant=\"demo\"\n        >\n          <Editor variant=\"demo\" />\n\n          <FloatingToolbar>\n            <FloatingToolbarButtons />\n          </FloatingToolbar>\n\n          <CommentsPopover />\n\n          <CursorOverlay containerRef={containerRef} />\n        </EditorContainer>\n\n        {/* <SettingsDialog /> */}\n      </Plate>\n    </DndProvider>\n  );\n}\n",
      "path": "block/ai-editor/components/editor/plate-editor.tsx",
      "target": "components/plate-editor.tsx",
      "type": "registry:component"
    },
    {
      "content": "import type React from 'react';\n\nimport type { useCreateEditor } from '@/components/editor/use-create-editor';\nimport type { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport type {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n} from '@udecode/plate-code-block/react';\nimport type { TCommentText } from '@udecode/plate-comments';\nimport type { ElementOf, TElement, TText } from '@udecode/plate-common';\nimport type { ParagraphPlugin } from '@udecode/plate-common/react';\nimport type { TExcalidrawElement } from '@udecode/plate-excalidraw';\nimport type { ExcalidrawPlugin } from '@udecode/plate-excalidraw/react';\nimport type { HEADING_KEYS } from '@udecode/plate-heading';\nimport type { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport type { TLinkElement } from '@udecode/plate-link';\nimport type { LinkPlugin } from '@udecode/plate-link/react';\nimport type { TTodoListItemElement } from '@udecode/plate-list';\nimport type {\n  BulletedListPlugin,\n  ListItemPlugin,\n  NumberedListPlugin,\n  TodoListPlugin,\n} from '@udecode/plate-list/react';\nimport type { TImageElement, TMediaEmbedElement } from '@udecode/plate-media';\nimport type { ImagePlugin, MediaEmbedPlugin } from '@udecode/plate-media/react';\nimport type {\n  TMentionElement,\n  TMentionInputElement,\n} from '@udecode/plate-mention';\nimport type {\n  MentionInputPlugin,\n  MentionPlugin,\n} from '@udecode/plate-mention/react';\nimport type { TTableElement } from '@udecode/plate-table';\nimport type {\n  TableCellPlugin,\n  TablePlugin,\n  TableRowPlugin,\n} from '@udecode/plate-table/react';\nimport type { TToggleElement } from '@udecode/plate-toggle';\nimport type { TogglePlugin } from '@udecode/plate-toggle/react';\n\nimport { useEditorRef } from '@udecode/plate-common/react';\n\n/** Text */\n\nexport type EmptyText = {\n  text: '';\n};\n\nexport type PlainText = {\n  text: string;\n};\n\nexport interface RichText extends TText, TCommentText {\n  backgroundColor?: React.CSSProperties['backgroundColor'];\n  bold?: boolean;\n  code?: boolean;\n  color?: React.CSSProperties['color'];\n  fontFamily?: React.CSSProperties['fontFamily'];\n  fontSize?: React.CSSProperties['fontSize'];\n  fontWeight?: React.CSSProperties['fontWeight'];\n  italic?: boolean;\n  kbd?: boolean;\n  strikethrough?: boolean;\n  subscript?: boolean;\n  underline?: boolean;\n}\n\n/** Inline Elements */\n\nexport interface MyLinkElement extends TLinkElement {\n  children: RichText[];\n  type: typeof LinkPlugin.key;\n}\n\nexport interface MyMentionInputElement extends TMentionInputElement {\n  children: [PlainText];\n  type: typeof MentionInputPlugin.key;\n}\n\nexport interface MyMentionElement extends TMentionElement {\n  children: [EmptyText];\n  type: typeof MentionPlugin.key;\n}\n\nexport type MyInlineElement =\n  | MyLinkElement\n  | MyMentionElement\n  | MyMentionInputElement;\n\nexport type MyInlineDescendant = MyInlineElement | RichText;\n\nexport type MyInlineChildren = MyInlineDescendant[];\n\n/** Block props */\n\nexport interface MyIndentProps {\n  indent?: number;\n}\n\nexport interface MyIndentListProps extends MyIndentProps {\n  listRestart?: number;\n  listStart?: number;\n  listStyleType?: string;\n}\n\nexport interface MyLineHeightProps {\n  lineHeight?: React.CSSProperties['lineHeight'];\n}\n\nexport interface MyAlignProps {\n  align?: React.CSSProperties['textAlign'];\n}\n\nexport interface MyBlockElement\n  extends TElement,\n    MyIndentListProps,\n    MyLineHeightProps {\n  id?: string;\n}\n\n/** Blocks */\n\nexport interface MyParagraphElement extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof ParagraphPlugin.key;\n}\n\nexport interface MyH1Element extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof HEADING_KEYS.h1;\n}\n\nexport interface MyH2Element extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof HEADING_KEYS.h2;\n}\n\nexport interface MyH3Element extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof HEADING_KEYS.h3;\n}\n\nexport interface MyH4Element extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof HEADING_KEYS.h4;\n}\n\nexport interface MyH5Element extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof HEADING_KEYS.h5;\n}\n\nexport interface MyH6Element extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof HEADING_KEYS.h6;\n}\n\nexport interface MyBlockquoteElement extends MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof BlockquotePlugin.key;\n}\n\nexport interface MyCodeBlockElement extends MyBlockElement {\n  children: MyCodeLineElement[];\n  type: typeof CodeBlockPlugin.key;\n}\n\nexport interface MyCodeLineElement extends TElement {\n  children: PlainText[];\n  type: typeof CodeLinePlugin.key;\n}\n\nexport interface MyTableElement extends TTableElement, MyBlockElement {\n  children: MyTableRowElement[];\n  type: typeof TablePlugin.key;\n}\n\nexport interface MyTableRowElement extends TElement {\n  children: MyTableCellElement[];\n  type: typeof TableRowPlugin.key;\n}\n\nexport interface MyTableCellElement extends TElement {\n  children: MyNestableBlock[];\n  type: typeof TableCellPlugin.key;\n}\n\nexport interface MyBulletedListElement extends TElement, MyBlockElement {\n  children: MyListItemElement[];\n  type: typeof BulletedListPlugin.key;\n}\n\nexport interface MyNumberedListElement extends TElement, MyBlockElement {\n  children: MyListItemElement[];\n  type: typeof NumberedListPlugin.key;\n}\n\nexport interface MyListItemElement extends TElement, MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof ListItemPlugin.key;\n}\n\nexport interface MyTodoListElement\n  extends TTodoListItemElement,\n    MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof TodoListPlugin.key;\n}\n\nexport interface MyToggleElement extends TToggleElement, MyBlockElement {\n  children: MyInlineChildren;\n  type: typeof TogglePlugin.key;\n}\n\nexport interface MyImageElement extends TImageElement, MyBlockElement {\n  children: [EmptyText];\n  type: typeof ImagePlugin.key;\n}\n\nexport interface MyMediaEmbedElement\n  extends TMediaEmbedElement,\n    MyBlockElement {\n  children: [EmptyText];\n  type: typeof MediaEmbedPlugin.key;\n}\n\nexport interface MyHrElement extends MyBlockElement {\n  children: [EmptyText];\n  type: typeof HorizontalRulePlugin.key;\n}\n\nexport interface MyExcalidrawElement\n  extends TExcalidrawElement,\n    MyBlockElement {\n  children: [EmptyText];\n  type: typeof ExcalidrawPlugin.key;\n}\n\nexport type MyNestableBlock = MyParagraphElement;\n\nexport type MyElement = ElementOf<MyEditor>;\n\nexport type MyBlock = Exclude<MyElement, MyInlineElement>;\n\nexport type MyRootBlock =\n  | MyBlockquoteElement\n  | MyBulletedListElement\n  | MyCodeBlockElement\n  | MyExcalidrawElement\n  | MyH1Element\n  | MyH2Element\n  | MyH3Element\n  | MyH4Element\n  | MyH5Element\n  | MyH6Element\n  | MyHrElement\n  | MyImageElement\n  | MyMediaEmbedElement\n  | MyNumberedListElement\n  | MyParagraphElement\n  | MyTableElement\n  | MyTodoListElement\n  | MyToggleElement;\n\n/** Editor types */\n\nexport type MyValue = MyRootBlock[];\n\nexport type MyEditor = ReturnType<typeof useCreateEditor>;\n\nexport const useEditor = () => useEditorRef<MyEditor>();\n",
      "path": "block/ai-editor/components/editor/plate-types.ts",
      "target": "components/plate-types.ts",
      "type": "registry:component"
    },
    {
      "content": "import React from 'react';\n\nimport { withProps } from '@udecode/cn';\nimport { AIPlugin } from '@udecode/plate-ai/react';\nimport { AlignPlugin } from '@udecode/plate-alignment/react';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  SubscriptPlugin,\n  SuperscriptPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { ExitBreakPlugin, SoftBreakPlugin } from '@udecode/plate-break/react';\nimport { CaptionPlugin } from '@udecode/plate-caption/react';\nimport {\n  isCodeBlockEmpty,\n  isSelectionAtCodeBlockStart,\n  unwrapCodeBlock,\n} from '@udecode/plate-code-block';\nimport {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n  CodeSyntaxPlugin,\n} from '@udecode/plate-code-block/react';\nimport { CommentsPlugin } from '@udecode/plate-comments/react';\nimport {\n  isBlockAboveEmpty,\n  isSelectionAtBlockStart,\n  someNode,\n} from '@udecode/plate-common';\nimport {\n  ParagraphPlugin,\n  PlateElement,\n  PlateLeaf,\n  usePlateEditor,\n} from '@udecode/plate-common/react';\nimport { DatePlugin } from '@udecode/plate-date/react';\nimport { DndPlugin } from '@udecode/plate-dnd';\nimport { DocxPlugin } from '@udecode/plate-docx';\nimport { EmojiInputPlugin, EmojiPlugin } from '@udecode/plate-emoji/react';\nimport { ExcalidrawPlugin } from '@udecode/plate-excalidraw/react';\nimport {\n  FontBackgroundColorPlugin,\n  FontColorPlugin,\n  FontSizePlugin,\n} from '@udecode/plate-font/react';\nimport { HEADING_KEYS, HEADING_LEVELS } from '@udecode/plate-heading';\nimport { HeadingPlugin, TocPlugin } from '@udecode/plate-heading/react';\nimport { HighlightPlugin } from '@udecode/plate-highlight/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport { IndentPlugin } from '@udecode/plate-indent/react';\nimport { IndentListPlugin } from '@udecode/plate-indent-list/react';\nimport { JuicePlugin } from '@udecode/plate-juice';\nimport { KbdPlugin } from '@udecode/plate-kbd/react';\nimport { ColumnItemPlugin, ColumnPlugin } from '@udecode/plate-layout/react';\nimport { LineHeightPlugin } from '@udecode/plate-line-height/react';\nimport { LinkPlugin } from '@udecode/plate-link/react';\nimport {\n  BulletedListPlugin,\n  ListItemPlugin,\n  NumberedListPlugin,\n  TodoListPlugin,\n} from '@udecode/plate-list/react';\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\nimport { ImagePlugin, MediaEmbedPlugin } from '@udecode/plate-media/react';\nimport {\n  MentionInputPlugin,\n  MentionPlugin,\n} from '@udecode/plate-mention/react';\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\nimport { ResetNodePlugin } from '@udecode/plate-reset-node/react';\nimport { SelectOnBackspacePlugin } from '@udecode/plate-select';\nimport {\n  BlockMenuPlugin,\n  BlockSelectionPlugin,\n} from '@udecode/plate-selection/react';\nimport {\n  SlashInputPlugin,\n  SlashPlugin,\n} from '@udecode/plate-slash-command/react';\nimport { TabbablePlugin } from '@udecode/plate-tabbable/react';\nimport {\n  TableCellHeaderPlugin,\n  TableCellPlugin,\n  TablePlugin,\n  TableRowPlugin,\n} from '@udecode/plate-table/react';\nimport { TogglePlugin } from '@udecode/plate-toggle/react';\nimport { TrailingBlockPlugin } from '@udecode/plate-trailing-block';\nimport Prism from 'prismjs';\n\nimport { autoformatPlugin } from '@/components/editor/autoformat-plugin';\nimport { AILeaf } from '@/components/plate-ui/ai-leaf';\nimport { BlockContextMenu } from '@/components/plate-ui/block-context-menu';\nimport { BlockquoteElement } from '@/components/plate-ui/blockquote-element';\nimport { CodeBlockElement } from '@/components/plate-ui/code-block-element';\nimport { CodeLeaf } from '@/components/plate-ui/code-leaf';\nimport { CodeLineElement } from '@/components/plate-ui/code-line-element';\nimport { CodeSyntaxLeaf } from '@/components/plate-ui/code-syntax-leaf';\nimport { ColumnElement } from '@/components/plate-ui/column-element';\nimport { ColumnGroupElement } from '@/components/plate-ui/column-group-element';\nimport { CommentLeaf } from '@/components/plate-ui/comment-leaf';\nimport { DragOverCursorPlugin } from '@/components/plate-ui/cursor-overlay';\nimport { DateElement } from '@/components/plate-ui/date-element';\nimport { EmojiInputElement } from '@/components/plate-ui/emoji-input-element';\nimport { ExcalidrawElement } from '@/components/plate-ui/excalidraw-element';\nimport { HeadingElement } from '@/components/plate-ui/heading-element';\nimport { HighlightLeaf } from '@/components/plate-ui/highlight-leaf';\nimport { HrElement } from '@/components/plate-ui/hr-element';\nimport { ImageElement } from '@/components/plate-ui/image-element';\nimport { ImagePreview } from '@/components/plate-ui/image-preview';\nimport {\n  TodoLi,\n  TodoMarker,\n} from '@/components/plate-ui/indent-todo-marker';\nimport { KbdLeaf } from '@/components/plate-ui/kbd-leaf';\nimport { LinkElement } from '@/components/plate-ui/link-element';\nimport { LinkFloatingToolbar } from '@/components/plate-ui/link-floating-toolbar';\nimport { ListElement } from '@/components/plate-ui/list-element';\nimport { MediaEmbedElement } from '@/components/plate-ui/media-embed-element';\nimport { MentionElement } from '@/components/plate-ui/mention-element';\nimport { MentionInputElement } from '@/components/plate-ui/mention-input-element';\nimport { ParagraphElement } from '@/components/plate-ui/paragraph-element';\nimport { withPlaceholders } from '@/components/plate-ui/placeholder';\nimport { SlashInputElement } from '@/components/plate-ui/slash-input-element';\nimport {\n  TableCellElement,\n  TableCellHeaderElement,\n} from '@/components/plate-ui/table-cell-element';\nimport { TableElement } from '@/components/plate-ui/table-element';\nimport { TableRowElement } from '@/components/plate-ui/table-row-element';\nimport { TocElement } from '@/components/plate-ui/toc-element';\nimport { TodoListElement } from '@/components/plate-ui/todo-list-element';\nimport { ToggleElement } from '@/components/plate-ui/toggle-element';\nimport { withDraggables } from '@/components/plate-ui/with-draggables';\n\n// import { SettingsDialog } from './openai/settings-dialog';\nimport { aiPlugins } from './ai-plugins';\nimport { copilotPlugins } from './copilot-plugins';\n\nexport const useCreateEditor = () => {\n  return usePlateEditor({\n    override: {\n      components: withDraggables(\n        withPlaceholders({\n          [AIPlugin.key]: AILeaf,\n          [BlockquotePlugin.key]: BlockquoteElement,\n          [BoldPlugin.key]: withProps(PlateLeaf, { as: 'strong' }),\n          [BulletedListPlugin.key]: withProps(ListElement, { variant: 'ul' }),\n          [CodeBlockPlugin.key]: CodeBlockElement,\n          [CodeLinePlugin.key]: CodeLineElement,\n          [CodePlugin.key]: CodeLeaf,\n          [CodeSyntaxPlugin.key]: CodeSyntaxLeaf,\n          [ColumnItemPlugin.key]: ColumnElement,\n          [ColumnPlugin.key]: ColumnGroupElement,\n          [CommentsPlugin.key]: CommentLeaf,\n          [DatePlugin.key]: DateElement,\n          [EmojiInputPlugin.key]: EmojiInputElement,\n          [ExcalidrawPlugin.key]: ExcalidrawElement,\n          [HEADING_KEYS.h1]: withProps(HeadingElement, { variant: 'h1' }),\n          [HEADING_KEYS.h2]: withProps(HeadingElement, { variant: 'h2' }),\n          [HEADING_KEYS.h3]: withProps(HeadingElement, { variant: 'h3' }),\n          [HEADING_KEYS.h4]: withProps(HeadingElement, { variant: 'h4' }),\n          [HEADING_KEYS.h5]: withProps(HeadingElement, { variant: 'h5' }),\n          [HEADING_KEYS.h6]: withProps(HeadingElement, { variant: 'h6' }),\n          [HighlightPlugin.key]: HighlightLeaf,\n          [HorizontalRulePlugin.key]: HrElement,\n          [ImagePlugin.key]: ImageElement,\n          [ItalicPlugin.key]: withProps(PlateLeaf, { as: 'em' }),\n          [KbdPlugin.key]: KbdLeaf,\n          [LinkPlugin.key]: LinkElement,\n          [ListItemPlugin.key]: withProps(PlateElement, { as: 'li' }),\n          [MediaEmbedPlugin.key]: MediaEmbedElement,\n          [MentionInputPlugin.key]: MentionInputElement,\n          [MentionPlugin.key]: MentionElement,\n          [NumberedListPlugin.key]: withProps(ListElement, { variant: 'ol' }),\n          [ParagraphPlugin.key]: ParagraphElement,\n          [SlashInputPlugin.key]: SlashInputElement,\n          [StrikethroughPlugin.key]: withProps(PlateLeaf, { as: 's' }),\n          [SubscriptPlugin.key]: withProps(PlateLeaf, { as: 'sub' }),\n          [SuperscriptPlugin.key]: withProps(PlateLeaf, { as: 'sup' }),\n          [TableCellHeaderPlugin.key]: TableCellHeaderElement,\n          [TableCellPlugin.key]: TableCellElement,\n          [TablePlugin.key]: TableElement,\n          [TableRowPlugin.key]: TableRowElement,\n          [TocPlugin.key]: TocElement,\n          [TodoListPlugin.key]: TodoListElement,\n          [TogglePlugin.key]: ToggleElement,\n          [UnderlinePlugin.key]: withProps(PlateLeaf, { as: 'u' }),\n        })\n      ),\n    },\n    plugins: [\n      // AI\n      ...aiPlugins,\n      ...copilotPlugins,\n      // Nodes\n      HeadingPlugin,\n      TocPlugin.configure({\n        options: {\n          scrollContainerSelector: `#scroll_container`,\n          topOffset: 80,\n        },\n      }),\n      BlockquotePlugin,\n      CodeBlockPlugin.configure({\n        options: {\n          prism: Prism,\n        },\n      }),\n      HorizontalRulePlugin,\n      LinkPlugin.configure({\n        render: { afterEditable: () => <LinkFloatingToolbar /> },\n      }),\n      ImagePlugin.extend({\n        render: { afterEditable: ImagePreview },\n      }),\n      MediaEmbedPlugin,\n      CaptionPlugin.configure({\n        options: { plugins: [ImagePlugin, MediaEmbedPlugin] },\n      }),\n      DatePlugin,\n      MentionPlugin.configure({\n        options: {\n          triggerPreviousCharPattern: /^$|^[\\s\"']$/,\n        },\n      }),\n      SlashPlugin,\n      TablePlugin.configure({\n        options: {\n          enableMerging: true,\n        },\n      }),\n      ColumnPlugin,\n\n      TodoListPlugin,\n      TogglePlugin,\n      ExcalidrawPlugin,\n      // Marks\n      BoldPlugin,\n      ItalicPlugin,\n      UnderlinePlugin,\n      StrikethroughPlugin,\n      CodePlugin,\n      SubscriptPlugin,\n      SuperscriptPlugin,\n      FontColorPlugin,\n      FontBackgroundColorPlugin,\n      FontSizePlugin,\n      HighlightPlugin,\n      KbdPlugin,\n\n      // Block Style\n      AlignPlugin.configure({\n        inject: {\n          targetPlugins: [\n            ParagraphPlugin.key,\n            MediaEmbedPlugin.key,\n            ImagePlugin.key,\n            ...HEADING_LEVELS,\n          ],\n        },\n      }),\n      IndentPlugin.configure({\n        inject: {\n          targetPlugins: [\n            ParagraphPlugin.key,\n            BlockquotePlugin.key,\n            CodeBlockPlugin.key,\n            TogglePlugin.key,\n            ...HEADING_LEVELS,\n          ],\n        },\n      }),\n      IndentListPlugin.configure({\n        inject: {\n          targetPlugins: [\n            ParagraphPlugin.key,\n            BlockquotePlugin.key,\n            CodeBlockPlugin.key,\n            TogglePlugin.key,\n            ...HEADING_LEVELS,\n          ],\n        },\n        options: {\n          listStyleTypes: {\n            todo: {\n              liComponent: TodoLi,\n              markerComponent: TodoMarker,\n              type: 'todo',\n            },\n          },\n        },\n      }),\n      LineHeightPlugin.configure({\n        inject: {\n          nodeProps: {\n            defaultNodeValue: 1.5,\n            validNodeValues: [1, 1.2, 1.5, 2, 3],\n          },\n          targetPlugins: [ParagraphPlugin.key, ...HEADING_LEVELS],\n        },\n      }),\n\n      // Functionality\n      autoformatPlugin,\n      BlockSelectionPlugin.configure({\n        options: {\n          areaOptions: {\n            behaviour: {\n              scrolling: {\n                speedDivider: 1.5,\n              },\n              startThreshold: 10,\n            },\n            boundaries: `#scroll_container`,\n            container: `#scroll_container`,\n            selectables: [`#scroll_container .slate-selectable`],\n            selectionAreaClass: 'slate-selection-area',\n          },\n          enableContextMenu: true,\n        },\n      }),\n      BlockMenuPlugin.configure({\n        render: { aboveEditable: BlockContextMenu },\n      }),\n      DndPlugin.configure({\n        options: { enableScroller: true },\n      }),\n      EmojiPlugin,\n      ExitBreakPlugin.configure({\n        options: {\n          rules: [\n            {\n              hotkey: 'mod+enter',\n            },\n            {\n              before: true,\n              hotkey: 'mod+shift+enter',\n            },\n            {\n              hotkey: 'enter',\n              level: 1,\n              query: {\n                allow: HEADING_LEVELS,\n                end: true,\n                start: true,\n              },\n              relative: true,\n            },\n          ],\n        },\n      }),\n      NodeIdPlugin,\n      ResetNodePlugin.configure({\n        options: {\n          rules: [\n            {\n              defaultType: ParagraphPlugin.key,\n              hotkey: 'Enter',\n              predicate: isBlockAboveEmpty,\n              types: [BlockquotePlugin.key, TodoListPlugin.key],\n            },\n            {\n              defaultType: ParagraphPlugin.key,\n              hotkey: 'Backspace',\n              predicate: isSelectionAtBlockStart,\n              types: [BlockquotePlugin.key, TodoListPlugin.key],\n            },\n            {\n              defaultType: ParagraphPlugin.key,\n              hotkey: 'Enter',\n              predicate: isCodeBlockEmpty,\n              types: [CodeBlockPlugin.key],\n              onReset: unwrapCodeBlock,\n            },\n            {\n              defaultType: ParagraphPlugin.key,\n              hotkey: 'Backspace',\n              predicate: isSelectionAtCodeBlockStart,\n              types: [CodeBlockPlugin.key],\n              onReset: unwrapCodeBlock,\n            },\n          ],\n        },\n      }),\n      SelectOnBackspacePlugin.configure({\n        options: {\n          query: {\n            allow: [ImagePlugin.key, HorizontalRulePlugin.key],\n          },\n        },\n      }),\n      SoftBreakPlugin.configure({\n        options: {\n          rules: [\n            { hotkey: 'shift+enter' },\n            {\n              hotkey: 'enter',\n              query: {\n                allow: [\n                  CodeBlockPlugin.key,\n                  BlockquotePlugin.key,\n                  TableCellPlugin.key,\n                  TableCellHeaderPlugin.key,\n                ],\n              },\n            },\n          ],\n        },\n      }),\n      TabbablePlugin.configure(({ editor }) => ({\n        options: {\n          query: () => {\n            if (isSelectionAtBlockStart(editor)) return false;\n\n            return !someNode(editor, {\n              match: (n) => {\n                return !!(\n                  n.type &&\n                  ([\n                    CodeBlockPlugin.key,\n                    TablePlugin.key,\n                    TodoListPlugin.key,\n                  ].includes(n.type as string) ||\n                    n.listStyleType)\n                );\n              },\n            });\n          },\n        },\n      })),\n      TrailingBlockPlugin.configure({\n        options: { type: ParagraphPlugin.key },\n      }),\n\n      // Collaboration\n      DragOverCursorPlugin,\n      CommentsPlugin.configure({\n        options: {\n          myUserId: '1',\n          users: {\n            1: {\n              id: '1',\n              avatarUrl:\n                'https://avatars.githubusercontent.com/u/19695832?s=96&v=4',\n              name: 'zbeyens',\n            },\n          },\n        },\n      }),\n\n      // Deserialization\n      DocxPlugin,\n      MarkdownPlugin.configure({ options: { indentList: true } }),\n      JuicePlugin,\n    ],\n    value: [\n      {\n        id: '1',\n        children: [{ text: 'Playground' }],\n        type: 'h1',\n      },\n      {\n        id: '2',\n        children: [\n          { text: 'A rich-text editor with AI capabilities. Try the ' },\n          { bold: true, text: 'AI commands' },\n          { text: ' or use ' },\n          { kbd: true, text: 'Cmd+J' },\n          { text: ' to open the AI menu.' },\n        ],\n        type: ParagraphPlugin.key,\n      },\n    ],\n  });\n};\n",
      "path": "block/ai-editor/components/editor/use-create-editor.tsx",
      "target": "components/use-create-editor.tsx",
      "type": "registry:component"
    }
  ],
  "name": "ai-editor",
  "registryDependencies": [
    "editor"
  ],
  "type": "registry:block"
}