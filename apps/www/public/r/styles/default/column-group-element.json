{
  "dependencies": [
    "@udecode/plate-layout"
  ],
  "doc": {
    "description": "A resizable column component for layout.",
    "docs": [
      {
        "route": "/docs/column",
        "title": "Column"
      },
      {
        "route": "https://pro.platejs.org/docs/components/column-group-element"
      }
    ],
    "examples": [
      "column-demo"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport type { TColumnElement } from '@udecode/plate-layout';\n\nimport { cn, withRef } from '@udecode/cn';\nimport { useElement, useRemoveNodeButton } from '@udecode/plate-common/react';\nimport {\n  ColumnItemPlugin,\n  useColumnState,\n  useDebouncePopoverOpen,\n} from '@udecode/plate-layout/react';\nimport { Delete } from 'lucide-react';\nimport { useReadOnly } from 'slate-react';\n\nimport {\n  DoubleColumnOutlined,\n  DoubleSideDoubleColumnOutlined,\n  LeftSideDoubleColumnOutlined,\n  RightSideDoubleColumnOutlined,\n  ThreeColumnOutlined,\n} from '@/components/icons';\n\nimport { Button } from './button';\nimport { PlateElement } from './plate-element';\nimport { Popover, PopoverAnchor, PopoverContent } from './popover';\nimport { Separator } from './separator';\n\nexport const ColumnGroupElement = withRef<typeof PlateElement>(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <PlateElement ref={ref} className={cn(className, 'my-2')} {...props}>\n        <ColumnFloatingToolbar>\n          <div className={cn('flex size-full gap-4 rounded')}>{children}</div>\n        </ColumnFloatingToolbar>\n      </PlateElement>\n    );\n  }\n);\n\nexport function ColumnFloatingToolbar({ children }: React.PropsWithChildren) {\n  const readOnly = useReadOnly();\n\n  const {\n    setDoubleColumn,\n    setDoubleSideDoubleColumn,\n    setLeftSideDoubleColumn,\n    setRightSideDoubleColumn,\n    setThreeColumn,\n  } = useColumnState();\n\n  const element = useElement<TColumnElement>(ColumnItemPlugin.key);\n\n  const { props: buttonProps } = useRemoveNodeButton({ element });\n\n  const isOpen = useDebouncePopoverOpen();\n\n  if (readOnly) return <>{children}</>;\n\n  return (\n    <Popover open={isOpen} modal={false}>\n      <PopoverAnchor>{children}</PopoverAnchor>\n      <PopoverContent\n        className=\"w-auto p-1\"\n        onOpenAutoFocus={(e) => e.preventDefault()}\n        align=\"center\"\n        side=\"top\"\n        sideOffset={10}\n      >\n        <div className=\"box-content flex h-9 items-center gap-1 [&_svg]:size-4 [&_svg]:text-muted-foreground\">\n          <Button size=\"sms\" variant=\"ghost\" onClick={setDoubleColumn}>\n            <DoubleColumnOutlined />\n          </Button>\n          <Button size=\"sms\" variant=\"ghost\" onClick={setThreeColumn}>\n            <ThreeColumnOutlined />\n          </Button>\n          <Button size=\"sms\" variant=\"ghost\" onClick={setRightSideDoubleColumn}>\n            <RightSideDoubleColumnOutlined />\n          </Button>\n          <Button size=\"sms\" variant=\"ghost\" onClick={setLeftSideDoubleColumn}>\n            <LeftSideDoubleColumnOutlined />\n          </Button>\n          <Button\n            size=\"sms\"\n            variant=\"ghost\"\n            onClick={setDoubleSideDoubleColumn}\n          >\n            <DoubleSideDoubleColumnOutlined />\n          </Button>\n\n          <Separator orientation=\"vertical\" className=\"my-1\" />\n          <Button size=\"sms\" variant=\"ghost\" {...buttonProps}>\n            <Delete />\n          </Button>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "path": "plate-ui/column-group-element.tsx",
      "target": "components/plate-ui/column-group-element.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "column-group-element",
  "registryDependencies": [
    "command",
    "resizable",
    "plate-element"
  ],
  "type": "registry:ui"
}