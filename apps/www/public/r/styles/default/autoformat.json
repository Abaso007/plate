{
  "doc": {
    "description": "Apply formatting automatically using shortcodes.",
    "title": "Autoformat"
  },
  "files": [
    {
      "content": "import React from 'react';\n\nimport { Plate } from '@udecode/plate-common/react';\n\nimport { editorPlugins } from '@/components/editor/plugins/editor-plugins';\nimport { useCreateEditor } from '@/components/editor/use-create-editor';\nimport { Editor, EditorContainer } from '@/components/plate-ui/editor';\n\nimport { DEMO_VALUES } from './values/demo-values';\n\nexport default function Demo({ id }: { id: string }) {\n  const editor = useCreateEditor({\n    plugins: [...editorPlugins],\n    value: DEMO_VALUES[id],\n  });\n\n  return (\n    <Plate editor={editor}>\n      <EditorContainer variant=\"demo\">\n        <Editor />\n      </EditorContainer>\n    </Plate>\n  );\n}\n",
      "path": "example/demo.tsx",
      "target": "components/demo.tsx",
      "type": "registry:example"
    },
    {
      "content": "'use client';\n\nimport type { AutoformatRule } from '@udecode/plate-autoformat';\nimport type { SlateEditor } from '@udecode/plate-common';\n\nimport {\n  autoformatArrow,\n  autoformatLegal,\n  autoformatLegalHtml,\n  autoformatMath,\n  autoformatPunctuation,\n  autoformatSmartQuotes,\n} from '@udecode/plate-autoformat';\nimport { AutoformatPlugin } from '@udecode/plate-autoformat/react';\nimport {\n  BoldPlugin,\n  CodePlugin,\n  ItalicPlugin,\n  StrikethroughPlugin,\n  SubscriptPlugin,\n  SuperscriptPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { insertEmptyCodeBlock } from '@udecode/plate-code-block';\nimport {\n  CodeBlockPlugin,\n  CodeLinePlugin,\n} from '@udecode/plate-code-block/react';\nimport {\n  getParentNode,\n  insertNodes,\n  isElement,\n  isType,\n  setNodes,\n} from '@udecode/plate-common';\nimport { ParagraphPlugin } from '@udecode/plate-common/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { HighlightPlugin } from '@udecode/plate-highlight/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport {\n  INDENT_LIST_KEYS,\n  ListStyleType,\n  toggleIndentList,\n} from '@udecode/plate-indent-list';\nimport { TogglePlugin, openNextToggles } from '@udecode/plate-toggle/react';\n\nexport const format = (editor: SlateEditor, customFormatting: any) => {\n  if (editor.selection) {\n    const parentEntry = getParentNode(editor, editor.selection);\n\n    if (!parentEntry) return;\n\n    const [node] = parentEntry;\n\n    if (\n      isElement(node) &&\n      !isType(editor, node, CodeBlockPlugin.key) &&\n      !isType(editor, node, CodeLinePlugin.key)\n    ) {\n      customFormatting();\n    }\n  }\n};\n\nexport const autoformatMarks: AutoformatRule[] = [\n  {\n    match: '***',\n    mode: 'mark',\n    type: [BoldPlugin.key, ItalicPlugin.key],\n  },\n  {\n    match: '__*',\n    mode: 'mark',\n    type: [UnderlinePlugin.key, ItalicPlugin.key],\n  },\n  {\n    match: '__**',\n    mode: 'mark',\n    type: [UnderlinePlugin.key, BoldPlugin.key],\n  },\n  {\n    match: '___***',\n    mode: 'mark',\n    type: [UnderlinePlugin.key, BoldPlugin.key, ItalicPlugin.key],\n  },\n  {\n    match: '**',\n    mode: 'mark',\n    type: BoldPlugin.key,\n  },\n  {\n    match: '__',\n    mode: 'mark',\n    type: UnderlinePlugin.key,\n  },\n  {\n    match: '*',\n    mode: 'mark',\n    type: ItalicPlugin.key,\n  },\n  {\n    match: '_',\n    mode: 'mark',\n    type: ItalicPlugin.key,\n  },\n  {\n    match: '~~',\n    mode: 'mark',\n    type: StrikethroughPlugin.key,\n  },\n  {\n    match: '^',\n    mode: 'mark',\n    type: SuperscriptPlugin.key,\n  },\n  {\n    match: '~',\n    mode: 'mark',\n    type: SubscriptPlugin.key,\n  },\n  {\n    match: '==',\n    mode: 'mark',\n    type: HighlightPlugin.key,\n  },\n  {\n    match: '≡',\n    mode: 'mark',\n    type: HighlightPlugin.key,\n  },\n  {\n    match: '`',\n    mode: 'mark',\n    type: CodePlugin.key,\n  },\n];\n\nexport const autoformatBlocks: AutoformatRule[] = [\n  {\n    match: '# ',\n    mode: 'block',\n    type: HEADING_KEYS.h1,\n  },\n  {\n    match: '## ',\n    mode: 'block',\n    type: HEADING_KEYS.h2,\n  },\n  {\n    match: '### ',\n    mode: 'block',\n    type: HEADING_KEYS.h3,\n  },\n  {\n    match: '#### ',\n    mode: 'block',\n    type: HEADING_KEYS.h4,\n  },\n  {\n    match: '##### ',\n    mode: 'block',\n    type: HEADING_KEYS.h5,\n  },\n  {\n    match: '###### ',\n    mode: 'block',\n    type: HEADING_KEYS.h6,\n  },\n  {\n    match: '> ',\n    mode: 'block',\n    type: BlockquotePlugin.key,\n  },\n  {\n    format: (editor) => {\n      insertEmptyCodeBlock(editor, {\n        defaultType: ParagraphPlugin.key,\n        insertNodesOptions: { select: true },\n      });\n    },\n    match: '```',\n    mode: 'block',\n    triggerAtBlockStart: false,\n    type: CodeBlockPlugin.key,\n  },\n  {\n    match: '+ ',\n    mode: 'block',\n    preFormat: openNextToggles,\n    type: TogglePlugin.key,\n  },\n  {\n    format: (editor) => {\n      setNodes(editor, { type: HorizontalRulePlugin.key });\n      insertNodes(editor, {\n        children: [{ text: '' }],\n        type: ParagraphPlugin.key,\n      });\n    },\n    match: ['---', '—-', '___ '],\n    mode: 'block',\n    type: HorizontalRulePlugin.key,\n  },\n];\n\nexport const autoformatIndentLists: AutoformatRule[] = [\n  {\n    format: (editor) => {\n      toggleIndentList(editor, {\n        listStyleType: ListStyleType.Disc,\n      });\n    },\n    match: ['* ', '- '],\n    mode: 'block',\n    type: 'list',\n  },\n  {\n    format: (editor) =>\n      toggleIndentList(editor, {\n        listStyleType: ListStyleType.Decimal,\n      }),\n    match: [String.raw`^\\d+\\.$ `, String.raw`^\\d+\\)$ `],\n    matchByRegex: true,\n    mode: 'block',\n    type: 'list',\n  },\n  {\n    format: (editor) => {\n      toggleIndentList(editor, {\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n      setNodes(editor, {\n        checked: false,\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n    },\n    match: ['[] '],\n    mode: 'block',\n    type: 'list',\n  },\n  {\n    format: (editor) => {\n      toggleIndentList(editor, {\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n      setNodes(editor, {\n        checked: true,\n        listStyleType: INDENT_LIST_KEYS.todo,\n      });\n    },\n    match: ['[x] '],\n    mode: 'block',\n    type: 'list',\n  },\n];\n\nexport const autoformatPlugin = AutoformatPlugin.configure({\n  options: {\n    enableUndoOnDelete: true,\n    rules: [\n      ...autoformatBlocks,\n      ...autoformatMarks,\n      ...autoformatSmartQuotes,\n      ...autoformatPunctuation,\n      ...autoformatLegal,\n      ...autoformatLegalHtml,\n      ...autoformatArrow,\n      ...autoformatMath,\n      ...autoformatIndentLists,\n    ],\n  },\n});\n",
      "path": "components/editor/plugins/autoformat-plugin.ts",
      "target": "components/autoformat-plugin.ts",
      "type": "registry:example"
    },
    {
      "content": "import { jsx } from '@udecode/plate-test-utils';\n\njsx;\n\nexport const autoformatValue: any = (\n  <fragment>\n    <hh2>Autoformat</hh2>\n    <hp>\n      Empower your writing experience by enabling autoformatting features. Add\n      Markdown-like shortcuts that automatically apply formatting as you type.\n    </hp>\n    <hp>While typing, try these mark rules:</hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>**</htext> or <htext code>__</htext> on either side of\n      your text to add **bold* mark.\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>*</htext> or <htext code>_</htext> on either side of your\n      text to add *italic mark.\n    </hp>\n\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>`</htext> on either side of your text to add `inline code\n      mark.\n    </hp>\n\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>~~</htext> on either side of your text to add\n      ~~strikethrough~ mark.\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Note that nothing happens when there is a character before, try on:*bold\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      We even support smart quotes, try typing{' '}\n      <htext code>\"hello\" 'world'</htext>.\n    </hp>\n\n    <hp>\n      At the beginning of any new block or existing block, try these (block\n      rules):\n    </hp>\n\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>*</htext>, <htext code>-</htext> or <htext code>+</htext>\n      followed by <htext code>space</htext> to create a bulleted list.\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>1.</htext> or <htext code>1)</htext> followed by{' '}\n      <htext code>space</htext>\n      to create a numbered list.\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>[]</htext>,or <htext code>[x]</htext>\n      followed by <htext code>space</htext> to create a todo list.\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>&gt;</htext> followed by <htext code>space</htext> to\n      create a block quote.\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>```</htext> to create a code block.\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>---</htext> to create a horizontal rule.\n    </hp>\n\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>#</htext> followed by <htext code>space</htext> to create\n      an H1 heading.\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>###</htext> followed by <htext code>space</htext> to\n      create an H3 sub-heading.\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>####</htext> followed by <htext code>space</htext> to\n      create an H4 sub-heading.\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>#####</htext> followed by <htext code>space</htext> to\n      create an H5 sub-heading.\n    </hp>\n    <hp indent={1} listStyleType=\"disc\">\n      Type <htext code>######</htext> followed by <htext code>space</htext> to\n      create an H6 sub-heading.\n    </hp>\n  </fragment>\n);\n",
      "path": "example/values/autoformat-value.tsx",
      "target": "components/autoformat-value.tsx",
      "type": "registry:example"
    }
  ],
  "name": "autoformat",
  "type": "registry:example"
}