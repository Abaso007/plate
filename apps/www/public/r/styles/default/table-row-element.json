{
  "dependencies": [],
  "doc": {
    "description": "A table row component with optional border hiding.",
    "docs": [
      {
        "route": "/docs/table"
      },
      {
        "route": "https://pro.platejs.org/docs/components/table-row-element"
      }
    ],
    "examples": [
      "table-demo"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn, useComposedRef, withRef } from '@udecode/cn';\nimport { PathApi } from '@udecode/plate';\nimport { useDraggable, useDropLine } from '@udecode/plate-dnd';\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\nimport {\n  PlateElement,\n  useEditorRef,\n  useElement,\n  useReadOnly,\n  useSelected,\n} from '@udecode/plate/react';\nimport { GripVertical } from 'lucide-react';\n\nimport { Button } from './button';\n\nexport const TableRowElement = withRef<typeof PlateElement>(\n  ({ children, className, ...props }, ref) => {\n    const { element } = props;\n    const readOnly = useReadOnly();\n    const selected = useSelected();\n    const editor = useEditorRef();\n    const isSelectionAreaVisible = editor.useOption(\n      BlockSelectionPlugin,\n      'isSelectionAreaVisible'\n    );\n    const hasControls = !readOnly && !isSelectionAreaVisible;\n\n    const { isDragging, previewRef, handleRef } = useDraggable({\n      element,\n      type: element.type,\n      canDropNode: ({ dragEntry, dropEntry }) =>\n        PathApi.equals(\n          PathApi.parent(dragEntry[1]),\n          PathApi.parent(dropEntry[1])\n        ),\n      onDropHandler: (_, { dragItem }) => {\n        const dragElement = (dragItem as any).element;\n\n        if (dragElement) {\n          editor.tf.select(dragElement);\n        }\n      },\n    });\n\n    return (\n      <PlateElement\n        ref={useComposedRef(ref, previewRef)}\n        as=\"tr\"\n        className={cn(className, 'group/row', isDragging && 'opacity-50')}\n        data-selected={selected ? 'true' : undefined}\n        {...props}\n      >\n        {hasControls && (\n          <td className=\"w-2 select-none\" contentEditable={false}>\n            <RowDragHandle dragRef={handleRef} />\n            <DropLine />\n          </td>\n        )}\n\n        {children}\n      </PlateElement>\n    );\n  }\n);\n\nfunction RowDragHandle({ dragRef }: { dragRef: React.Ref<any> }) {\n  const editor = useEditorRef();\n  const element = useElement();\n\n  return (\n    <Button\n      ref={dragRef}\n      variant=\"outline\"\n      className={cn(\n        'absolute top-1/2 left-0 z-51 h-6 w-4 -translate-y-1/2 p-0 focus-visible:ring-0 focus-visible:ring-offset-0',\n        'cursor-grab active:cursor-grabbing',\n        'opacity-0 transition-opacity duration-100 group-hover/row:opacity-100 group-has-data-[resizing=\"true\"]/row:opacity-0'\n      )}\n      onClick={() => {\n        editor.tf.select(element);\n      }}\n    >\n      <GripVertical className=\"text-muted-foreground\" />\n    </Button>\n  );\n}\n\nfunction DropLine() {\n  const { dropLine } = useDropLine();\n\n  if (!dropLine) return null;\n\n  return (\n    <div\n      className={cn(\n        'absolute inset-x-0 left-2 z-50 h-0.5 bg-brand/50',\n        dropLine === 'top' ? '-top-px' : '-bottom-px'\n      )}\n    />\n  );\n}\n",
      "path": "plate-ui/table-row-element.tsx",
      "target": "components/plate-ui/table-row-element.tsx",
      "type": "registry:ui"
    },
    {
      "content": "import React from 'react';\n\nimport type { SlateElementProps } from '@udecode/plate';\n\nimport { cn } from '@udecode/cn';\nimport { SlateElement } from '@udecode/plate';\n\nexport function TableRowElementStatic({\n  children,\n  className,\n  ...props\n}: SlateElementProps) {\n  return (\n    <SlateElement as=\"tr\" className={cn(className, 'h-full')} {...props}>\n      {children}\n    </SlateElement>\n  );\n}\n",
      "path": "plate-ui/table-row-element-static.tsx",
      "target": "components/plate-ui/table-row-element-static.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "table-row-element",
  "registryDependencies": [
    "plate-element"
  ],
  "type": "registry:ui"
}