{
  "dependencies": [
    "uploadthing@7.2.0",
    "sonner"
  ],
  "files": [
    {
      "content": "import * as React from 'react';\n\nimport { isRedirectError } from 'next/dist/client/components/redirect';\nimport { toast } from 'sonner';\nimport { z } from 'zod';\n\nexport interface UploadedFile {\n  key: string;\n  appUrl: string;\n  name: string;\n  size: number;\n  type: string;\n  url: string;\n}\n\nexport function useUploadFile() {\n  const [uploadedFile, setUploadedFile] = React.useState<UploadedFile>();\n  const [uploadingFile, setUploadingFile] = React.useState<File>();\n  const [progress, setProgress] = React.useState<number>(0);\n  const [isUploading, setIsUploading] = React.useState(false);\n\n  async function uploadThing(file: File) {\n    setIsUploading(true);\n    setUploadingFile(file);\n\n    try {\n      // Mock upload for unauthenticated users\n      // toast.info('User not logged in. Mocking upload process.');\n      const mockUploadedFile = {\n        key: 'mock-key-0',\n        appUrl: `https://mock-app-url.com/${file.name}`,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        url: URL.createObjectURL(file),\n      } as UploadedFile;\n\n      // Simulate upload progress\n      let progress = 0;\n\n      const simulateProgress = async () => {\n        while (progress < 100) {\n          await new Promise((resolve) => setTimeout(resolve, 50));\n          progress += 2;\n          setProgress(Math.min(progress, 100));\n        }\n      };\n\n      await simulateProgress();\n\n      setUploadedFile(mockUploadedFile);\n\n      return mockUploadedFile;\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n\n      const message =\n        errorMessage.length > 0\n          ? errorMessage\n          : 'Something went wrong, please try again later.';\n\n      toast.error(message);\n    } finally {\n      setProgress(0);\n      setIsUploading(false);\n      setUploadingFile(undefined);\n    }\n  }\n\n  return {\n    isUploading,\n    progress,\n    uploadFile: uploadThing,\n    uploadedFile,\n    uploadingFile,\n  };\n}\n\nexport function getErrorMessage(err: unknown) {\n  const unknownError = 'Something went wrong, please try again later.';\n\n  if (err instanceof z.ZodError) {\n    const errors = err.issues.map((issue) => {\n      return issue.message;\n    });\n\n    return errors.join('\\n');\n  } else if (err instanceof Error) {\n    return err.message;\n  } else if (isRedirectError(err)) {\n    throw err;\n  } else {\n    return unknownError;\n  }\n}\n\nexport function showErrorToast(err: unknown) {\n  const errorMessage = getErrorMessage(err);\n\n  return toast.error(errorMessage);\n}\n",
      "path": "lib/uploadthing.ts",
      "target": "lib/uploadthing.ts",
      "type": "registry:lib"
    }
  ],
  "name": "uploadthing",
  "type": "registry:lib"
}