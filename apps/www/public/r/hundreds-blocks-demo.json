{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hundreds-blocks-demo",
  "type": "registry:example",
  "dependencies": [
    "@udecode/cn",
    "@udecode/plate-basic-elements",
    "@udecode/plate-basic-marks"
  ],
  "registryDependencies": [
    "https://platejs.org/r/use-create-editor",
    "https://platejs.org/r/editor"
  ],
  "files": [
    {
      "path": "src/registry/examples/hundreds-blocks-demo.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport type { RenderElementProps, TElement, Value } from '@udecode/plate';\n\nimport { BasicElementsPlugin } from '@udecode/plate-basic-elements/react';\nimport { BasicMarksPlugin } from '@udecode/plate-basic-marks/react';\nimport { Editable, Plate, Slate, withReact } from '@udecode/plate/react';\nimport { createEditor } from 'slate';\n\nimport { useCreateEditor } from '@/registry/components/editor/use-create-editor';\nimport { createHugeDocumentValue } from '@/registry/examples/values/huge-document-value';\nimport { Editor, EditorContainer } from '@/registry/ui/editor';\n\nconst value = createHugeDocumentValue();\n\nfunction WithPlate() {\n  const editor = useCreateEditor({\n    plugins: [BasicElementsPlugin, BasicMarksPlugin],\n    value,\n  });\n\n  return (\n    <Plate editor={editor}>\n      <EditorContainer>\n        <Editor spellCheck={false} />\n      </EditorContainer>\n    </Plate>\n  );\n}\n\nfunction Element({ attributes, children, element }: RenderElementProps) {\n  switch ((element as TElement).type) {\n    case 'h1': {\n      return <h1 {...attributes}>{children}</h1>;\n    }\n    default: {\n      return <p {...attributes}>{children}</p>;\n    }\n  }\n}\n\nfunction WithoutPlate() {\n  const [initialValue, setValue] = React.useState(value);\n  const renderElement = React.useCallback((p: any) => <Element {...p} />, []);\n  const editor = React.useMemo(() => withReact(createEditor()), []);\n  const onChange = React.useCallback(\n    (newValue: Value) => setValue(newValue),\n    []\n  );\n\n  return (\n    <Slate\n      onChange={onChange as any}\n      editor={editor}\n      initialValue={initialValue}\n    >\n      <Editable renderElement={renderElement} spellCheck={false} />\n    </Slate>\n  );\n}\n\nexport default function HundredsBlocksDemo() {\n  return (\n    <div className=\"flex\">\n      <div className=\"w-1/2 p-4\">\n        <div className=\"mb-4 text-lg font-bold\">Plate</div>\n        <WithPlate />\n      </div>\n      <div className=\"w-1/2 p-4\">\n        <div className=\"mb-4 text-lg font-bold\">Slate</div>\n        <WithoutPlate />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example"
    },
    {
      "path": "src/registry/examples/values/huge-document-value.tsx",
      "content": "/** @jsxRuntime classic */\n/** @jsx jsx */\nimport type { Descendant, Value } from '@udecode/plate';\n\nimport { jsx } from '@udecode/plate-test-utils';\n\njsx;\n\nconst HEADINGS = 100;\nconst PARAGRAPHS = 7;\n\nexport const createHugeDocumentValue = () => {\n  const hugeDocument: Descendant[] = [];\n\n  for (let h = 0; h < HEADINGS; h++) {\n    hugeDocument.push(\n      (\n        <hh1>Do voluptate enim commodo quis ad aliqua dolore enim eu nisi.</hh1>\n      ) as any\n    );\n\n    for (let p = 0; p < PARAGRAPHS; p++) {\n      hugeDocument.push(\n        (\n          <hp>\n            Ex est consequat anim ad deserunt sint. Ea excepteur consequat amet\n            amet excepteur culpa nulla. Voluptate exercitation pariatur enim.\n            Excepteur ea nulla nostrud est ex sunt anim. Sunt laborum et et ea\n            aliquip excepteur sint nulla amet. Sunt sit cillum amet. Anim esse\n            ut irure ipsum irure proident consectetur eu velit esse. Laborum\n            minim laborum laborum sunt eiusmod aliqua fugiat adipisicing. Cillum\n            aliqua exercitation ex aliquip aliquip amet aliquip est eiusmod\n            tempor pariatur veniam adipisicing ad. Officia sunt ipsum\n            adipisicing eu quis laborum do cupidatat officia dolor.\n          </hp>\n        ) as any\n      );\n    }\n  }\n\n  return hugeDocument as Value;\n};\n",
      "type": "registry:example"
    }
  ]
}