{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table-row-element",
  "type": "registry:ui",
  "title": "Table Row Element",
  "description": "A table row component with optional border hiding.",
  "dependencies": [
    "@udecode/cn"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/registry/ui/table-row-element.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport type { TTableRowElement } from '@udecode/plate-table';\n\nimport { useComposedRef } from '@udecode/cn';\nimport { type TElement, PathApi } from '@udecode/plate';\nimport { useDraggable, useDropLine } from '@udecode/plate-dnd';\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\nimport {\n  type PlateElementProps,\n  PlateElement,\n  useEditorRef,\n  useElement,\n  usePluginOption,\n  useReadOnly,\n  useSelected,\n} from '@udecode/plate/react';\nimport { GripVertical } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\nexport function TableRowElement(props: PlateElementProps<TTableRowElement>) {\n  const { element } = props;\n  const readOnly = useReadOnly();\n  const selected = useSelected();\n  const editor = useEditorRef();\n  const isSelectionAreaVisible = usePluginOption(\n    BlockSelectionPlugin,\n    'isSelectionAreaVisible'\n  );\n  const hasControls = !readOnly && !isSelectionAreaVisible;\n\n  const { isDragging, previewRef, handleRef } = useDraggable({\n    element,\n    type: element.type,\n    canDropNode: ({ dragEntry, dropEntry }) =>\n      PathApi.equals(\n        PathApi.parent(dragEntry[1]),\n        PathApi.parent(dropEntry[1])\n      ),\n    onDropHandler: (_, { dragItem }) => {\n      const dragElement = (dragItem as { element: TElement }).element;\n\n      if (dragElement) {\n        editor.tf.select(dragElement);\n      }\n    },\n  });\n\n  return (\n    <PlateElement\n      {...props}\n      ref={useComposedRef(props.ref, previewRef)}\n      as=\"tr\"\n      className={cn('group/row', isDragging && 'opacity-50')}\n      attributes={{\n        ...props.attributes,\n        'data-selected': selected ? 'true' : undefined,\n      }}\n    >\n      {hasControls && (\n        <td className=\"w-2 select-none\" contentEditable={false}>\n          <RowDragHandle dragRef={handleRef} />\n          <DropLine />\n        </td>\n      )}\n\n      {props.children}\n    </PlateElement>\n  );\n}\n\nfunction RowDragHandle({ dragRef }: { dragRef: React.Ref<any> }) {\n  const editor = useEditorRef();\n  const element = useElement();\n\n  return (\n    <Button\n      ref={dragRef}\n      variant=\"outline\"\n      className={cn(\n        'absolute top-1/2 left-0 z-51 h-6 w-4 -translate-y-1/2 p-0 focus-visible:ring-0 focus-visible:ring-offset-0',\n        'cursor-grab active:cursor-grabbing',\n        'opacity-0 transition-opacity duration-100 group-hover/row:opacity-100 group-has-data-[resizing=\"true\"]/row:opacity-0'\n      )}\n      onClick={() => {\n        editor.tf.select(element);\n      }}\n    >\n      <GripVertical className=\"text-muted-foreground\" />\n    </Button>\n  );\n}\n\nfunction DropLine() {\n  const { dropLine } = useDropLine();\n\n  if (!dropLine) return null;\n\n  return (\n    <div\n      className={cn(\n        'absolute inset-x-0 left-2 z-50 h-0.5 bg-brand/50',\n        dropLine === 'top' ? '-top-px' : '-bottom-px'\n      )}\n    />\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/ui/table-row-element-static.tsx",
      "content": "import * as React from 'react';\n\nimport type { SlateElementProps } from '@udecode/plate';\n\nimport { SlateElement } from '@udecode/plate';\n\nexport function TableRowElementStatic(props: SlateElementProps) {\n  return (\n    <SlateElement {...props} as=\"tr\" className=\"h-full\">\n      {props.children}\n    </SlateElement>\n  );\n}\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "docs": [
      {
        "route": "/docs/table"
      },
      {
        "route": "https://pro.platejs.org/docs/components/table-row-element"
      }
    ],
    "examples": [
      "table-demo"
    ]
  }
}