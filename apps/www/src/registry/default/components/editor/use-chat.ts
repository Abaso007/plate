'use client';

import { openai } from '@ai-sdk/openai';
import { useChat as useBaseChat } from 'ai/react';

import { useSettings } from '@/registry/default/components/editor/settings';

export const useChat = () => {
  const { keys, model } = useSettings();

  return useBaseChat({
    id: 'editor',
    api: '/api/ai/command',
    body: {
      // !!! DEMO ONLY: don't use API keys client-side
      apiKey: keys.openai,
      model: openai('gpt-4o'),
    },
    fetch: async (input, init) => {
      const res = await fetch(input, init);

      if (!res.ok) {
        // Mock the API response. Remove it when you implement the route /api/ai/command
        await new Promise((resolve) => setTimeout(resolve, 400));

        const stream = fakeStreamText();

        return new Response(stream, {
          headers: {
            Connection: 'keep-alive',
            'Content-Type': 'text/plain',
          },
        });
      }

      return res;
    },
  });
};

// Used for testing. Remove it after implementing useChat api.
const fakeStreamText = ({
  chunkCount = 3,
  streamProtocol = 'data',
}: {
  chunkCount?: number;
  streamProtocol?: 'data' | 'text';
} = {}) => {
  // Create 3 blocks with different lengths
  const blocks = [
    [
      { delay: 100, texts: '' },
      { delay: 100, texts: 'To' },
      { delay: 100, texts: ' write' },
      { delay: 100, texts: ' documents' },
      { delay: 100, texts: ' using' },
      { delay: 100, texts: ' Type' },
      { delay: 100, texts: 'Script' },
      { delay: 100, texts: ' with' },
      { delay: 100, texts: ' rich' },
      { delay: 100, texts: ' text' },
      { delay: 100, texts: ' features' },
      { delay: 100, texts: ' like' },
      { delay: 100, texts: ' block' },
      { delay: 100, texts: 'quotes' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' links' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' and' },
      { delay: 100, texts: ' tables' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' you' },
      { delay: 100, texts: ' can' },
      { delay: 100, texts: ' use' },
      { delay: 100, texts: ' libraries' },
      { delay: 100, texts: ' such' },
      { delay: 100, texts: ' as' },
      { delay: 100, texts: ' `' },
      { delay: 100, texts: 'draft' },
      { delay: 100, texts: '-js' },
      { delay: 100, texts: '`' },
      { delay: 100, texts: ' or' },
      { delay: 100, texts: ' `' },
      { delay: 100, texts: 'sl' },
      { delay: 100, texts: 'ate' },
      { delay: 100, texts: '`.' },
      { delay: 100, texts: ' These' },
      { delay: 100, texts: ' libraries' },
      { delay: 100, texts: ' allow' },
      { delay: 100, texts: ' you' },
      { delay: 100, texts: ' to' },
      { delay: 100, texts: ' create' },
      { delay: 100, texts: ' rich' },
      { delay: 100, texts: ' text' },
      { delay: 100, texts: ' editors' },
      { delay: 100, texts: ' with' },
      { delay: 100, texts: ' customizable' },
      { delay: 100, texts: ' content' },
      { delay: 100, texts: '.' },
      { delay: 100, texts: " Here's" },
      { delay: 100, texts: ' a' },
      { delay: 100, texts: ' basic' },
      { delay: 100, texts: ' example' },
      { delay: 100, texts: ' using' },
      { delay: 100, texts: ' `' },
      { delay: 100, texts: 'draft' },
      { delay: 100, texts: '-js' },
      { delay: 100, texts: '`' },
      { delay: 100, texts: ':\n\n' },
      { delay: 100, texts: '```' },
      { delay: 100, texts: 'typescript' },
      { delay: 100, texts: '\n' },
      { delay: 100, texts: 'import' },
      { delay: 100, texts: ' React' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' {' },
      { delay: 100, texts: ' use' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ' }' },
      { delay: 100, texts: ' from' },
      { delay: 100, texts: " '" },
      { delay: 100, texts: 'react' },
      { delay: 100, texts: "';\n" },
      { delay: 100, texts: 'import' },
      { delay: 100, texts: ' {' },
      { delay: 100, texts: ' Editor' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' Editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' Rich' },
      { delay: 100, texts: 'Utils' },
      { delay: 100, texts: ' }' },
      { delay: 100, texts: ' from' },
      { delay: 100, texts: " '" },
      { delay: 100, texts: 'draft' },
      { delay: 100, texts: '-js' },
      { delay: 100, texts: "';\n" },
      { delay: 100, texts: 'import' },
      { delay: 100, texts: " '" },
      { delay: 100, texts: 'draft' },
      { delay: 100, texts: '-js' },
      { delay: 100, texts: '/dist' },
      { delay: 100, texts: '/D' },
      { delay: 100, texts: 'raft' },
      { delay: 100, texts: '.css' },
      { delay: 100, texts: "';\n\n" },
      { delay: 100, texts: 'const' },
      { delay: 100, texts: ' Rich' },
      { delay: 100, texts: 'Text' },
      { delay: 100, texts: 'Editor' },
      { delay: 100, texts: ':' },
      { delay: 100, texts: ' React' },
      { delay: 100, texts: '.FC' },
      { delay: 100, texts: ' =' },
      { delay: 100, texts: ' ()' },
      { delay: 100, texts: ' =>' },
      { delay: 100, texts: ' {\n' },
      { delay: 100, texts: ' ' },
      { delay: 100, texts: ' const' },
      { delay: 100, texts: ' [' },
      { delay: 100, texts: 'editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' set' },
      { delay: 100, texts: 'Editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ']' },
      { delay: 100, texts: ' =' },
      { delay: 100, texts: ' use' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: '(Editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: '.create' },
      { delay: 100, texts: 'Empty' },
      { delay: 100, texts: '());\n\n' },
      { delay: 100, texts: ' ' },
      { delay: 100, texts: ' const' },
      { delay: 100, texts: ' handle' },
      { delay: 100, texts: 'Key' },
      { delay: 100, texts: 'Command' },
      { delay: 100, texts: ' =' },
      { delay: 100, texts: ' (' },
      { delay: 100, texts: 'command' },
      { delay: 100, texts: ':' },
      { delay: 100, texts: ' string' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ':' },
      { delay: 100, texts: ' Editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ')' },
      { delay: 100, texts: ' =>' },
      { delay: 100, texts: ' {\n' },
      { delay: 100, texts: '   ' },
      { delay: 100, texts: ' const' },
      { delay: 100, texts: ' new' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ' =' },
      { delay: 100, texts: ' Rich' },
      { delay: 100, texts: 'Utils' },
      { delay: 100, texts: '.handle' },
      { delay: 100, texts: 'Key' },
      { delay: 100, texts: 'Command' },
      { delay: 100, texts: '(editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' command' },
      { delay: 100, texts: ');\n' },
      { delay: 100, texts: '   ' },
      { delay: 100, texts: ' if' },
      { delay: 100, texts: ' (' },
      { delay: 100, texts: 'new' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ')' },
      { delay: 100, texts: ' {\n' },
      { delay: 100, texts: '     ' },
      { delay: 100, texts: ' set' },
      { delay: 100, texts: 'Editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: '(new' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ');\n' },
      { delay: 100, texts: '     ' },
      { delay: 100, texts: ' return' },
      { delay: 100, texts: " '" },
      { delay: 100, texts: 'handled' },
      { delay: 100, texts: "';\n" },
      { delay: 100, texts: '   ' },
      { delay: 100, texts: ' }\n' },
      { delay: 100, texts: '   ' },
      { delay: 100, texts: ' return' },
      { delay: 100, texts: " '" },
      { delay: 100, texts: 'not' },
      { delay: 100, texts: '-hand' },
      { delay: 100, texts: 'led' },
      { delay: 100, texts: "';\n" },
      { delay: 100, texts: ' ' },
      { delay: 100, texts: ' };\n\n' },
      { delay: 100, texts: ' ' },
      { delay: 100, texts: ' const' },
      { delay: 100, texts: ' toggle' },
      { delay: 100, texts: 'Block' },
      { delay: 100, texts: 'Type' },
      { delay: 100, texts: ' =' },
      { delay: 100, texts: ' (' },
      { delay: 100, texts: 'block' },
      { delay: 100, texts: 'Type' },
      { delay: 100, texts: ':' },
      { delay: 100, texts: ' string' },
      { delay: 100, texts: ')' },
      { delay: 100, texts: ' =>' },
      { delay: 100, texts: ' {\n' },
      { delay: 100, texts: '   ' },
      { delay: 100, texts: ' set' },
      { delay: 100, texts: 'Editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: '(R' },
      { delay: 100, texts: 'ich' },
      { delay: 100, texts: 'Utils' },
      { delay: 100, texts: '.toggle' },
      { delay: 100, texts: 'Block' },
      { delay: 100, texts: 'Type' },
      { delay: 100, texts: '(editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' block' },
      { delay: 100, texts: 'Type' },
      { delay: 100, texts: '));\n' },
      { delay: 100, texts: ' ' },
      { delay: 100, texts: ' };\n\n' },
      { delay: 100, texts: ' ' },
      { delay: 100, texts: ' const' },
      { delay: 100, texts: ' toggle' },
      { delay: 100, texts: 'Inline' },
      { delay: 100, texts: 'Style' },
      { delay: 100, texts: ' =' },
      { delay: 100, texts: ' (' },
      { delay: 100, texts: 'inline' },
      { delay: 100, texts: 'Style' },
      { delay: 100, texts: ':' },
      { delay: 100, texts: ' string' },
      { delay: 100, texts: ')' },
      { delay: 100, texts: ' =>' },
      { delay: 100, texts: ' {\n' },
      { delay: 100, texts: '   ' },
      { delay: 100, texts: ' set' },
      { delay: 100, texts: 'Editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: '(R' },
      { delay: 100, texts: 'ich' },
      { delay: 100, texts: 'Utils' },
      { delay: 100, texts: '.toggle' },
      { delay: 100, texts: 'Inline' },
      { delay: 100, texts: 'Style' },
      { delay: 100, texts: '(editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' inline' },
      { delay: 100, texts: 'Style' },
      { delay: 100, texts: '));\n' },
      { delay: 100, texts: ' ' },
      { delay: 100, texts: ' };\n\n' },
      { delay: 100, texts: ' ' },
      { delay: 100, texts: ' return' },
      { delay: 100, texts: ' (\n' },
      { delay: 100, texts: '   ' },
      { delay: 100, texts: ' <' },
      { delay: 100, texts: 'div' },
      { delay: 100, texts: '>\n' },
      { delay: 100, texts: '     ' },
      { delay: 100, texts: ' <' },
      { delay: 100, texts: 'div' },
      { delay: 100, texts: '>\n' },
      { delay: 100, texts: '       ' },
      { delay: 100, texts: ' <' },
      { delay: 100, texts: 'button' },
      { delay: 100, texts: ' on' },
      { delay: 100, texts: 'Click' },
      { delay: 100, texts: '={()' },
      { delay: 100, texts: ' =>' },
      { delay: 100, texts: ' toggle' },
      { delay: 100, texts: 'Block' },
      { delay: 100, texts: 'Type' },
      { delay: 100, texts: "('" },
      { delay: 100, texts: 'blockquote' },
      { delay: 100, texts: "')" },
      { delay: 100, texts: '}>' },
      { delay: 100, texts: 'Block' },
      { delay: 100, texts: 'quote' },
      { delay: 100, texts: '</' },
      { delay: 100, texts: 'button' },
      { delay: 100, texts: '>\n' },
      { delay: 100, texts: '       ' },
      { delay: 100, texts: ' <' },
      { delay: 100, texts: 'button' },
      { delay: 100, texts: ' on' },
      { delay: 100, texts: 'Click' },
      { delay: 100, texts: '={()' },
      { delay: 100, texts: ' =>' },
      { delay: 100, texts: ' toggle' },
      { delay: 100, texts: 'Inline' },
      { delay: 100, texts: 'Style' },
      { delay: 100, texts: "('" },
      { delay: 100, texts: 'B' },
      { delay: 100, texts: 'OLD' },
      { delay: 100, texts: "')" },
      { delay: 100, texts: '}>' },
      { delay: 100, texts: 'Bold' },
      { delay: 100, texts: '</' },
      { delay: 100, texts: 'button' },
      { delay: 100, texts: '>\n' },
      { delay: 100, texts: '       ' },
      { delay: 100, texts: ' <' },
      { delay: 100, texts: 'button' },
      { delay: 100, texts: ' on' },
      { delay: 100, texts: 'Click' },
      { delay: 100, texts: '={()' },
      { delay: 100, texts: ' =>' },
      { delay: 100, texts: ' toggle' },
      { delay: 100, texts: 'Inline' },
      { delay: 100, texts: 'Style' },
      { delay: 100, texts: "('" },
      { delay: 100, texts: 'ITAL' },
      { delay: 100, texts: 'IC' },
      { delay: 100, texts: "')" },
      { delay: 100, texts: '}>' },
      { delay: 100, texts: 'Italic' },
      { delay: 100, texts: '</' },
      { delay: 100, texts: 'button' },
      { delay: 100, texts: '>\n' },
      { delay: 100, texts: '       ' },
      { delay: 100, texts: ' <' },
      { delay: 100, texts: 'button' },
      { delay: 100, texts: ' on' },
      { delay: 100, texts: 'Click' },
      { delay: 100, texts: '={()' },
      { delay: 100, texts: ' =>' },
      { delay: 100, texts: ' toggle' },
      { delay: 100, texts: 'Block' },
      { delay: 100, texts: 'Type' },
      { delay: 100, texts: "('" },
      { delay: 100, texts: 'unordered' },
      { delay: 100, texts: '-list' },
      { delay: 100, texts: '-item' },
      { delay: 100, texts: "')" },
      { delay: 100, texts: '}>' },
      { delay: 100, texts: 'Bullet' },
      { delay: 100, texts: ' List' },
      { delay: 100, texts: '</' },
      { delay: 100, texts: 'button' },
      { delay: 100, texts: '>\n' },
      { delay: 100, texts: '       ' },
      { delay: 100, texts: ' <' },
      { delay: 100, texts: 'button' },
      { delay: 100, texts: ' on' },
      { delay: 100, texts: 'Click' },
      { delay: 100, texts: '={()' },
      { delay: 100, texts: ' =>' },
      { delay: 100, texts: ' toggle' },
      { delay: 100, texts: 'Block' },
      { delay: 100, texts: 'Type' },
      { delay: 100, texts: "('" },
      { delay: 100, texts: 'ordered' },
      { delay: 100, texts: '-list' },
      { delay: 100, texts: '-item' },
      { delay: 100, texts: "')" },
      { delay: 100, texts: '}>' },
      { delay: 100, texts: 'Number' },
      { delay: 100, texts: 'ed' },
      { delay: 100, texts: ' List' },
      { delay: 100, texts: '</' },
      { delay: 100, texts: 'button' },
      { delay: 100, texts: '>\n' },
      { delay: 100, texts: '     ' },
      { delay: 100, texts: ' </' },
      { delay: 100, texts: 'div' },
      { delay: 100, texts: '>\n' },
      { delay: 100, texts: '     ' },
      { delay: 100, texts: ' <' },
      { delay: 100, texts: 'Editor' },
      { delay: 100, texts: '\n' },
      { delay: 100, texts: '       ' },
      { delay: 100, texts: ' editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: '={' },
      { delay: 100, texts: 'editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: '}\n' },
      { delay: 100, texts: '       ' },
      { delay: 100, texts: ' handle' },
      { delay: 100, texts: 'Key' },
      { delay: 100, texts: 'Command' },
      { delay: 100, texts: '={' },
      { delay: 100, texts: 'handle' },
      { delay: 100, texts: 'Key' },
      { delay: 100, texts: 'Command' },
      { delay: 100, texts: '}\n' },
      { delay: 100, texts: '       ' },
      { delay: 100, texts: ' on' },
      { delay: 100, texts: 'Change' },
      { delay: 100, texts: '={' },
      { delay: 100, texts: 'set' },
      { delay: 100, texts: 'Editor' },
      { delay: 100, texts: 'State' },
      { delay: 100, texts: '}\n' },
      { delay: 100, texts: '     ' },
      { delay: 100, texts: ' />\n' },
      { delay: 100, texts: '   ' },
      { delay: 100, texts: ' </' },
      { delay: 100, texts: 'div' },
      { delay: 100, texts: '>\n' },
      { delay: 100, texts: ' ' },
      { delay: 100, texts: ' );\n' },
      { delay: 100, texts: '};\n\n' },
      { delay: 100, texts: 'export' },
      { delay: 100, texts: ' default' },
      { delay: 100, texts: ' Rich' },
      { delay: 100, texts: 'Text' },
      { delay: 100, texts: 'Editor' },
      { delay: 100, texts: ';\n' },
      { delay: 100, texts: '```' },
      { delay: 100, texts: '`\n\n' },
      { delay: 100, texts: 'This' },
      { delay: 100, texts: ' example' },
      { delay: 100, texts: ' sets' },
      { delay: 100, texts: ' up' },
      { delay: 100, texts: ' a' },
      { delay: 100, texts: ' basic' },
      { delay: 100, texts: ' rich' },
      { delay: 100, texts: ' text' },
      { delay: 100, texts: ' editor' },
      { delay: 100, texts: ' with' },
      { delay: 100, texts: ' buttons' },
      { delay: 100, texts: ' to' },
      { delay: 100, texts: ' apply' },
      { delay: 100, texts: ' block' },
      { delay: 100, texts: 'quote' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' bold' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' italic' },
      { delay: 100, texts: ',' },
      { delay: 100, texts: ' and' },
      { delay: 100, texts: ' list' },
      { delay: 100, texts: ' styles' },
      { delay: 100, texts: '.' },
      { delay: 100, texts: ' You' },
      { delay: 100, texts: ' can' },
      { delay: 100, texts: ' expand' },
      { delay: 100, texts: ' this' },
      { delay: 100, texts: ' by' },
      { delay: 100, texts: ' adding' },
      { delay: 100, texts: ' more' },
      { delay: 100, texts: ' features' },
      { delay: 100, texts: ' like' },
      { delay: 100, texts: ' links' },
      { delay: 100, texts: ' and' },
      { delay: 100, texts: ' tables' },
      { delay: 100, texts: ' using' },
      { delay: 100, texts: ' additional' },
      { delay: 100, texts: ' plugins' },
      { delay: 100, texts: ' or' },
      { delay: 100, texts: ' custom' },
      { delay: 100, texts: ' components' },
      { delay: 100, texts: '.' },
    ],
  ];
  const encoder = new TextEncoder();

  return new ReadableStream({
    async start(controller) {
      for (let i = 0; i < blocks.length; i++) {
        const block = blocks[i];

        // Stream the block content
        for (const chunk of block) {
          await new Promise((resolve) => setTimeout(resolve, chunk.delay));

          if (streamProtocol === 'text') {
            controller.enqueue(encoder.encode(chunk.texts));
          } else {
            controller.enqueue(
              encoder.encode(`0:${JSON.stringify(chunk.texts)}\n`)
            );
          }
        }

        // Add double newline after each block except the last one
        if (i < blocks.length - 1) {
          if (streamProtocol === 'text') {
            controller.enqueue(encoder.encode('\n\n'));
          } else {
            controller.enqueue(encoder.encode(`0:${JSON.stringify('\n\n')}\n`));
          }
        }
      }

      if (streamProtocol === 'data') {
        controller.enqueue(
          `d:{"finishReason":"stop","usage":{"promptTokens":0,"completionTokens":${blocks.reduce(
            (sum, block) => sum + block.length,
            0
          )}}}\n`
        );
      }

      controller.close();
    },
  });
};
