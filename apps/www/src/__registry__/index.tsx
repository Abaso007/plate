/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {
  "plate": {
    name: "plate",
    description: "Install Plate package",
    type: "registry:lib",
    registryDependencies: [],
    files: [],
    component: null,
    meta: undefined,
  },
  "plate-ui": {
    name: "plate-ui",
    description: "Install Plate package and styles",
    type: "registry:style",
    registryDependencies: ["https://platejs.org/r/plate"],
    files: [],
    component: null,
    meta: undefined,
  },
  "ai-menu": {
    name: "ai-menu",
    description: "A menu for AI-powered content generation and insertion.",
    type: "registry:ui",
    registryDependencies: ["command","popover","https://platejs.org/r/use-chat","https://platejs.org/r/markdown-plugin","https://platejs.org/r/editor","https://platejs.org/r/ai-node","https://platejs.org/r/blockquote-node","https://platejs.org/r/callout-node","https://platejs.org/r/code-block-node","https://platejs.org/r/code-node","https://platejs.org/r/column-node","https://platejs.org/r/date-node","https://platejs.org/r/equation-node","https://platejs.org/r/heading-node","https://platejs.org/r/highlight-node","https://platejs.org/r/hr-node","https://platejs.org/r/kbd-node","https://platejs.org/r/link-node","https://platejs.org/r/list-todo","https://platejs.org/r/media-audio-node","https://platejs.org/r/media-file-node","https://platejs.org/r/media-image-node","https://platejs.org/r/media-video-node","https://platejs.org/r/mention-node","https://platejs.org/r/paragraph-node","https://platejs.org/r/table-node","https://platejs.org/r/toc-node"],
    files: [{
      path: "src/registry/ui/ai-menu.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/ai-chat-editor.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/ai-menu.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/ai","title":"AI"},{"route":"https://pro.platejs.org/docs/components/ai-menu","title":"AI Menu"}],"examples":["ai-demo","ai-pro"],"label":"New"},
  },
  "ai-toolbar-button": {
    name: "ai-toolbar-button",
    description: "A toolbar button for accessing AI features.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/ai-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/ai-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/ai","title":"AI"},{"route":"https://pro.platejs.org/docs/components/ai-toolbar-button"}],"examples":["ai-demo","floating-toolbar-demo","ai-pro"],"label":"New"},
  },
  "align-toolbar-button": {
    name: "align-toolbar-button",
    description: "A dropdown menu for text alignment controls.",
    type: "registry:ui",
    registryDependencies: ["dropdown-menu","https://platejs.org/r/toolbar","https://platejs.org/r/transforms"],
    files: [{
      path: "src/registry/ui/align-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/align-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/alignment"}],"examples":["align-demo"]},
  },
  "block-context-menu": {
    name: "block-context-menu",
    description: "A context menu for block-level operations.",
    type: "registry:ui",
    registryDependencies: ["calendar","context-menu","https://platejs.org/r/use-is-touch-device"],
    files: [{
      path: "src/registry/ui/block-context-menu.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/block-context-menu.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/block-menu"},{"route":"https://pro.platejs.org/docs/components/block-context-menu"}],"examples":["block-menu-demo","block-menu-pro"]},
  },
  "block-selection": {
    name: "block-selection",
    description: "A visual overlay for selected blocks.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/block-selection.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/block-selection.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/block-selection"},{"route":"https://pro.platejs.org/docs/components/block-selection"}],"examples":["block-selection-demo","block-selection-pro"]},
  },
  "import-toolbar-button": {
    name: "import-toolbar-button",
    description: "A toolbar button to import editor content from a file.",
    type: "registry:ui",
    registryDependencies: ["dropdown-menu","https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/import-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/import-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/import","title":"Import"}],"examples":["basic-nodes-demo"],"label":"New"},
  },
  "export-toolbar-button": {
    name: "export-toolbar-button",
    description: "A toolbar button for exporting editor content in various formats (HTML, PDF, Image, Markdown).",
    type: "registry:ui",
    registryDependencies: ["dropdown-menu","https://platejs.org/r/toolbar","https://platejs.org/r/editor","https://platejs.org/r/blockquote-node","https://platejs.org/r/code-block-node","https://platejs.org/r/code-node","https://platejs.org/r/column-node","https://platejs.org/r/comment-node","https://platejs.org/r/date-node","https://platejs.org/r/heading-node","https://platejs.org/r/highlight-node","https://platejs.org/r/hr-node","https://platejs.org/r/list-todo","https://platejs.org/r/kbd-node","https://platejs.org/r/link-node","https://platejs.org/r/media-audio-node","https://platejs.org/r/media-file-node","https://platejs.org/r/media-image-node","https://platejs.org/r/media-video-node","https://platejs.org/r/mention-node","https://platejs.org/r/paragraph-node","https://platejs.org/r/table-node","https://platejs.org/r/toc-node","https://platejs.org/r/toggle-node","https://platejs.org/r/equation-node"],
    files: [{
      path: "src/registry/ui/export-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/export-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/export","title":"Export"}],"examples":["basic-nodes-demo"],"label":"New"},
  },
  "caption": {
    name: "caption",
    description: "A text field for adding captions to media elements.",
    type: "registry:ui",
    registryDependencies: ["button"],
    files: [{
      path: "src/registry/ui/caption.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/caption.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/caption"},{"route":"https://pro.platejs.org/docs/components/caption"}],"examples":["media-demo"]},
  },
  "font-color-toolbar-button": {
    name: "font-color-toolbar-button",
    description: "A color picker toolbar button with text and background color controls.",
    type: "registry:ui",
    registryDependencies: ["dropdown-menu","separator","button","tooltip","https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/font-color-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/font-color-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/font"},{"route":"https://pro.platejs.org/docs/components/font-color-toolbar-button"}],"examples":["font-demo"]},
  },
  "comment-toolbar-button": {
    name: "comment-toolbar-button",
    description: "A toolbar button for adding inline comments.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/comments-plugin"],
    files: [{
      path: "src/registry/ui/comment-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/comment-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/comments"},{"route":"https://pro.platejs.org/docs/components/comment-toolbar-button"}],"examples":["comments-demo","floating-toolbar-demo","comments-pro"]},
  },
  "block-discussion": {
    name: "block-discussion",
    description: "A popover interface for managing discussions: comments, replies, suggestions.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/suggestion-plugin","button","popover","avatar","dropdown-menu","https://platejs.org/r/editor","https://platejs.org/r/ai-node","https://platejs.org/r/date-node","https://platejs.org/r/emoji-input-node","https://platejs.org/r/link-node","https://platejs.org/r/mention-node","https://platejs.org/r/mention-input-node","https://platejs.org/r/highlight-style"],
    files: [{
      path: "src/registry/ui/block-discussion.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/block-suggestion.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/comment.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/block-discussion.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/comments"},{"route":"https://pro.platejs.org/docs/components/block-discussion"}],"examples":["comments-demo","comments-pro"]},
  },
  "cursor-overlay": {
    name: "cursor-overlay",
    description: "A visual overlay for cursors and selections.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/cursor-overlay.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/cursor-overlay.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/cursor-overlay"},{"route":"https://pro.platejs.org/docs/components/cursor-overlay"}],"examples":["ai-demo"]},
  },
  "block-draggable": {
    name: "block-draggable",
    description: "A block wrapper with a drag handle for moving editor blocks.",
    type: "registry:ui",
    registryDependencies: ["tooltip","https://platejs.org/r/use-mounted","https://platejs.org/r/transforms"],
    files: [{
      path: "src/registry/ui/block-draggable.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/block-draggable.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/dnd","title":"Drag & Drop"},{"route":"https://pro.platejs.org/docs/components/draggable"}],"examples":["dnd-demo","dnd-pro"],"usage":["DndPlugin.configure({\n  render: {\n    aboveNodes: BlockDraggable,\n  },\n})"]},
  },
  "editor": {
    name: "editor",
    description: "A container for the editor content and styling.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/editor.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/editor-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/editor.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"https://pro.platejs.org/docs/components/editor"}],"examples":["editor-default","editor-disabled","editor-full-width"]},
  },
  "select-editor": {
    name: "select-editor",
    description: "An editor to select tags.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/editor","command","popover","https://platejs.org/r/tag-node"],
    files: [{
      path: "src/registry/ui/select-editor.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/select-editor.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/multi-select"}],"examples":["select-editor-demo"],"label":"New"},
  },
  "emoji-toolbar-button": {
    name: "emoji-toolbar-button",
    description: "An emoji picker toolbar button.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/emoji-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/emoji-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/emoji"},{"route":"https://pro.platejs.org/docs/components/emoji-picker"}],"examples":["emoji-demo","emoji-pro"]},
  },
  "fixed-toolbar-buttons": {
    name: "fixed-toolbar-buttons",
    description: "A set of commonly used formatting buttons.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar","https://platejs.org/r/ai-toolbar-button","https://platejs.org/r/align-toolbar-button","https://platejs.org/r/comment-toolbar-button","https://platejs.org/r/emoji-toolbar-button","https://platejs.org/r/font-color-toolbar-button","https://platejs.org/r/font-size-toolbar-button","https://platejs.org/r/history-toolbar-button","https://platejs.org/r/list-toolbar-button","https://platejs.org/r/indent-toolbar-button","https://platejs.org/r/import-toolbar-button","https://platejs.org/r/insert-toolbar-button","https://platejs.org/r/line-height-toolbar-button","https://platejs.org/r/link-toolbar-button","https://platejs.org/r/mark-toolbar-button","https://platejs.org/r/media-toolbar-button","https://platejs.org/r/mode-toolbar-button","https://platejs.org/r/more-toolbar-button","https://platejs.org/r/table-toolbar-button","https://platejs.org/r/toggle-toolbar-button","https://platejs.org/r/turn-into-toolbar-button","https://platejs.org/r/export-toolbar-button"],
    files: [{
      path: "src/registry/ui/fixed-toolbar-buttons.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/fixed-toolbar-buttons.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"examples":["basic-nodes-demo"]},
  },
  "fixed-toolbar-classic-buttons": {
    name: "fixed-toolbar-classic-buttons",
    description: "",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar","https://platejs.org/r/ai-toolbar-button","https://platejs.org/r/align-toolbar-button","https://platejs.org/r/font-color-toolbar-button","https://platejs.org/r/comment-toolbar-button","https://platejs.org/r/emoji-toolbar-button","https://platejs.org/r/insert-toolbar-button","https://platejs.org/r/line-height-toolbar-button","https://platejs.org/r/list-classic-toolbar-button","https://platejs.org/r/link-toolbar-button","https://platejs.org/r/mark-toolbar-button","https://platejs.org/r/media-toolbar-button","https://platejs.org/r/mode-toolbar-button","https://platejs.org/r/more-toolbar-button","https://platejs.org/r/table-toolbar-button","https://platejs.org/r/toggle-toolbar-button","https://platejs.org/r/turn-into-toolbar-button"],
    files: [{
      path: "src/registry/ui/fixed-toolbar-classic-buttons.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/fixed-toolbar-classic-buttons.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {},
  },
  "fixed-toolbar": {
    name: "fixed-toolbar",
    description: "A fixed toolbar that stays at the top of the editor.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar","https://platejs.org/r/tailwind-scrollbar-hide"],
    files: [{
      path: "src/registry/ui/fixed-toolbar.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/fixed-toolbar.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"examples":["basic-nodes-demo"]},
  },
  "floating-toolbar-buttons": {
    name: "floating-toolbar-buttons",
    description: "A set of formatting buttons for the floating toolbar.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar","https://platejs.org/r/ai-toolbar-button","https://platejs.org/r/comment-toolbar-button","https://platejs.org/r/equation-toolbar-button","https://platejs.org/r/link-toolbar-button","https://platejs.org/r/mark-toolbar-button","https://platejs.org/r/more-toolbar-button","https://platejs.org/r/suggestion-toolbar-button","https://platejs.org/r/turn-into-toolbar-button"],
    files: [{
      path: "src/registry/ui/floating-toolbar-buttons.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/floating-toolbar-buttons.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/api/floating"},{"route":"https://pro.platejs.org/docs/components/floating-toolbar-buttons"}],"examples":["floating-toolbar-demo","floating-toolbar-pro"]},
  },
  "floating-toolbar": {
    name: "floating-toolbar",
    description: "A contextual toolbar that appears over selected text.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar","https://platejs.org/r/tailwind-scrollbar-hide"],
    files: [{
      path: "src/registry/ui/floating-toolbar.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/floating-toolbar.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/api/floating"},{"route":"https://pro.platejs.org/docs/components/floating-toolbar"}],"examples":["floating-toolbar-demo","floating-toolbar-pro"]},
  },
  "ghost-text": {
    name: "ghost-text",
    description: "A text suggestion system that displays AI-generated content after the cursor.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/ghost-text.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/ghost-text.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/copilot"},{"route":"https://pro.platejs.org/docs/components/ghost-text"}],"examples":["copilot-demo","copilot-pro"]},
  },
  "list-emoji": {
    name: "list-emoji",
    description: "",
    type: "registry:ui",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/ui/list-emoji.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/list-emoji.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "history-toolbar-button": {
    name: "history-toolbar-button",
    description: "Toolbar buttons for undo and redo operations.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/history-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/history-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"https://docs.slatejs.org/libraries/slate-history","title":"Slate History"}],"examples":["basic-nodes-demo"]},
  },
  "list-toolbar-button": {
    name: "list-toolbar-button",
    description: "A toolbar control for adjusting list indentation.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/list-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/list-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/list"}],"examples":["list-demo"]},
  },
  "list-todo": {
    name: "list-todo",
    description: "A checkbox marker for interactive todo lists.",
    type: "registry:ui",
    registryDependencies: ["checkbox"],
    files: [{
      path: "src/registry/ui/list-todo.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/list-todo-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/list-todo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/list"},{"route":"https://pro.platejs.org/docs/components/list-todo"}],"examples":["list-demo"]},
  },
  "indent-toolbar-button": {
    name: "indent-toolbar-button",
    description: "Toolbar controls for block indentation.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/indent-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/indent-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/indent"}],"examples":["indent-demo"]},
  },
  "inline-combobox": {
    name: "inline-combobox",
    description: "A combobox for inline suggestions.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/inline-combobox.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/inline-combobox.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/combobox"},{"route":"https://pro.platejs.org/docs/components/inline-combobox"}],"examples":["mention-demo","slash-command-demo","emoji-demo"]},
  },
  "insert-toolbar-button": {
    name: "insert-toolbar-button",
    description: "A menu for inserting different types of blocks.",
    type: "registry:ui",
    registryDependencies: ["dropdown-menu","https://platejs.org/r/toolbar","https://platejs.org/r/transforms"],
    files: [{
      path: "src/registry/ui/insert-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/insert-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"examples":["basic-nodes-demo"]},
  },
  "line-height-toolbar-button": {
    name: "line-height-toolbar-button",
    description: "A menu for controlling text line spacing.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar","dropdown-menu"],
    files: [{
      path: "src/registry/ui/line-height-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/line-height-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/line-height"}],"examples":["line-height-demo"]},
  },
  "link-toolbar": {
    name: "link-toolbar",
    description: "A floating interface for link editing.",
    type: "registry:ui",
    registryDependencies: ["button","input","popover","separator"],
    files: [{
      path: "src/registry/ui/link-toolbar.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/link-toolbar.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/link"},{"route":"/docs/api/floating"},{"route":"https://pro.platejs.org/docs/components/link-toolbar"}],"examples":["link-demo","link-pro"]},
  },
  "link-toolbar-button": {
    name: "link-toolbar-button",
    description: "A toolbar control for link management.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/link-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/link-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/link"},{"route":"https://pro.platejs.org/docs/components/link-toolbar-button"}],"examples":["link-demo","link-pro"]},
  },
  "list-classic-toolbar-button": {
    name: "list-classic-toolbar-button",
    description: "Toolbar controls for list creation and management.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/list-classic-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/list-classic-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/list-classic"}],"examples":["list-classic-demo"]},
  },
  "mark-toolbar-button": {
    name: "mark-toolbar-button",
    description: "A toolbar control for basic text formatting.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/mark-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/mark-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-marks"}],"examples":["basic-marks-demo","basic-nodes-pro"]},
  },
  "media-toolbar": {
    name: "media-toolbar",
    description: "A toolbar interface for media settings.",
    type: "registry:ui",
    registryDependencies: ["button","input","popover","separator"],
    files: [{
      path: "src/registry/ui/media-toolbar.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/media-toolbar.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/media"}],"examples":["media-demo","media-toolbar-pro"]},
  },
  "media-toolbar-button": {
    name: "media-toolbar-button",
    description: "Toolbar button for inserting and managing media.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar","input","dropdown-menu","alert-dialog"],
    files: [{
      path: "src/registry/ui/media-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/media-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/media"}],"examples":["media-demo","upload-pro"]},
  },
  "media-upload-toast": {
    name: "media-upload-toast",
    description: "Show toast notifications for media uploads.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/media-upload-toast.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/media-upload-toast.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/media"}],"examples":["media-demo","upload-pro"]},
  },
  "mode-toolbar-button": {
    name: "mode-toolbar-button",
    description: "A menu for switching between editor modes.",
    type: "registry:ui",
    registryDependencies: ["dropdown-menu","https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/mode-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/mode-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"examples":["basic-nodes-demo"]},
  },
  "more-toolbar-button": {
    name: "more-toolbar-button",
    description: "A menu for additional text formatting options.",
    type: "registry:ui",
    registryDependencies: ["dropdown-menu","https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/more-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/more-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"https://pro.platejs.org/docs/components/more-toolbar-button"}],"examples":["basic-marks-demo","basic-nodes-pro"]},
  },
  "block-placeholder": {
    name: "block-placeholder",
    description: "A block wrapper with a text placeholder for empty editor blocks.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/block-placeholder.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/block-placeholder.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-elements"},{"route":"https://pro.platejs.org/docs/components/placeholder"}],"examples":["basic-elements-demo","placeholder-pro"]},
  },
  "resize-handle": {
    name: "resize-handle",
    description: "A resizable wrapper with resize handles.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/resize-handle.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/resize-handle.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/api/resizable"},{"route":"https://pro.platejs.org/docs/components/resizable"}],"examples":["media-demo","media-toolbar-pro"]},
  },
  "table-toolbar-button": {
    name: "table-toolbar-button",
    description: "A menu for table manipulation and formatting.",
    type: "registry:ui",
    registryDependencies: ["dropdown-menu","https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/table-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/table-icons.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/table-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/table"}],"examples":["table-demo"]},
  },
  "toggle-toolbar-button": {
    name: "toggle-toolbar-button",
    description: "A toolbar button for expanding and collapsing blocks.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/toggle-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/toggle-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/toggle"}],"examples":["toggle-demo"]},
  },
  "turn-into-toolbar-button": {
    name: "turn-into-toolbar-button",
    description: "A menu for converting between different block types.",
    type: "registry:ui",
    registryDependencies: ["dropdown-menu","https://platejs.org/r/toolbar","https://platejs.org/r/transforms"],
    files: [{
      path: "src/registry/ui/turn-into-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/turn-into-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"https://pro.platejs.org/docs/components/turn-into-toolbar-button"}],"examples":["basic-nodes-demo","basic-nodes-pro"]},
  },
  "remote-cursor-overlay": {
    name: "remote-cursor-overlay",
    description: "A cursor overlay to display multiplayer cursors in the yjs plugin.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/remote-cursor-overlay.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/remote-cursor-overlay.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/collaboration"}],"examples":[]},
  },
  "toolbar": {
    name: "toolbar",
    description: "A customizable toolbar component with various button styles and group",
    type: "registry:ui",
    registryDependencies: ["tooltip","separator","dropdown-menu"],
    files: [{
      path: "src/registry/ui/toolbar.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/toolbar.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {},
  },
  "suggestion-toolbar-button": {
    name: "suggestion-toolbar-button",
    description: "A toolbar button for toggling suggestion mode in the editor.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/suggestion-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/suggestion-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/suggestion"}],"examples":["comments-demo","comments-pro"]},
  },
  "ai-node": {
    name: "ai-node",
    description: "A text highlighter for AI-generated content.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/ai-node.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/ai-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/ai","title":"AI"},{"route":"https://pro.platejs.org/docs/components/ai-node","title":"AI Leaf"}],"examples":["ai-demo","ai-pro"],"label":"New"},
  },
  "blockquote-node": {
    name: "blockquote-node",
    description: "A quote component for block quotes.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/blockquote-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/blockquote-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/blockquote-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-elements"},{"route":"https://pro.platejs.org/docs/components/blockquote-node"}],"examples":["basic-elements-demo","basic-nodes-pro"]},
  },
  "callout-node": {
    name: "callout-node",
    description: "A callout component for highlighting important information with customizable icons and styles.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/emoji-toolbar-button"],
    files: [{
      path: "src/registry/ui/callout-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/callout-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/callout-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-elements"},{"route":"https://pro.platejs.org/docs/components/callout-node"}],"examples":["basic-elements-demo"]},
  },
  "code-block-node": {
    name: "code-block-node",
    description: "A code block with syntax highlighting and language selection.",
    type: "registry:ui",
    registryDependencies: ["command"],
    files: [{
      path: "src/registry/ui/code-block-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/code-block-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/code-block-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-elements"},{"route":"https://pro.platejs.org/docs/components/code-block-node"}],"examples":["basic-elements-demo"]},
  },
  "code-node": {
    name: "code-node",
    description: "An inline component for code snippets.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/code-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/code-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/code-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-marks"},{"route":"https://pro.platejs.org/docs/components/code-node"}],"examples":["basic-marks-demo"]},
  },
  "column-node": {
    name: "column-node",
    description: "Resizable column components for layout.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/resize-handle"],
    files: [{
      path: "src/registry/ui/column-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/column-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/column-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/column"},{"route":"https://pro.platejs.org/docs/components/column-node"}],"examples":["column-demo"]},
  },
  "comment-node": {
    name: "comment-node",
    description: "A text component for displaying comments with visual indicators.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/highlight-style"],
    files: [{
      path: "src/registry/ui/comment-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/comment-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/comment-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/comments"},{"route":"https://pro.platejs.org/docs/components/comment-node"}],"examples":["comments-demo","comments-pro"]},
  },
  "suggestion-node": {
    name: "suggestion-node",
    description: "A text component for suggestion.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/suggestion-plugin"],
    files: [{
      path: "src/registry/ui/suggestion-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/suggestion-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/suggestion-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/suggestion"}],"examples":["comments-demo","comments-pro"]},
  },
  "suggestion-line-break": {
    name: "suggestion-line-break",
    description: "A line break component for suggestion.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/suggestion-plugin"],
    files: [{
      path: "src/registry/ui/suggestion-line-break.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/suggestion-line-break.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/suggestion"}],"examples":["comments-demo","comments-pro"]},
  },
  "date-node": {
    name: "date-node",
    description: "A date field component with calendar picker.",
    type: "registry:ui",
    registryDependencies: ["calendar"],
    files: [{
      path: "src/registry/ui/date-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/date-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/date-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/date"},{"route":"https://pro.platejs.org/docs/components/date-node"}],"examples":["date-demo"]},
  },
  "equation-node": {
    name: "equation-node",
    description: "Displays a LaTeX equation element with an editable popover for inputting and rendering mathematical expressions.",
    type: "registry:ui",
    registryDependencies: ["popover"],
    files: [{
      path: "src/registry/ui/equation-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/equation-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/equation-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"http://localhost:3000/docs/equation","title":"Equation"}],"examples":["equation-demo"]},
  },
  "equation-toolbar-button": {
    name: "equation-toolbar-button",
    description: "A toolbar button for inserting and editing equations.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/equation-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/equation-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"http://localhost:3000/docs/equation","title":"Equation"}],"examples":["equation-demo","floating-toolbar-demo"]},
  },
  "emoji-input-node": {
    name: "emoji-input-node",
    description: "An input component for emoji search and insertion.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/inline-combobox","https://platejs.org/r/use-debounce"],
    files: [{
      path: "src/registry/ui/emoji-input-node.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/emoji-input-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/emoji"},{"route":"https://pro.platejs.org/docs/components/emoji-input-node"}],"examples":["emoji-demo"]},
  },
  "excalidraw-node": {
    name: "excalidraw-node",
    description: "A drawing component powered by Excalidraw.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/excalidraw-node.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/excalidraw-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/excalidraw"}]},
  },
  "font-size-toolbar-button": {
    name: "font-size-toolbar-button",
    description: "A toolbar control for adjusting font size.",
    type: "registry:ui",
    registryDependencies: ["popover","https://platejs.org/r/toolbar"],
    files: [{
      path: "src/registry/ui/font-size-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/font-size-toolbar-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/font"}],"examples":["font-demo"]},
  },
  "heading-node": {
    name: "heading-node",
    description: "A heading with multiple level support.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/heading-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/heading-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/heading-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-elements"},{"route":"https://pro.platejs.org/docs/components/heading-node"}],"examples":["basic-elements-demo","basic-nodes-pro"]},
  },
  "highlight-node": {
    name: "highlight-node",
    description: "A text highlighter with customizable colors.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/highlight-style"],
    files: [{
      path: "src/registry/ui/highlight-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/highlight-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/highlight-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/highlight"}],"examples":["highlight-demo"]},
  },
  "hr-node": {
    name: "hr-node",
    description: "A horizontal rule component with focus states.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/hr-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/hr-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/hr-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/horizontal-rule"},{"route":"https://pro.platejs.org/docs/components/hr-node"}],"examples":["horizontal-rule-demo"]},
  },
  "media-image-node": {
    name: "media-image-node",
    description: "Image element with lazy loading, resizing capabilities, and optional caption.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/media-toolbar","https://platejs.org/r/caption","https://platejs.org/r/resize-handle"],
    files: [{
      path: "src/registry/ui/media-image-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/media-image-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/media-image-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/media"},{"route":"/docs/api/resizable"},{"route":"https://pro.platejs.org/docs/components/image-node"}],"examples":["media-demo","media-toolbar-pro"]},
  },
  "media-preview-dialog": {
    name: "media-preview-dialog",
    description: "A modal component for previewing and manipulating images.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/media-preview-dialog.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/media-preview-dialog.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/media"},{"route":"https://pro.platejs.org/docs/components/image-preview"}],"examples":["media-demo","media-toolbar-pro"]},
  },
  "kbd-node": {
    name: "kbd-node",
    description: "A component for styling keyboard shortcuts.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/kbd-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/kbd-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/kbd-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/kbd","title":"Keyboard Input"}],"examples":["kbd-demo"]},
  },
  "link-node": {
    name: "link-node",
    description: "A component for rendering hyperlinks with hover states.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/link-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/link-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/link-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/link"},{"route":"https://pro.platejs.org/docs/components/link-node"}],"examples":["link-demo"]},
  },
  "list-classic-node": {
    name: "list-classic-node",
    description: "List (classic) nodes for ordered and unordered items.",
    type: "registry:ui",
    registryDependencies: ["checkbox"],
    files: [{
      path: "src/registry/ui/list-classic-node.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/list-classic-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/list-classic"}],"examples":["list-classic-demo"]},
  },
  "media-audio-node": {
    name: "media-audio-node",
    description: "An audio player component with caption support.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/caption"],
    files: [{
      path: "src/registry/ui/media-audio-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/media-audio-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/media-audio-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/media"},{"route":"https://pro.platejs.org/docs/components/media-audio-node"}],"examples":["media-demo","upload-pro"]},
  },
  "media-embed-node": {
    name: "media-embed-node",
    description: "A component for embedded media content with resizing and caption support.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/media-toolbar","https://platejs.org/r/caption","https://platejs.org/r/resize-handle"],
    files: [{
      path: "src/registry/ui/media-embed-node.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/media-embed-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/media"},{"route":"/docs/api/resizable"},{"route":"https://pro.platejs.org/docs/components/media-embed-node"}],"examples":["media-demo","upload-pro"]},
  },
  "media-file-node": {
    name: "media-file-node",
    description: "A file attachment component with download capability and caption.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/caption"],
    files: [{
      path: "src/registry/ui/media-file-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/media-file-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/media-file-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/media"},{"route":"https://pro.platejs.org/docs/components/media-file-node"}],"examples":["media-demo","upload-pro"]},
  },
  "media-placeholder-node": {
    name: "media-placeholder-node",
    description: "A placeholder for media upload progress indication.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/uploadthing"],
    files: [{
      path: "src/registry/ui/media-placeholder-node.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/media-placeholder-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/media"},{"route":"https://pro.platejs.org/docs/components/media-placeholder-node"}],"examples":["media-demo","upload-pro"]},
  },
  "media-video-node": {
    name: "media-video-node",
    description: "A video player component with YouTube and file upload support.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/media-toolbar","https://platejs.org/r/caption","https://platejs.org/r/resize-handle"],
    files: [{
      path: "src/registry/ui/media-video-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/media-video-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/media-video-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/media"},{"route":"/docs/api/resizable"},{"route":"https://pro.platejs.org/docs/components/media-video-node"}],"examples":["media-demo","upload-pro"]},
  },
  "mention-node": {
    name: "mention-node",
    description: "A mention element with customizable prefix and label.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/use-mounted"],
    files: [{
      path: "src/registry/ui/mention-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/mention-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/mention-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/mention"},{"route":"https://pro.platejs.org/docs/components/mention-node"}],"examples":["mention-demo"]},
  },
  "mention-input-node": {
    name: "mention-input-node",
    description: "An input component for user mentions with autocomplete.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/inline-combobox"],
    files: [{
      path: "src/registry/ui/mention-input-node.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/mention-input-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/mention"},{"route":"https://pro.platejs.org/docs/components/mention-input-node"}],"examples":["mention-demo"]},
  },
  "paragraph-node": {
    name: "paragraph-node",
    description: "A paragraph block with background color support.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/paragraph-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/paragraph-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/paragraph-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-elements"},{"route":"https://pro.platejs.org/docs/components/paragraph-node"}],"examples":["basic-elements-demo","basic-nodes-pro"]},
  },
  "search-highlight-node": {
    name: "search-highlight-node",
    description: "A component that highlights search results in text.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/search-highlight-node.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/search-highlight-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/highlight"}]},
  },
  "slash-input-node": {
    name: "slash-input-node",
    description: "A command input component for inserting various elements.",
    type: "registry:ui",
    registryDependencies: ["https://platejs.org/r/inline-combobox","https://platejs.org/r/transforms"],
    files: [{
      path: "src/registry/ui/slash-input-node.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/slash-input-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/slash-command","title":"Slash"},{"route":"https://pro.platejs.org/docs/components/slash-input-node"}],"examples":["slash-command-demo","slash-menu-pro"]},
  },
  "table-node": {
    name: "table-node",
    description: "A table component with floating toolbar and border customization.",
    type: "registry:ui",
    registryDependencies: ["dropdown-menu","popover","https://platejs.org/r/resize-handle","https://platejs.org/r/block-selection","https://platejs.org/r/toolbar","https://platejs.org/r/tailwind-scrollbar-hide","https://platejs.org/r/font-color-toolbar-button"],
    files: [{
      path: "src/registry/ui/table-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/table-icons.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/table-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/table-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/table"},{"route":"https://pro.platejs.org/docs/components/table-node"}],"examples":["table-demo"]},
  },
  "tag-node": {
    name: "tag-node",
    description: "A tag element component with selection states and styling.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/tag-node.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/tag-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/multi-select"}],"examples":["select-editor-demo"]},
  },
  "toc-node": {
    name: "toc-node",
    description: "A table of contents component with links to document headings.",
    type: "registry:ui",
    registryDependencies: [],
    files: [{
      path: "src/registry/ui/toc-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/toc-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/toc-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-elements"},{"route":"https://pro.platejs.org/docs/components/toc-node"}],"examples":["toc-demo","toc-pro"]},
  },
  "toggle-node": {
    name: "toggle-node",
    description: "A collapsible component for toggling content visibility.",
    type: "registry:ui",
    registryDependencies: ["button"],
    files: [{
      path: "src/registry/ui/toggle-node.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/toggle-node-static.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/ui/toggle-node.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/toggle"}],"examples":["toggle-demo"]},
  },
  "ai-api": {
    name: "ai-api",
    description: "",
    type: "registry:file",
    registryDependencies: [],
    files: [{
      path: "src/registry/app/api/ai/command/route.ts",
      type: "registry:file",
      target: "app/api/ai/command/route.ts"
    },{
      path: "src/registry/app/api/ai/copilot/route.ts",
      type: "registry:file",
      target: "app/api/ai/copilot/route.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/app/api/ai/command/route.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "media-uploadthing-api": {
    name: "media-uploadthing-api",
    description: "",
    type: "registry:file",
    registryDependencies: ["https://platejs.org/r/uploadthing"],
    files: [{
      path: "src/registry/app/api/uploadthing/route.ts",
      type: "registry:file",
      target: "app/api/uploadthing/route.ts"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/app/api/uploadthing/route.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "editor-plugins": {
    name: "editor-plugins",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/ai-plugins","https://platejs.org/r/markdown-plugin","https://platejs.org/r/basic-nodes-plugins","https://platejs.org/r/align-plugin","https://platejs.org/r/autoformat-plugin","https://platejs.org/r/block-menu-plugins","https://platejs.org/r/equation-plugins","https://platejs.org/r/cursor-overlay-plugin","https://platejs.org/r/comments-plugin","https://platejs.org/r/delete-plugins","https://platejs.org/r/dnd-plugins","https://platejs.org/r/exit-break-plugin","https://platejs.org/r/fixed-toolbar-plugin","https://platejs.org/r/floating-toolbar-plugin","https://platejs.org/r/list-plugins","https://platejs.org/r/line-height-plugin","https://platejs.org/r/link-plugin","https://platejs.org/r/media-plugins","https://platejs.org/r/mention-plugin","https://platejs.org/r/reset-block-type-plugin","https://platejs.org/r/skip-mark-plugin","https://platejs.org/r/suggestion-plugin","https://platejs.org/r/soft-break-plugin","https://platejs.org/r/table-plugin","https://platejs.org/r/toc-plugin"],
    files: [{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/editor-plugins.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "ai-plugins": {
    name: "ai-plugins",
    description: "",
    type: "registry:component",
    registryDependencies: ["button","https://platejs.org/r/markdown-plugin","https://platejs.org/r/cursor-overlay-plugin","https://platejs.org/r/ai-menu"],
    files: [{
      path: "src/registry/components/editor/plugins/ai-plugins.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/ai-plugins.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "equation-plugins": {
    name: "equation-plugins",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/equation-toolbar-button"],
    files: [{
      path: "src/registry/components/editor/plugins/equation-plugins.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/equation-plugins.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "align-plugin": {
    name: "align-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/align-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/align-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "autoformat-plugin": {
    name: "autoformat-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/autoformat-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/autoformat-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "autoformat-classic-plugin": {
    name: "autoformat-classic-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/autoformat-classic-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/autoformat-classic-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "basic-nodes-plugins": {
    name: "basic-nodes-plugins",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/basic-nodes-plugins.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/basic-nodes-plugins.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "block-selection-plugins": {
    name: "block-selection-plugins",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/block-selection"],
    files: [{
      path: "src/registry/components/editor/plugins/block-selection-plugins.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/block-selection-plugins.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "block-menu-plugins": {
    name: "block-menu-plugins",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/block-context-menu","https://platejs.org/r/block-selection-plugins"],
    files: [{
      path: "src/registry/components/editor/plugins/block-menu-plugins.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/block-menu-plugins.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "comments-plugin": {
    name: "comments-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/discussion-plugin"],
    files: [{
      path: "src/registry/components/editor/plugins/comments-plugin.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/comments-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "skip-mark-plugin": {
    name: "skip-mark-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/skip-mark-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/skip-mark-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "suggestion-plugin": {
    name: "suggestion-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/discussion-plugin"],
    files: [{
      path: "src/registry/components/editor/plugins/suggestion-plugin.tsx",
      type: "registry:component",
      target: ""
    },{
      path: "src/registry/ui/suggestion-line-break.tsx",
      type: "registry:ui",
      target: ""
    },{
      path: "src/registry/ui/suggestion-toolbar-button.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/suggestion-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "cursor-overlay-plugin": {
    name: "cursor-overlay-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/cursor-overlay"],
    files: [{
      path: "src/registry/components/editor/plugins/cursor-overlay-plugin.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/cursor-overlay-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "markdown-plugin": {
    name: "markdown-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: [],
    files: [{
      path: "src/registry/components/editor/plugins/markdown-plugin.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/markdown-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "copilot-plugins": {
    name: "copilot-plugins",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/ghost-text"],
    files: [{
      path: "src/registry/components/editor/plugins/copilot-plugins.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/copilot-plugins.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "delete-plugins": {
    name: "delete-plugins",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/delete-plugins.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/delete-plugins.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "dnd-plugins": {
    name: "dnd-plugins",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/block-draggable"],
    files: [{
      path: "src/registry/components/editor/plugins/dnd-plugins.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/dnd-plugins.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "exit-break-plugin": {
    name: "exit-break-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/exit-break-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/exit-break-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "fixed-toolbar-plugin": {
    name: "fixed-toolbar-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/fixed-toolbar","https://platejs.org/r/fixed-toolbar-buttons"],
    files: [{
      path: "src/registry/components/editor/plugins/fixed-toolbar-plugin.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/fixed-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "fixed-toolbar-classic-plugin": {
    name: "fixed-toolbar-classic-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/fixed-toolbar","https://platejs.org/r/fixed-toolbar-buttons"],
    files: [{
      path: "src/registry/components/editor/plugins/fixed-toolbar-classic-plugin.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/fixed-toolbar-classic-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "floating-toolbar-plugin": {
    name: "floating-toolbar-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/floating-toolbar","https://platejs.org/r/floating-toolbar-buttons"],
    files: [{
      path: "src/registry/components/editor/plugins/floating-toolbar-plugin.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/floating-toolbar-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "list-plugins": {
    name: "list-plugins",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/list-todo"],
    files: [{
      path: "src/registry/components/editor/plugins/list-plugins.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/list-plugins.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "line-height-plugin": {
    name: "line-height-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/line-height-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/line-height-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "link-plugin": {
    name: "link-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/link-toolbar"],
    files: [{
      path: "src/registry/components/editor/plugins/link-plugin.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/link-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "media-plugins": {
    name: "media-plugins",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/media-preview-dialog","https://platejs.org/r/media-upload-toast"],
    files: [{
      path: "src/registry/components/editor/plugins/media-plugins.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/media-plugins.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "mention-plugin": {
    name: "mention-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/mention-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/mention-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "reset-block-type-plugin": {
    name: "reset-block-type-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/reset-block-type-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/reset-block-type-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "soft-break-plugin": {
    name: "soft-break-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/soft-break-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/soft-break-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "tabbable-plugin": {
    name: "tabbable-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/tabbable-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/tabbable-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "table-plugin": {
    name: "table-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/table-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/table-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "toc-plugin": {
    name: "toc-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plugins/toc-plugin.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/toc-plugin.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "discussion-plugin": {
    name: "discussion-plugin",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/block-discussion"],
    files: [{
      path: "src/registry/components/editor/plugins/discussion-plugin.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plugins/discussion-plugin.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "use-chat": {
    name: "use-chat",
    description: "",
    type: "registry:component",
    registryDependencies: ["button","dialog","input","popover","command"],
    files: [{
      path: "src/registry/components/editor/use-chat.ts",
      type: "registry:component",
      target: ""
    },{
      path: "src/registry/components/editor/settings.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/use-chat.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "use-create-editor": {
    name: "use-create-editor",
    description: "",
    type: "registry:component",
    registryDependencies: ["https://platejs.org/r/ai-node","https://platejs.org/r/blockquote-node","https://platejs.org/r/block-placeholder","https://platejs.org/r/callout-node","https://platejs.org/r/code-block-node","https://platejs.org/r/code-node","https://platejs.org/r/column-node","https://platejs.org/r/comment-node","https://platejs.org/r/date-node","https://platejs.org/r/emoji-input-node","https://platejs.org/r/equation-node","https://platejs.org/r/heading-node","https://platejs.org/r/highlight-node","https://platejs.org/r/hr-node","https://platejs.org/r/equation-node","https://platejs.org/r/kbd-node","https://platejs.org/r/link-node","https://platejs.org/r/media-audio-node","https://platejs.org/r/media-embed-node","https://platejs.org/r/media-image-node","https://platejs.org/r/media-file-node","https://platejs.org/r/media-placeholder-node","https://platejs.org/r/media-video-node","https://platejs.org/r/mention-node","https://platejs.org/r/mention-input-node","https://platejs.org/r/paragraph-node","https://platejs.org/r/slash-input-node","https://platejs.org/r/suggestion-node","https://platejs.org/r/table-node","https://platejs.org/r/toc-node","https://platejs.org/r/toggle-node","https://platejs.org/r/editor-plugins"],
    files: [{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/use-create-editor.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "transforms": {
    name: "transforms",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/transforms.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/transforms.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "plate-types": {
    name: "plate-types",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plate-types.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plate-types.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "plate-classic-types": {
    name: "plate-classic-types",
    description: "",
    type: "registry:component",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/components/editor/plate-classic-types.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/editor/plate-classic-types.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "editor-ai": {
    name: "editor-ai",
    description: "An AI editor",
    type: "registry:block",
    registryDependencies: ["https://platejs.org/r/plate-ui","https://platejs.org/r/ai-api","https://platejs.org/r/media-uploadthing-api","https://platejs.org/r/plate-types","https://platejs.org/r/editor-plugins","https://platejs.org/r/copilot-plugins","https://platejs.org/r/floating-toolbar-plugin","https://platejs.org/r/fixed-toolbar-plugin","https://platejs.org/r/ai-menu","https://platejs.org/r/ghost-text","https://platejs.org/r/block-discussion","https://platejs.org/r/cursor-overlay","https://platejs.org/r/editor","https://platejs.org/r/block-context-menu","https://platejs.org/r/ai-node","https://platejs.org/r/blockquote-node","https://platejs.org/r/block-draggable","https://platejs.org/r/block-placeholder","https://platejs.org/r/code-block-node","https://platejs.org/r/code-node","https://platejs.org/r/column-node","https://platejs.org/r/comment-node","https://platejs.org/r/callout-node","https://platejs.org/r/suggestion-node","https://platejs.org/r/date-node","https://platejs.org/r/equation-node","https://platejs.org/r/emoji-input-node","https://platejs.org/r/excalidraw-node","https://platejs.org/r/heading-node","https://platejs.org/r/highlight-node","https://platejs.org/r/hr-node","https://platejs.org/r/kbd-node","https://platejs.org/r/link-node","https://platejs.org/r/media-audio-node","https://platejs.org/r/media-embed-node","https://platejs.org/r/media-image-node","https://platejs.org/r/media-file-node","https://platejs.org/r/media-placeholder-node","https://platejs.org/r/media-video-node","https://platejs.org/r/mention-node","https://platejs.org/r/mention-input-node","https://platejs.org/r/paragraph-node","https://platejs.org/r/slash-input-node","https://platejs.org/r/table-node","https://platejs.org/r/toc-node","https://platejs.org/r/toggle-node"],
    files: [{
      path: "src/registry/blocks/editor-ai/page.tsx",
      type: "registry:page",
      target: "app/editor/page.tsx"
    },{
      path: "src/registry/blocks/editor-ai/components/editor/plate-editor.tsx",
      type: "registry:component",
      target: ""
    },{
      path: "src/registry/blocks/editor-ai/components/editor/use-create-editor.ts",
      type: "registry:component",
      target: ""
    },{
      path: "src/registry/components/editor/settings.tsx",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/blocks/editor-ai/page.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "editor-select": {
    name: "editor-select",
    description: "A multi-select editor",
    type: "registry:block",
    registryDependencies: ["https://platejs.org/r/plate-ui","https://platejs.org/r/select-editor-demo"],
    files: [{
      path: "src/registry/blocks/editor-select/page.tsx",
      type: "registry:page",
      target: "app/editor/page.tsx"
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/blocks/editor-select/page.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"descriptionSrc":"/docs/multi-select"},
  },
  "editor-basic": {
    name: "editor-basic",
    description: "A basic editor",
    type: "registry:block",
    registryDependencies: ["https://platejs.org/r/plate-ui","https://platejs.org/r/editor"],
    files: [{
      path: "src/registry/blocks/editor-basic/page.tsx",
      type: "registry:page",
      target: "app/editor/page.tsx"
    },{
      path: "src/registry/blocks/editor-basic/components/editor/plate-editor.tsx",
      type: "registry:component",
      target: ""
    },{
      path: "src/registry/blocks/editor-basic/components/editor/use-create-editor.ts",
      type: "registry:component",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/blocks/editor-basic/page.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "slate-to-html": {
    name: "slate-to-html",
    description: "",
    type: "registry:block",
    registryDependencies: ["https://platejs.org/r/plate-ui"],
    files: [{
      path: "src/registry/blocks/slate-to-html/page.tsx",
      type: "registry:page",
      target: "app/html/page.tsx"
    },{
      path: "src/registry/components/editor/slate-to-html.tsx",
      type: "registry:component",
      target: ""
    },{
      path: "src/registry/lib/create-html-document.ts",
      type: "registry:lib",
      target: ""
    }],
    component: null,
    meta: {"rsc":true},
  },
  "uploadthing": {
    name: "uploadthing",
    description: "",
    type: "registry:hook",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/hooks/use-upload-file.ts",
      type: "registry:hook",
      target: ""
    },{
      path: "src/registry/lib/uploadthing.ts",
      type: "registry:lib",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/hooks/use-upload-file.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "tailwind-scrollbar-hide": {
    name: "tailwind-scrollbar-hide",
    description: "",
    type: "registry:style",
    registryDependencies: undefined,
    files: [],
    component: null,
    meta: undefined,
  },
  "highlight-style": {
    name: "highlight-style",
    description: "",
    type: "registry:style",
    registryDependencies: undefined,
    files: [],
    component: null,
    meta: undefined,
  },
  "use-debounce": {
    name: "use-debounce",
    description: "",
    type: "registry:hook",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/hooks/use-debounce.ts",
      type: "registry:hook",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/hooks/use-debounce.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "use-mounted": {
    name: "use-mounted",
    description: "",
    type: "registry:hook",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/hooks/use-mounted.ts",
      type: "registry:hook",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/hooks/use-mounted.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "use-is-touch-device": {
    name: "use-is-touch-device",
    description: "",
    type: "registry:hook",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/hooks/use-is-touch-device.ts",
      type: "registry:hook",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/hooks/use-is-touch-device.ts")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "copilot-demo": {
    name: "copilot-demo",
    description: "Renders AI ghost text suggestions at the cursor position.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/copilot-plugins","https://platejs.org/r/editor","https://platejs.org/r/use-create-editor"],
    files: [{
      path: "src/registry/examples/copilot-demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/copilot-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/copilot-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/copilot","title":"Copilot"}]},
  },
  "select-editor-demo": {
    name: "select-editor-demo",
    description: "A form with a select editor component for managing labels.",
    type: "registry:example",
    registryDependencies: ["form","https://platejs.org/r/button","https://platejs.org/r/select-editor"],
    files: [{
      path: "src/registry/examples/select-editor-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/select-editor-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/multi-select"}]},
  },
  "controlled-demo": {
    name: "controlled-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/editor","button"],
    files: [{
      path: "src/registry/examples/controlled-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/controlled-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "hundreds-blocks-demo": {
    name: "hundreds-blocks-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/use-create-editor","https://platejs.org/r/editor"],
    files: [{
      path: "src/registry/examples/hundreds-blocks-demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/huge-document-value.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/hundreds-blocks-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "hundreds-editors-demo": {
    name: "hundreds-editors-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/use-create-editor","https://platejs.org/r/editor"],
    files: [{
      path: "src/registry/examples/hundreds-editors-demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/multi-editors-value.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/hundreds-editors-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "multiple-editors-demo": {
    name: "multiple-editors-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/use-create-editor","https://platejs.org/r/editor","https://platejs.org/r/fixed-toolbar","https://platejs.org/r/turn-into-toolbar-button","https://platejs.org/r/delete-plugins","separator"],
    files: [{
      path: "src/registry/examples/multiple-editors-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/multiple-editors-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "version-history-demo": {
    name: "version-history-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/use-create-editor","button"],
    files: [{
      path: "src/registry/examples/version-history-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/version-history-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "preview-markdown-demo": {
    name: "preview-markdown-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/use-create-editor","https://platejs.org/r/editor"],
    files: [{
      path: "src/registry/examples/preview-markdown-demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/preview-md-value.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/preview-markdown-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "markdown-to-slate-demo": {
    name: "markdown-to-slate-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/use-create-editor","https://platejs.org/r/use-debounce","https://platejs.org/r/editor"],
    files: [{
      path: "src/registry/examples/markdown-to-slate-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/markdown-to-slate-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "collaboration-demo": {
    name: "collaboration-demo",
    description: "Real-time collaboration with cursors and selections.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/use-create-editor","https://platejs.org/r/use-mounted","https://platejs.org/r/remote-cursor-overlay","button","input"],
    files: [{
      path: "src/registry/examples/collaboration-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/collaboration-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "installation-next-demo": {
    name: "installation-next-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/editor","https://platejs.org/r/fixed-toolbar","https://platejs.org/r/mark-toolbar-button","https://platejs.org/r/heading-node","https://platejs.org/r/paragraph-node","https://platejs.org/r/blockquote-node"],
    files: [{
      path: "src/registry/examples/installation-next-04-value-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/installation-next-04-value-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "tabbable-demo": {
    name: "tabbable-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/editor","https://platejs.org/r/use-create-editor"],
    files: [{
      path: "src/registry/examples/tabbable-demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/tabbable-value.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/tabbable-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: undefined,
  },
  "table-nomerge-demo": {
    name: "table-nomerge-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/editor","https://platejs.org/r/use-create-editor"],
    files: [{
      path: "src/registry/examples/table-nomerge-demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/table-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/table-nomerge-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "excalidraw-demo": {
    name: "excalidraw-demo",
    description: "",
    type: "registry:example",
    registryDependencies: [],
    files: [{
      path: "src/registry/examples/excalidraw-demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/excalidraw-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/excalidraw-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "single-line-demo": {
    name: "single-line-demo",
    description: "Restrict the editor to a single block.",
    type: "registry:example",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/examples/single-line-demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/single-line-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/single-line-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "editable-voids-demo": {
    name: "editable-voids-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/use-create-editor","https://platejs.org/r/editor","https://platejs.org/r/editor-plugins","input","label","radio-group"],
    files: [{
      path: "src/registry/examples/editable-voids-demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/editable-voids-value.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/editable-voids-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "list-classic-demo": {
    name: "list-classic-demo",
    description: "List creation and formatting.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/autoformat-classic-plugin","https://platejs.org/r/list-classic-node"],
    files: [{
      path: "src/registry/examples/list-classic-demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/list-classic-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/fixed-toolbar-classic-plugin.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/ui/fixed-toolbar-classic-buttons.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/list-classic-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "find-replace-demo": {
    name: "find-replace-demo",
    description: "Find and replace functionality in text.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/fixed-toolbar","input","https://platejs.org/r/search-highlight-node"],
    files: [{
      path: "src/registry/examples/find-replace-demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/find-replace-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/find-replace-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "ai-demo": {
    name: "ai-demo",
    description: "AI menu with commands, streaming responses in a preview or directly into the editor.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/use-create-editor","https://platejs.org/r/editor-plugins","https://platejs.org/r/basic-nodes-plugins","https://platejs.org/r/block-selection-plugins","https://platejs.org/r/list-plugins","https://platejs.org/r/link-plugin","https://platejs.org/r/ai-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/ai-plugins.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/ai-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/ai","title":"AI"}],"registry":false},
  },
  "align-demo": {
    name: "align-demo",
    description: "Text alignment controls for blocks.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/align-plugin"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/align-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "autoformat-demo": {
    name: "autoformat-demo",
    description: "Apply formatting automatically using shortcodes.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/autoformat-plugin"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/autoformat-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "basic-elements-demo": {
    name: "basic-elements-demo",
    description: "Basic block elements like headings, quotes, and code blocks.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/basic-nodes-plugins","https://platejs.org/r/blockquote-node","https://platejs.org/r/code-block-node","https://platejs.org/r/heading-node","https://platejs.org/r/paragraph-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/basic-elements-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-elements","title":"Basic Elements"}],"registry":false},
  },
  "basic-marks-demo": {
    name: "basic-marks-demo",
    description: "Basic text formatting marks like bold, italic, and underline.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/basic-nodes-plugins","https://platejs.org/r/code-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/basic-marks-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-marks","title":"Basic Marks"}],"registry":false},
  },
  "basic-nodes-demo": {
    name: "basic-nodes-demo",
    description: "Basic block elements and text marks.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/basic-nodes-plugins"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/basic-nodes-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/basic-elements-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/basic-marks-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/basic-elements","title":"Basic Elements"}],"keywords":["element","leaf"],"registry":false},
  },
  "block-menu-demo": {
    name: "block-menu-demo",
    description: "Block-level context menu with formatting options.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/block-menu-plugins"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/block-menu-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/block-menu","title":"Block Menu"}],"registry":false},
  },
  "block-selection-demo": {
    name: "block-selection-demo",
    description: "Visual block selection with keyboard support.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/block-selection-plugins"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/block-selection-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "column-demo": {
    name: "column-demo",
    description: "Column layout.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/column-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/column-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/column","title":"Column"}],"registry":false},
  },
  "comments-demo": {
    name: "comments-demo",
    description: "Adding and displaying comments within content.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/comments-plugin","https://platejs.org/r/discussion-plugin","https://platejs.org/r/comment-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/comments-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/comments","title":"Comments"}],"registry":false},
  },
  "cursor-overlay-demo": {
    name: "cursor-overlay-demo",
    description: "Visual indicator for cursor position within the editor.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/cursor-overlay-plugin"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/cursor-overlay-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "date-demo": {
    name: "date-demo",
    description: "Inline date elements with calendar selection interface.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/date-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/date-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/date","title":"Date"}],"registry":false},
  },
  "dnd-demo": {
    name: "dnd-demo",
    description: "Implements draggable functionality for editor blocks, including drag handles and drop indicators.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/dnd-plugins"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/dnd-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/dnd","title":"Drag & Drop"}],"registry":false},
  },
  "emoji-demo": {
    name: "emoji-demo",
    description: "Emoji insertion via toolbar or colon-triggered combobox.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/emoji-input-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/emoji-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/emoji","title":"Emoji"}],"registry":false},
  },
  "equation-demo": {
    name: "equation-demo",
    description: "LaTeX equations with inline and block formats.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/equation-node","https://platejs.org/r/equation-plugins"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/equation-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/equation","title":"Equation"}],"registry":false},
  },
  "exit-break-demo": {
    name: "exit-break-demo",
    description: "Exit a large block using a shortcut.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/exit-break-plugin"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/exit-break-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "floating-toolbar-demo": {
    name: "floating-toolbar-demo",
    description: "Floating toolbar with text formatting and AI assistance options.",
    type: "registry:example",
    registryDependencies: [],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/floating-toolbar-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/ai","title":"AI"}],"registry":false},
  },
  "font-demo": {
    name: "font-demo",
    description: "Color picker for text and background colors.",
    type: "registry:example",
    registryDependencies: [],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/font-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "highlight-demo": {
    name: "highlight-demo",
    description: "Text highlighting with customizable colors.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/highlight-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/highlight-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "horizontal-rule-demo": {
    name: "horizontal-rule-demo",
    description: "Horizontal lines for visually separating content sections.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/hr-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/horizontal-rule-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/horizontal-rule","title":"Horizontal Rule"}],"registry":false},
  },
  "indent-demo": {
    name: "indent-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/list-plugins"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/indent-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "list-demo": {
    name: "list-demo",
    description: "Turn any block into a list item.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/list-plugins"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/list-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/indent","title":"Indent"},{"route":"/docs/list","title":"List"}],"registry":false},
  },
  "kbd-demo": {
    name: "kbd-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/kbd-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/kbd-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "line-height-demo": {
    name: "line-height-demo",
    description: "Line height adjustment controls.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/line-height-plugin"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/line-height-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "link-demo": {
    name: "link-demo",
    description: "Hyperlinks with toolbar insertion and URL pasting support.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/link-plugin","https://platejs.org/r/link-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/link-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/link","title":"Link"}],"registry":false},
  },
  "media-demo": {
    name: "media-demo",
    description: "Media embedding and management.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/media-plugins","https://platejs.org/r/media-audio-node","https://platejs.org/r/media-embed-node","https://platejs.org/r/media-file-node","https://platejs.org/r/media-image-node","https://platejs.org/r/media-placeholder-node","https://platejs.org/r/media-video-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/media-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "mention-demo": {
    name: "mention-demo",
    description: "Mention functionality for referencing users or entities.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/mention-plugin","https://platejs.org/r/mention-node","https://platejs.org/r/mention-input-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/mention-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/mention","title":"Mention"}],"registry":false},
  },
  "reset-node-demo": {
    name: "reset-node-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/reset-block-type-plugin"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "csv-demo": {
    name: "csv-demo",
    description: "Copy paste from CSV to Slate.",
    type: "registry:example",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/deserialize-csv-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "docx-demo": {
    name: "docx-demo",
    description: "Copy paste from DOCX to Slate.",
    type: "registry:example",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/deserialize-docx-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "html-demo": {
    name: "html-demo",
    description: "Copy paste from HTML to Slate.",
    type: "registry:example",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/deserialize-html-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "markdown-demo": {
    name: "markdown-demo",
    description: "Copy paste from Markdown to Slate.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/markdown-plugin"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/deserialize-md-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "slash-command-demo": {
    name: "slash-command-demo",
    description: "Slash command menu for quick insertion of various content types.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/slash-input-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/slash-command-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/slash-command","title":"Slash Command"}],"registry":false},
  },
  "soft-break-demo": {
    name: "soft-break-demo",
    description: "Insert line breaks within a block of text without starting a new block.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/soft-break-plugin"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/soft-break-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "table-demo": {
    name: "table-demo",
    description: "Customizable tables with resizable columns and row merging options.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/table-plugin","https://platejs.org/r/table-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/table-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/table","title":"Table"}],"registry":false},
  },
  "toc-demo": {
    name: "toc-demo",
    description: "Dynamic TOC with in-document element for easy navigation.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/toc-plugin","https://platejs.org/r/toc-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/examples/values/toc-value.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"docs":[{"route":"/docs/toc","title":"TOC"}],"registry":false},
  },
  "toggle-demo": {
    name: "toggle-demo",
    description: "Collapsible content blocks.",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/toggle-node"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "playground-demo": {
    name: "playground-demo",
    description: "",
    type: "registry:example",
    registryDependencies: [],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "demo": {
    name: "demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/editor"],
    files: [{
      path: "src/registry/examples/demo.tsx",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/use-create-editor.ts",
      type: "registry:example",
      target: ""
    },{
      path: "src/registry/components/editor/plugins/editor-plugins.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "pro-iframe-demo": {
    name: "pro-iframe-demo",
    description: "",
    type: "registry:example",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/examples/pro-iframe-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/pro-iframe-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "potion-iframe-demo": {
    name: "potion-iframe-demo",
    description: "",
    type: "registry:example",
    registryDependencies: undefined,
    files: [{
      path: "src/registry/examples/potion-iframe-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/potion-iframe-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "installation-next-01-editor-demo": {
    name: "installation-next-01-editor-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/editor"],
    files: [{
      path: "src/registry/examples/installation-next-01-editor-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/installation-next-01-editor-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "installation-next-02-marks-demo": {
    name: "installation-next-02-marks-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/editor","https://platejs.org/r/fixed-toolbar","https://platejs.org/r/mark-toolbar-button"],
    files: [{
      path: "src/registry/examples/installation-next-02-marks-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/installation-next-02-marks-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "installation-next-03-elements-demo": {
    name: "installation-next-03-elements-demo",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/editor","https://platejs.org/r/fixed-toolbar","https://platejs.org/r/mark-toolbar-button","https://platejs.org/r/heading-node","https://platejs.org/r/paragraph-node","https://platejs.org/r/blockquote-node"],
    files: [{
      path: "src/registry/examples/installation-next-03-elements-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/installation-next-03-elements-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "editor-default": {
    name: "editor-default",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/use-create-editor","https://platejs.org/r/editor","https://platejs.org/r/editor-plugins"],
    files: [{
      path: "src/registry/examples/editor-default.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/editor-default.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "editor-disabled": {
    name: "editor-disabled",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/editor"],
    files: [{
      path: "src/registry/examples/editor-disabled.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/editor-disabled.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  "editor-full-width": {
    name: "editor-full-width",
    description: "",
    type: "registry:example",
    registryDependencies: ["https://platejs.org/r/use-create-editor","https://platejs.org/r/editor","https://platejs.org/r/editor-plugins"],
    files: [{
      path: "src/registry/examples/editor-full-width.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/examples/editor-full-width.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    meta: {"registry":false},
  },
  }