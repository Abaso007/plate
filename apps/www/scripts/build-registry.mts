import { exec } from 'child_process';
import { promises as fs } from 'fs';
import path from 'path';
import { rimraf } from 'rimraf';
import { registryItemSchema, type Registry } from 'shadcn/registry';
import { z } from 'zod';

import { blocks } from '@/registry/registry-blocks';
import { lib } from '@/registry/registry-lib';
import { ui } from '@/registry/registry-ui';
import { examples } from '@/registry/registry-examples';
import { hooks } from '@/registry/registry-hooks';
import { components } from '@/registry/registry-components';

const url =
  process.env.NODE_ENV === 'development'
    ? 'http://localhost:3000'
    : 'https://platejs.org';

const registry: Registry = {
  name: 'plate',
  homepage: url,
  items: z.array(registryItemSchema).parse(
    [
      {
        name: 'plate',
        type: 'registry:style',
        dependencies: [
          'tailwind-scrollbar-hide',
          '@udecode/cn',
          '@udecode/plate',
        ],
        devDependencies: [],
        registryDependencies: [],
        cssVars: {
          theme: {
            'font-heading':
              "'var(--font-heading)', 'ui-sans-serif', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI Variable Display', 'Segoe UI', 'Helvetica', 'Apple Color Emoji', 'Arial', 'sans-serif', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
            'font-mono':
              "'var(--font-mono)', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace",
            'font-sans':
              "'var(--font-sans)', 'ui-sans-serif', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI Variable Display', 'Segoe UI', 'Helvetica', 'Apple Color Emoji', 'Arial', 'sans-serif', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
          },
          light: {
            brand: 'oklch(0.623 0.214 259.815)',
            highlight: 'oklch(0.852 0.199 91.936)',
          },
          dark: {
            brand: 'oklch(0.707 0.165 254.624)',
            highlight: 'oklch(0.852 0.199 91.936)',
          },
        },
        files: [],
      },
      ...ui,
      ...components,
      ...blocks,
      ...lib,
      ...hooks,
      ...examples,
    ].map((item) => ({
      ...item,
      registryDependencies: item.registryDependencies?.map((dep) =>
        dep.startsWith('shadcn/') ? dep.split('shadcn/')[1] : `${url}/r/${dep}`
      ),
    }))
  ),
} satisfies Registry;

async function buildRegistryIndex() {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`;
  for (const item of registry.items) {
    const resolveFiles = item.files?.map((file) => `registry/${file.path}`);
    if (!resolveFiles) {
      continue;
    }

    const componentPath =
      !item.meta?.rsc && item.files?.[0]?.path
        ? `@/registry/${item.files[0].path}`
        : '';

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ''}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `src/registry/${typeof file === 'string' ? file : file.path}`;
      const resolvedFilePath = path.resolve(filePath);
      return typeof file === 'string'
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ''}"
    }`;
    })}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : 'null'
    },
    meta: ${JSON.stringify(item.meta)},
  },`;
  }

  index += `
  }`;

  // Write style index.
  rimraf.sync(path.join(process.cwd(), 'src/__registry__/index.tsx'));
  await fs.writeFile(
    path.join(process.cwd(), 'src/__registry__/index.tsx'),
    index
  );
}

async function buildRegistryJsonFile() {
  // 1. Fix the path for registry items.
  const fixedRegistry = {
    ...registry,
    items: registry.items.map((item) => {
      const files = item.files?.map((file) => {
        return {
          ...file,
          path: `src/registry/${file.path}`,
        };
      });

      return {
        ...item,
        files,
      };
    }),
  };

  // 2. Write the content of the registry to `registry.json` and public folder
  rimraf.sync(path.join(process.cwd(), `registry.json`));
  rimraf.sync(path.join(process.cwd(), `public/r/registry.json`));

  const registryJson = JSON.stringify(fixedRegistry, null, 2);

  await fs.writeFile(path.join(process.cwd(), `registry.json`), registryJson);
  await fs.writeFile(
    path.join(process.cwd(), `public/r/registry.json`),
    registryJson
  );
}

async function buildRegistry() {
  return new Promise((resolve, reject) => {
    const process = exec(`yarn shadcn:build`);

    process.on('exit', (code) => {
      if (code === 0) {
        resolve(undefined);
      } else {
        reject(new Error(`Process exited with code ${code}`));
      }
    });
  });
}

try {
  console.log('🗂️ Building registry/__index__.tsx...');
  await buildRegistryIndex();

  console.log('💅 Building registry.json...');
  await buildRegistryJsonFile();

  console.log('🏗️ Building registry...');
  await buildRegistry();
} catch (error) {
  console.error(error);
  process.exit(1);
}
