name: Claude Changeset

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened]
    paths:
      - 'packages/**'

jobs:
  create-changeset:
    # Only respond to @claude changeset mentions from authorized users in PRs
    # OR when packages are modified without changesets
    if: |
      (
        (
          (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude changeset') && github.event.issue.pull_request) ||
          (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude changeset')) ||
          (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude changeset'))
        ) && (
          github.actor == 'zbeyens' ||
          github.actor == 'felixfeng33'
        )
      ) || (
        github.event_name == 'pull_request' &&
        (github.actor == 'zbeyens' || github.actor == 'felixfeng33')
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for package changes without changesets
        id: check-changes
        if: github.event_name == 'pull_request'
        run: |
          # Get list of modified package files
          PACKAGE_CHANGES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '^packages/')

          if [ -n "$PACKAGE_CHANGES" ]; then
            # Check if any changeset files were created
            CHANGESET_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '^.changeset/')
            
            if [ -z "$CHANGESET_FILES" ]; then
              echo "::set-output name=needs_changeset::true"
              echo "Found package changes without corresponding changeset files"
            else
              echo "::set-output name=needs_changeset::false"
              echo "Changeset files already exist"
            fi
          else
            echo "::set-output name=needs_changeset::false"
            echo "No package changes detected"
          fi

      - name: Create Changeset
        if: |
          github.event_name != 'pull_request' ||
          (github.event_name == 'pull_request' && steps.check-changes.outputs.needs_changeset == 'true')
        uses: grll/claude-code-action@beta
        with:
          use_oauth: true
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          timeout_minutes: '60'
          direct_prompt: |
            You are tasked with creating changesets for the Plate project. Please follow these guidelines:

            **Primary Reference:**
            - Follow the Changeset Guide (.claude/commands/changeset.md) for structure, naming, and writing style

            **Changeset Standards:**
            - Use descriptive file naming: `[package]-[change-type].md`
            - Include proper YAML frontmatter with affected packages and change types
            - Write clear, concise descriptions using past tense verbs
            - Focus on public API changes and user impact only
            - Provide migration guidance for breaking changes
            - Use code blocks to show "Before" and "After" examples
            - Create separate changeset files for each distinct change type (major/minor/patch)

            **Change Type Guidelines:**
            - **major**: Breaking changes requiring user code updates
            - **minor**: New features that are backward-compatible
            - **patch**: Bug fixes and minor backward-compatible changes

            **Writing Style:**
            - Start bullet points with past tense verbs (Renamed, Added, Fixed, Removed)
            - Be direct and action-oriented like Radix UI changelog style
            - Use bold text for package names, plugin names, and important properties
            - Keep descriptions concise and focused on user impact
            - Provide clear migration steps for breaking changes

            **File Organization:**
            - Create changeset files in `.changeset/` directory
            - Use descriptive names that indicate package and change type
            - One file per distinct change to enable proper SemVer bumping

            Please analyze the changes in this PR and create appropriate changeset files following the guide.
